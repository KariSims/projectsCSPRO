{Application 'SUPERVISORMENU' logic file generated by CSPro}
PROC GLOBAL

  //Répertoire
  string RepApp, RepDict, repdrop, entryDir, dataDir, refDir, tasksDir, syncDir, AITDir, workDir, receiveDir, docTaskFile, ControleFile, backupDir, bcDIR, closedDir, updateSourceDir, updateDestDir;
  string btAddress, InterviewerId, InterviewerName,LibTrouve;  
  string ResumeTaskFile, reviewDataTaskFile;
  string encrKey ; //
  
  array string teamIdIndex(9999); //index des enqueteur par ID 
  array teamIds(50);              //tables des IDs de l'équipe
  numeric teamMemberCount;        //nombre total des memebres de l'équipe
  numeric NumEquip,TROUVE,ProvinceID ;              // Numéro de l'équipe

  numeric debugMode;              //1 - debug mode, 0 - non-debug mode
  numeric removableOnly;          //1 - backup to removable drive only, 0 - scan all accessable drives
  numeric supervAsInterv;         //1 - supervisor can play a role of interviewer, 0 - supervisor cannot conduct interviews

  numeric maxZDnum;               //Maximum number of households possible in one cluster
  string fichcarc, curFile, fileschcarc,strpart ;
  file f1,  Fich, pffCont ;

array string PCNameRef(6,2);
array string PCNameASS(6,3);
    
// Pour nettoyer la table
array numeric code(99);
array string label(99);

///---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function majorError(string message)
     setfont(ErrMsg,"Arial",44,bold,italics);
     errmsg(message);
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function Nettoie()
numeric i ;
	do i = 0 while i <= 99 
		code(i)=notappl; 
		label(i)= ""; 
	enddo; 
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function rech_province()
  Nettoie() ;
  numeric t=0;
  numeric i=0;
  numeric xcode=0 ;
  
      close(CLUSTERS); setfile( Fich,"C:\RDCRGE\Reference\cartor.dat") ;  
	     if Filesize( Fich ) > 0 then
		     while FileRead( Fich, fichcarc ) do
		     	  code(i)=notappl; label(i)= ""; 
		           if  (tonumber(fichcarc[1:2]) <> xcode) or i=0 then
		                  code(i)=tonumber(fichcarc[1:2]);
		                  label(i)=strip(fichcarc[15:25]);
		                  xcode = tonumber(fichcarc[1:2]);
		                  i=i+1; 
		          	endif;
		      enddo;
         endif ;
         close( Fich );
         open(CLUSTERS);
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function rech_province_nom()
  Nettoie() ;
  numeric t=0;
  numeric i=0;
  numeric xcode=0 ;
      close(CLUSTERS); setfile( Fich,"C:\RDCRGE\Reference\cartor.dat") ;  
	     if Filesize( Fich ) > 0 then
		     while FileRead( Fich, fichcarc ) do
		           if  (tonumber(fichcarc[1:2]) = MPROVIN) then
		                  MPROVINN=strip(fichcarc[15:25]);
		          	endif;
		      enddo;
         endif ;
         close( Fich );
         open(CLUSTERS);
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function rech_ville()
  Nettoie() ;
  numeric t=0;
  numeric i=0;
  numeric xcode=0 ;
      close(CLUSTERS); setfile( Fich,"C:\RDCRGE\Reference\cartor.dat") ;  
	     if Filesize( Fich ) > 0 then
		     while FileRead( Fich, fichcarc ) do
		     		code(i)=notappl; label(i)= ""; 
		          if tonumber(fichcarc[1:2]) = MPROVIN then 
		           if tonumber(fichcarc[1:5]) <> xcode then
		                 code(i)=tonumber(fichcarc[3:3]);
		                  label(i)=strip(fichcarc[40:25]);
				               if MVILLE=tonumber(fichcarc[3:3]) then
				                  MVILLEN=strip(fichcarc[40:25]);
				               endif;
				               xcode = tonumber(fichcarc[1:5]);
		                  i=i+1;
		          	endif;
		          endif ;
		      enddo;
          endif ;
         close( Fich );
         open(CLUSTERS);
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function rech_ville_nom()
  Nettoie() ;
  numeric t=0;
  numeric i=0;
  numeric xcode=0 ;
      close(CLUSTERS); setfile( Fich,"C:\RDCRGE\Reference\cartor.dat") ;  
	     if Filesize( Fich ) > 0 then
		     while FileRead( Fich, fichcarc ) do
		           if tonumber(fichcarc[1:5]) = (MPROVIN*1000) + MVILLE then
			                   MVILLEN=strip(fichcarc[40:25]);
		          endif ;
		     enddo;
          endif ;
         close( Fich );
         open(CLUSTERS);
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function rech_sec()
  Nettoie() ;
  numeric t=0;
  numeric i=0;
  numeric xcode=0 ;
  
      close(CLUSTERS); setfile( Fich,"C:\RDCRGE\Reference\cartor.dat") ; 
	     if Filesize( Fich ) > 0 then
		     while FileRead( Fich, fichcarc ) do
		     		 code(i)=notappl; label(i)= ""; 
		          if tonumber(fichcarc[1:5]) = (MPROVIN*1000) + MVILLE then  
		          	if tonumber(fichcarc[1:8]) <> xcode then
	                  code(i)=tonumber(fichcarc[6:3]);
	                  label(i)=strip(fichcarc[65:25]);
			            xcode = tonumber(fichcarc[1:8]);   
	                  i=i+1;
                  endif ;
		          endif ;
		      enddo;
          endif ;
         close( Fich );
         open(CLUSTERS);
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function rech_com_sec()
  Nettoie() ;
  numeric t=0;
  numeric i=0;
  numeric xcode=0 ;
      close(CLUSTERS); setfile( Fich,"C:\RDCRGE\Reference\cartor.dat") ; 
	     if Filesize( Fich ) > 0 then
		     while FileRead( Fich, fichcarc ) do
		          if tonumber(fichcarc[1:8]) = (((MPROVIN*1000) + MVILLE)*1000) + MSEC  then  
			           MSECN=strip(fichcarc[65:25]);
		          endif ;
		      enddo;
          endif ;
         close( Fich );
         open(CLUSTERS);
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function rech_Qtier()
  Nettoie() ;
    numeric t=0;
  numeric i=0;
  numeric xcode=0 ;
      close(CLUSTERS); setfile( Fich,"C:\RDCRGE\Reference\cartor.dat") ;  
	     if Filesize( Fich ) > 0 then
		     while FileRead( Fich, fichcarc ) do
		     code(i)=notappl; label(i)= ""; 
		          if tonumber(fichcarc[1:8]) = (((MPROVIN*1000) + MVILLE)*1000) + MSEC  then  
                 if   tonumber(fichcarc[1:11]) <> xcode then
	                  code(i)=tonumber(fichcarc[9:3]);
	                  label(i)=strip(fichcarc[90:25]);
			               if MQTIER=tonumber(fichcarc[9:3]) then
			               MQTIERN=strip(fichcarc[90:25]);
			               endif;
	                   xcode = tonumber(fichcarc[1:11]);
	                  i=i+1;
                  endif;
		          endif ;
		      enddo;
          endif ;
         close( Fich );
         open(CLUSTERS);
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function rech_Qtier_nom()
  Nettoie() ;
  numeric t=0;
  numeric i=0;
  numeric xcode=0 ;
      close(CLUSTERS); setfile( Fich,"C:\RDCRGE\Reference\cartor.dat") ;  
	     if Filesize( Fich ) > 0 then
		     while FileRead( Fich, fichcarc ) do
		     code(i)=notappl; label(i)= ""; 
		          if tonumber(fichcarc[1:11]) = ((((MPROVIN*1000) + MVILLE)*1000) + MSEC)*1000 + MQTIER   then  
			               MQTIERN=strip(fichcarc[90:25]);
		          endif ;
		      enddo;
          endif ;
         close( Fich );
         open(CLUSTERS);
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function rech_ZD()
  Nettoie() ;
    numeric t=0;
  numeric i=0;
  numeric xcode=0 ;
      close(CLUSTERS); setfile( Fich,"C:\RDCRGE\Reference\cartor.dat") ;  
	     if Filesize( Fich ) > 0 then
		     while FileRead( Fich, fichcarc ) do
		          if tonumber(fichcarc[1:11]) = ((((MPROVIN*1000) + MVILLE)*1000) + MSEC)*1000 + MQTIER then  
		           code(i)=notappl; label(i)= "";
	                  code(i)=tonumber(fichcarc[12:3]);
	                  label(i)=strip(fichcarc[115:10]);
			               if MQTIER=tonumber(fichcarc[13:3]) then
			                  MQTIERN=strip(fichcarc[115:10]);
			               endif;
	                   xcode = tonumber(fichcarc[1:14]);
	                  i=i+1;
		          endif ;
		      enddo ;    
          endif ;
         close( Fich );
         open(CLUSTERS);
end;

 //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  //Setting a variable value for the currently loaded task
  function setTaskVar(string varName, string varValue)
    numeric i;
    //first checking if the variable is already set
    do i = 1 while i <= maxocc(TASKS.TASK_VARIABLES) by 1
      if toupper(strip(varName)) = toupper(strip(TASK_VARNAME(i))) then
	    TASK_VARVAL(i) = varValue;
	    exit;
	  endif;
    enddo;

    //adding a new variable if in case it hasn't been set alerady
    do i = 1 while i <= maxocc(TASKS.TASK_VARIABLES) by 1
	  if length(strip(TASK_VARNAME(i))) = 0 then
	    TASK_VARNAME(i) = strip(varName);
	    TASK_VARVAL(i) = strip(varValue);
	    break;
	  endif;
    enddo;
  end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  //Getting the variable value using varibale name for the currently loaded task
  function string getTaskVar(string varName)
    numeric i;
    do i = 1 while i <= maxocc(TASKS.TASK_VARIABLES)
      if length(strip(TASK_VARNAME(i))) = 0 then
	    break;
	  endif;
      if toupper(strip(varName)) = toupper(strip(TASK_VARNAME(i))) then
	    getTaskVar = strip(TASK_VARVAL(i));
	    break;
  	  endif;
    enddo;
  end;
  
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  //this function will try create the directory if it doesn't exist already
  function string setDir(string dir)
    if !direxist(dir) then
      dircreate(dir);
    endif;
    setDir = dir;
  end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  //constructing team arrays
  function fillTeam()
    numeric curNum = UNUMBER;
    numeric curTeam = NUMPROV;
    string curId = UID;
    
    close(AIT_DICT);
    open(AIT_DICT);
    
    teamMemberCount = 0; 
    while loadcase(AIT_DICT) do
      if NUMPROV = curTeam then
       NumEquip = NUMPROV ;
        inc(teamMemberCount);
        teamIds(teamMemberCount) = UNUMBER;
        teamIdIndex(UNUMBER) = UID;
      endif;
    enddo;

    close(AIT_DICT);
    open(AIT_DICT);
       
    //sorting team members list (needed because CSPro sorts cases by case ID, which is Bluetooth MAC address)
    numeric i, j, k;
    do i = 1 while i < teamMemberCount by 1
      do j = i + 1 while j <= teamMemberCount by 1
        if teamIds(j) < teamIds(i) then
          k = teamIds(i);
          teamIds(i) = teamIds(j);
          teamIds(j) = k;
        endif;
      enddo;
    enddo;
    
    //creating ENVI variables for team users
    string enviStr="string teamNames; int teamNumbers;";
    do i = 1 while i <= teamMemberCount by 1
      enviStr = enviStr + maketext("teamNumbers += %d;", teamIds(i));
      
      UID = teamIdIndex(teamIds(i));
      if loadcase(AIT_DICT, UID) then
        enviStr = enviStr + maketext("teamNames += '%s';", strip(UNAME));
      else
        enviStr = enviStr + "teamNames += '';"
      endif;
    enddo;
    execEnvi(enviStr);
    
    //reloading original user record
    UID = curId;
    loadcase(AIT_DICT, UID);    
  end;
  
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// sauvegarde des tâches pour le cluster actuel sur le lecteur amovible
  function backupTasks()
    numeric bDrives = split(getSystemDrives(removableOnly), ";");
    
    // aucun lecteur trouvé
    if bDrives = 1 then
      exit;
    endif;
    
    numeric i;
    string bDir;
    do i = 1 while i < bDrives by 1
      bDir = spl(i) + backupDir;
      if dirExist(bDir) then
        //copying tasks
        if !dirExist(bDir + "\Tasks") then
          dircreate(bDir + "\Tasks");
        endif;
        filecopy(tasksDir + "\T" +  edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST) + "*", bDir + "\Tasks");
      endif;
    enddo;
  end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
 // Renvoie le nom de l'interviewer par adresse MAC
  function string getUName(string userId)
    string res = "";
    string oId = UID;
    
    UID = userId;
    if loadcase(AIT_DICT, UID) then
      res = UNAME;
    endif;
    
    // rechargement de l'utilisateur d'origine
    UID = oId;
    loadcase(AIT_DICT, UID);
    
    getUName = strip(res);
  end;
  
 //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   // concatène les données provenant des agents recenseurs
  function DataCopy()

  numeric i, j, k;
  string fl = "ZE", fileNum, repRGE;
  	{filedelete(workDir + "\*.*");		 
    do varying k = 1 until k > 150 
  		repRGE = repdrop + "\RGE" + edit("999",k);
  		fileCopy(repRGE + "\*.*" ,workDir);
    enddo;}     	         
  end;  

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
  function concatData(k)
  
    numeric i, j;
  string fl = "ZE", fileNum, Num, repRGE;
  
  if k = 0 then
  	fileNum = edit("99", MPROVIN);
  	filedelete(tempDir + "\*.csdb*");      
  	do j = 1 while j <= length(fl) by 1
		      if j = 1 then		      	
		      	fileConcat(RGEZD,tempDir + "\Z" + fileNum + ".csdb", workDir + "\Z" + fileNum + "???????????????.csdb");
		      	fileConcat(tempDir + "\Z" + fileNum + ".csdb.not", workDir + "\Z" + fileNum + "???????????????.csdb.not");
		        fileConcat(tempDir + "\Z" + fileNum + ".csdb.sts", workDir + "\Z" + fileNum + "???????????????.csdb.sts");
		      elseif j =2 then		      	
		      	fileConcat(RGE_DICT,tempDir + "\E" + fileNum + ".csdb", workDir + "\E" + fileNum + "???????????????.csdb");
		      	fileConcat(tempDir + "\E" + fileNum + ".csdb.not",workDir + "\E" + fileNum + "???????????????.csdb.not");
		        fileConcat(tempDir + "\E" + fileNum + ".csdb.sts", workDir + "\E" + fileNum + "???????????????.csdb.sts");
		      endif;
	enddo;   
		 
  elseif k = 1 then
  	fileNum = edit("99", MPROVIN) + edit("999", MVILLE);
  	filedelete(tempDir + "\*.csdb*");      
  	do j = 1 while j <= length(fl) by 1
		      if j = 1 then		      	
		      	fileConcat(RGEZD,tempDir + "\Z" + fileNum + ".csdb", workDir + "\Z" + fileNum + "????????????.csdb");
		      	fileConcat(tempDir + "\Z" + fileNum + ".csdb.not", workDir + "\Z" + fileNum + "????????????.csdb.not");
		        fileConcat(tempDir + "\Z" + fileNum + ".csdb.sts", workDir + "\Z" + fileNum + "????????????.csdb.sts");
		      elseif j =2 then		      	
		      	fileConcat(RGE_DICT,tempDir + "\E" + fileNum + ".csdb", workDir + "\E" + fileNum + "????????????.csdb");
		      	fileConcat(tempDir + "\E" + fileNum + ".csdb.not",workDir + "\E" + fileNum + "????????????.csdb.not");
		        fileConcat(tempDir + "\E" + fileNum + ".csdb.sts", workDir + "\E" + fileNum + "????????????.csdb.sts");
		      endif;
	enddo;   
		 
  elseif k = 2 then
  	fileNum = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC);
  	filedelete(tempDir + "\*.csdb*");      
  	do j = 1 while j <= length(fl) by 1
		      if j = 1 then		      	
		      	fileConcat(RGEZD,tempDir + "\Z" + fileNum + ".csdb", workDir + "\Z" + fileNum + "?????????.csdb");
		      	fileConcat(tempDir + "\Z" + fileNum + ".csdb.not", workDir + "\Z" + fileNum + "?????????.csdb.not");
		        fileConcat(tempDir + "\Z" + fileNum + ".csdb.sts", workDir + "\Z" + fileNum + "?????????.csdb.sts");
		      elseif j =2 then		      	
		      	fileConcat(RGE_DICT,tempDir + "\E" + fileNum + ".csdb", workDir + "\E" + fileNum + "?????????.csdb");
		      	fileConcat(tempDir + "\E" + fileNum + ".csdb.not",workDir + "\E" + fileNum + "?????????.csdb.not");
		        fileConcat(tempDir + "\E" + fileNum + ".csdb.sts", workDir + "\E" + fileNum + "?????????.csdb.sts");
		      endif;
	enddo;   
		 
  elseif k = 3 then
  	fileNum = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER);
  	filedelete(tempDir + "\*.csdb*");      
  	do j = 1 while j <= length(fl) by 1
		      if j = 1 then		      	
		      	fileConcat(RGEZD,tempDir + "\Z" + fileNum + ".csdb", workDir + "\Z" + fileNum + "??????.csdb");
		      	fileConcat(tempDir + "\Z" + fileNum + ".csdb.not", workDir + "\Z" + fileNum + "??????.csdb.not");
		        fileConcat(tempDir + "\Z" + fileNum + ".csdb.sts", workDir + "\Z" + fileNum + "??????.csdb.sts");
		      elseif j =2 then		      	
		      	fileConcat(RGE_DICT,tempDir + "\E" + fileNum + ".csdb", workDir + "\E" + fileNum + "??????.csdb");
		      	fileConcat(tempDir + "\E" + fileNum + ".csdb.not",workDir + "\E" + fileNum + "??????.csdb.not");
		        fileConcat(tempDir + "\E" + fileNum + ".csdb.sts", workDir + "\E" + fileNum + "??????.csdb.sts");
		      endif;
	enddo;   
		 
  elseif k = 4 then
  	fileNum = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST);
  	filedelete(tempDir + "\*.csdb*");      
  	do j = 1 while j <= length(fl) by 1
		      if j = 1 then		      	
		      	fileConcat(RGEZD,tempDir + "\Z" + fileNum + ".csdb", workDir + "\Z" + fileNum + "???.csdb");
		      	fileConcat(tempDir + "\Z" + fileNum + ".csdb.not", workDir + "\Z" + fileNum + "???.csdb.not");
		        fileConcat(tempDir + "\Z" + fileNum + ".csdb.sts", workDir + "\Z" + fileNum + "???.csdb.sts");
		      elseif j =2 then		      	
		      	fileConcat(RGE_DICT,tempDir + "\E" + fileNum + ".csdb", workDir + "\E" + fileNum + "???.csdb");
		      	fileConcat(tempDir + "\E" + fileNum + ".csdb.not",workDir + "\E" + fileNum + "???.csdb.not");
		        fileConcat(tempDir + "\E" + fileNum + ".csdb.sts", workDir + "\E" + fileNum + "???.csdb.sts");
		      endif;
	enddo;  
		 
  endif;
  		
  end;
 			
// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

   //generation des taches de la ZD
  function Document()
  	 numeric i, j;
     string tID;
    //Assignation de la Zonne de dénombrement
    clear(TASKS);
    
    setfile(TASKS, docTaskFile, create);
 	  
  	 	 TASK_ID = getGuid(); // ID de tâche unique
		 TASK_TEMPLATENAME = "DOC";
		 TASK_LABEL = "Documentations";
		 TASK_STATUS = 1;
		 TASK_PARENTID = "";
		 TASK_DUMMY = 0; //très important
		 writecase(TASKS); 
		 tID = TASK_ID;  
    
	     TASK_ID = getGuid(); // ID de tâche unique
		 TASK_TEMPLATENAME = "FILE1";
		 TASK_LABEL = "Nommenclature avec notes explicatives";
		 TASK_STATUS = 1;
		 TASK_PARENTID = tID;
		 TASK_DUMMY = 0; //très important
		 writecase(TASKS);
		 
		 TASK_ID = getGuid(); // ID de tâche unique
		 TASK_TEMPLATENAME = "FILE2";
		 TASK_LABEL = "Groupe d'activité";
		 TASK_STATUS = 1;
		 TASK_PARENTID = tID;
		 TASK_DUMMY = 0; //très important
		 writecase(TASKS);
		 
		 TASK_ID = getGuid(); // ID de tâche unique
		 TASK_TEMPLATENAME = "FILE3";
		 TASK_LABEL = "Nomenclature des activités";
		 TASK_STATUS = 1;
		 TASK_PARENTID = tID;
		 TASK_DUMMY = 0; //très important
		 writecase(TASKS);
		 
		 TASK_ID = getGuid(); // ID de tâche unique
		 TASK_TEMPLATENAME = "FILE4";
		 TASK_LABEL = "Manuel AIT";
		 TASK_STATUS = 1;
		 TASK_PARENTID = tID;
		 TASK_DUMMY = 0; //très important
		 writecase(TASKS);
    
    close(TASKS);

end
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
// affiche les tâches actuelles du chef d'équipe
  function showTasks()
    numeric res = 0;

    // chargement des tâches
    loadTasks("AITTasks", 0, RepDict + "\tasks.dcf", reviewDataTaskFile);
    loadTasks("AITTasks", 1, RepDict + "\tasks.dcf", ResumeTaskFile);
    loadTasks("AITTasks", 2, RepDict + "\tasks.dcf", docTaskFile );
         
    // montrant les tâches
    showTaskList("AITTasks");
  
	// résultat de lecture
   // La fonction renvoie l'ID de l'option. Tâche chargée dans un dictionnaire TASKS
    string ares;
    
    if fileexist(tempDir + "\taskList.tmp") then
      setfile(f1, tempDir + "\taskList.tmp");
      open(f1);  
      fileread(f1, ares);
      close(f1);
      
      split(ares, ";");
      
      numeric panelIdx = tonumber(spl(3));
      if panelIdx = 0 | panelIdx = default then
        curFile = reviewDataTaskFile;
      elseif panelIdx = 1 then
        curFile = ResumeTaskFile;
      elseif panelIdx = 2 then
        curFile = docTaskFile;
      endif;
            
      // cas de chargement
      filedelete(curFile + ".csidx");
      setfile(TASKS, curFile);
      TASK_ID = strip(spl(1));
      if loadcase(TASKS, TASK_ID) then
        res = tonumber(spl(2));
      endif;
      close(TASKS);
    endif;
    
    showTasks = res;

  end;  
   
   //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function genresume(p)

	// Concatener les données
	concatData(p);
	
	string Numfile;
			
    if p = 0 then
    	Numfile = edit("99", MPROVIN);
    elseif p = 1 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE);
    elseif p = 2 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC);
    elseif p = 3 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER);
    elseif p = 4 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST);
    endif;
    
    filedelete(ResumeTaskFile + "*");
    
    // Création du fichier pff Resume
    openPffFile(tempDir + "\Resume.pff", 2);
    
    writePff_InputFiles(AITDir + "\Resume.bch",
                        tempDir + "\Z" + Numfile + ".csdb",
                        tempDir + "\Resume.csdb.lst",
                        tempDir + "\Resume.wrt");
  
    writePff_ExternalFile("RGE_DICT", tempDir  + "\E" + Numfile + ".csdb");
    writePff_ExternalFile("TASKS", ResumeTaskFile);
    
    closePffFile(0, ""); // passer une liste de ménages dans le fichier "R" comme paramètre
    
    // exécution de l'ID de contrôle
    runBatch(tempDir + "\Resume.pff");

 end;
   
  // ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
   // Remplissage du panneau des tâches de révision des données
  function updateReviewTasks(p)
    // concaténation des fichiers de l'intervieweur
    
    concatData(p);
	
	string Numfile;
			
    if p = 0 then
    	Numfile = edit("99", MPROVIN);
    elseif p = 1 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE);
    elseif p = 2 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC);
    elseif p = 3 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER);
    elseif p = 4 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST);
    endif;
       
    filedelete(reviewDataTaskFile + "*");
    
    // Création du fichier pff GenReviewTasks
    openPffFile(tempDir + "\GenReviewTasks.pff", 2);
    
    writePff_InputFiles(AITDir + "\GenReviewTasks.bch",
                        tempDir + "\Z" + Numfile + ".csdb",
                        tempDir + "\GenReviewTasks.csdb.lst",
                        tempDir + "\GenReviewTasks.wrt");
  
    writePff_ExternalFile("RGE_DICT", tempDir  + "\E" + Numfile + ".csdb");
    writePff_ExternalFile("TASKS", reviewDataTaskFile);
    
    closePffFile(0, ""); // passer une liste de ménages dans le fichier "R" comme paramètre
    
    // exécution de l'ID de contrôle
    runBatch(tempDir + "\GenReviewTasks.pff");
    
 end;

//*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  function RevueZdPff(p)
  
  	concatData(p);
	
	string Numfile;
			
    if p = 0 then
    	Numfile = edit("99", MPROVIN);
    elseif p = 1 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE);
    elseif p = 2 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC);
    elseif p = 3 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER);
    elseif p = 4 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST);
    endif;
 	 
   if TASK_STATUS = 1 then
   		exit;
    endif;
      
   filedelete(tempDir + "\RGEZD.pff");

   openPffFile(tempDir + "\RGEZD.pff", 1);
            
    string zdId = edit("99", TASK_PROVINCE) + edit("999", TASK_VILLE) + edit("999", TASK_SEC) + edit("999", TASK_QTIER) + edit("999", TASK_NUMZD) + edit("9999", TASK_NUMAR);
        
    writePff_DataEntryInit("RGEZD", "Modify, Verify", "MODIFY;" + zdId, 1, 1);
       
    string app = entryDir + "\RGEZD.ent";
    
    writePff_InputFiles(app,
                        tempDir + "\Z" + Numfile + ".csdb",
                        tempDir + "\Z" + Numfile + ".lst", "");
                        
    writePff_ExternalFile("CLUSTERS", refDir + "\carto.dat");
    writePff_ExternalFile("TASKS", reviewDataTaskFile);
    
    string p1 = edit("99", TASK_PROVINCE) + 
    			edit("999", TASK_VILLE) + 
    			edit("999", TASK_SEC)   + 
    			edit("999", TASK_QTIER) + 
    			edit("999", TASK_NUMZD) + 
                edit("9999", TASK_NUMAR);
                
    closePffFile(0, p1);
     
    runEntry(tempDir + "\RGEZD.pff");
    
   end;
  
 //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
     
  // PFF DES Entreprises
function RevueEsePff(p)
  	
  	concatData(p);
	
	string Numfile;
  	
  	if p = 0 then
    	Numfile = edit("99", MPROVIN);
    elseif p = 1 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE);
    elseif p = 2 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC);
    elseif p = 3 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER);
    elseif p = 4 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST);
    endif;
  	  
  	if TASK_STATUS = 1 then
   		exit;
    endif;
      	 
  	 filedelete(tempDir + "\RGE.pff");
  	
    openPffFile(tempDir + "\RGE.pff", 1);
    
    string eseId = edit("99", TASK_PROVINCE) + edit("999", TASK_VILLE) + edit("999", TASK_SEC) + edit("999", TASK_QTIER) + edit("999", TASK_NUMZD) + edit("9999", TASK_NUMAR) + edit("999", TASK_NUMESE);
   			     			
	writePff_DataEntryInit("RGE", "ADD, Verify", "MODIFY" + ";" + eseId, 1, 1);         
   
    string app = entryDir + "\RGE.ent";
    
    writePff_InputFiles(app,
                        tempDir + "\E" + Numfile + ".csdb",
                        tempDir + "\E" + Numfile + ".lst", "");

    writePff_ExternalFile("RGEZD", tempDir + "\Z" + Numfile + ".csdb");
    writePff_ExternalFile("TASKS", reviewDataTaskFile);
    
    string p1 = edit("99", TASK_PROVINCE) + 
    			edit("999", TASK_VILLE) + 
    			edit("999", TASK_SEC)   + 
    			edit("999", TASK_QTIER) + 
    			edit("999", TASK_NUMZD) + 
                edit("9999", TASK_NUMAR) +
                edit("999", TASK_NUMESE);
                
	closePffFile(0, p1);
	    
    runEntry(tempDir + "\RGE.pff");
    
  end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  function opendocument(doc)
  
  	  string xdoc;
  	    
	  if doc = 1 then
	  	 xdoc = "C:\RDCRGE\Documents\NOMENCLATURE_EXPLICATIVE.PDF";
	  endif;
	  
	  if doc = 2 then
	  	xdoc = "C:\RDCRGE\Documents\GROUPE_ACTIVITE.PDF";
	  endif;
	  
	  if doc = 3 then
	  	xdoc = "C:\RDCRGE\Documents\NOMENCLATURE.pdf";
	  endif;
	  
	  if doc = 4 then
	  	xdoc = "C:\RDCRGE\Documents\MANUEL.PDF";
	  endif;
	   	  
  	  execsystem(maketext('"%sInternet Explorer\iexplore.exe" "%s"',pathname(ProgramFiles32),xDoc));
  	  		
  end;
   		 
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  // fonction principale qui prend des décisions sur l'exécution du code de routage pour la tâche actuellement chargée
function taskRouter(p,optionId)
   
   if strip(TASK_TEMPLATENAME) = "zd_int" then 
      RevueZdPff(p);    
   elseif strip(TASK_TEMPLATENAME) = "ese_int" then 
   	  RevueEsePff(p);
   elseif strip(TASK_TEMPLATENAME) = "FILE1" then
      opendocument(1);
   elseif strip(TASK_TEMPLATENAME) = "FILE2" then
      opendocument(2);
   elseif strip(TASK_TEMPLATENAME) = "FILE3" then
      opendocument(3);
   elseif strip(TASK_TEMPLATENAME) = "FILE4" then
      opendocument(4);     
   endif;
   
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function  Sauve()

			string xSD = "ABCDEFGHIJKLMNOPQRTSUVWXY",   SDdir  ;
			numeric p = 1 , T= 0  ;
 
       // Sauvegarde des données dans la tablette 
        // crée le rep de la sauvegarde incrementale si elle n'existe pas
         SDdir =  projectDir + "\DataBackup\SavRGE\ATIData" + edit("99999999",sysdate("YYYYMMDD")) + edit("99",systime("HH")); 
         if !dirExist( SDdir) then  dircreate(SDdir); endif;   
			if !dirExist(SDdir + "\Receive") then  dircreate(SDdir + "\Receive"); endif;
			filecopy(ReceiveDir + "\?" + edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST) + edit("999",int(tonumber(interviewerId)/10)) + "*",  SDdir + "\Receive" ); 
			
			if !dirExist(SDdir + "\Work") then  dircreate(SDdir + "\Work"); endif;
			filecopy(workDir + "\?" + edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST) + "*",   SDdir + "\Work" ); 

       // Sauvegarde incrémentale dans la SD 
			do varying p=1 until p>=25  ;     
			    if fileexist(xSD[p:1] + ":\SavRGE\ATISD.txt") then
			     SDdir = xSD[p:1]+":\SavRGE\DataBackup\ATIData" + edit("99999999",sysdate("YYYYMMDD")) + edit("99",systime("HH")); 
			         
			       // Dossier de saugvergade des données avant suppression
					if !dirExist(SDdir + "\Receive") then  dircreate(SDdir + "\Receive"); endif;
					filecopy(ReceiveDir + "\?" + edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST) + edit("999",int(tonumber(interviewerId)/10)) + "*",  SDdir + "\Receive" ); 
					
					if !dirExist(SDdir + "\Work") then  dircreate(SDdir + "\Work"); endif;
					filecopy(workDir + "\?" + edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST) + "*",   SDdir + "\Work" ); 
    		    endif ;
		   enddo;
		   
       // Sauvegarde incrémentale dans la SD 
			do varying p=1 until p>=25  ;     
			    if fileexist(xSD[p:1] + ":\SavRGE\ATIUSB.txt") then
			      SDdir = xSD[p:1]+":\SavRGE\DataBackup\ATIData" + edit("99999999",sysdate("YYYYMMDD")) + edit("99",systime("HH")); 
			      // Dossier de saugvergade des données avant suppression
					if !dirExist(SDdir + "\Receive") then  dircreate(SDdir + "\Receive"); endif;
					filecopy(ReceiveDir + "\?" + edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST) + edit("999",int(tonumber(interviewerId)/10)) + "*",  SDdir + "\Receive" ); 
					if !dirExist(SDdir + "\Work") then  dircreate(SDdir + "\Work"); endif;
					filecopy(workDir + "\?" + edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST) + "*",   SDdir + "\Work" ); 
			    endif ;
		   enddo;   
		   
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Function USBcopy()
  
  string SD = "ABCDEFGHIJKLMNOPQRTSUVWXY",   USBdir, USBbackupDir  ;
  numeric pu = 1 , Tu, cle = 0  ;
  
  Tu = errmsg("Avez-vous inserer votre clé d'AIT")select("Oui",continue,"Non",continue);
    
  if Tu = 1 then          
  // Sauvegarde dans les unités
			do varying pu=1 until pu>25  ;     
			    if fileexist(SD[pu:1] + ":\SavRGE\ATIUSB.txt") then
			      USBdir = SD[pu:1]+":\SavRGE\DataBackup\SupData" + edit("99999999",sysdate("YYYYMMDD")) + edit("99",systime("HH")); 
			      // Dossier de saugvergade des données avant suppression
					if !dirExist(USBdir + "\Receive") then  dircreate(USBdir + "\Receive"); endif;
					filecopy(ReceiveDir + "\*",  USBdir + "\Receive" ); 
					if !dirExist(USBdir + "\Work") then  dircreate(USBdir + "\Work"); endif;
					filecopy(workDir + "\*",   USBdir + "\Work" ); 
					cle = 1;
			    endif ;
		   enddo;   

    	if cle = 0 then        
    		errmsg("Aucune clé de chef d'équipe retrouvée");	
    	endif ;    
   endif;    
  
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
Function DropBox()
  	// numeric bDrives = split(getSystemDrives(removableOnly), ";");
  				
   // Transfer par DropBox au Bureau Central  				
  				
   // vérification du dropBox			
  if ! direxist(concat(repdrop,"\PROVINCE",edit("99",MPROVIN))) then
    dircreate(concat(repdrop,"\PROVINCE",edit("99",MPROVIN)));
  endif;
    // Deposer les données dans le répertoire de l'équipe
    
    filecopy(concat(workDir,"\*.*"),receiveDir);	

    filecopy(concat(receiveDir,"\*.*") ,concat(repdrop,toupper("\PROVINCE"),edit("99",MPROVIN)));   
    
   setfile( Fich, concat(repdrop,toupper("\PROVINCE"),edit("99",MPROVIN),"\trace.txt"),create) ;  
    
		filewrite(Fich, "Envoyé par %s(ID : %s), le %s à %s",strip(InterviewerName),UID, edit("99/99/9999", sysdate("DDMMYYYY")), edit("99:99:99",systime()));
		close( Fich );
	    // Vérifier l'internet
	    if connection() then  //  connection(wifi) | connection(wifi) 
	      errmsg("Les données sont en cours de transfert au Bureau Central ");
	    else
	      errmsg("Pas d'internet, les données seront transférées dès que vous serez connectés. ");
	   endif;

     // Sauvegarde incrémental      
      Sauve() ;
     
End;
  
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  //Data synchronization with the central office
function syncCentral()

    // vérification du dropBox    
    if direxist(repdrop) then
       // envoyer les données
       DropBox();
    else
       errmsg(" DropBox n'a pas été configuré ") ;   
    endif;   
    
End;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    // création du fichier Log de transmission
  
function syncCentralRequired()
   // vérifie d'abord s'il y a des fichiers dans le dossier \ receive
    numeric res = fileexist(receiveDir + "\*.*");
    
    if res then
     // vérification de la dernière date de synchronisation
      if fileexist(tempdir + "\last_sync.tmp") then
        setfile(f1, tempdir + "\last_sync.tmp");
        open(f1);
          string lastDate;
          if fileread(f1, lastDate) then
            numeric ld = tonumber(lastDate);
            res = sysdate() > ld;
          endif;
        close(f1);
      endif;
    endif;
  
    syncCentralRequired = res;
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
 // Définition du marqueur de date après une synchronisation IFSS réussie
function setLastDateMarker()
    string transferLog = tempdir + "\transferLog.tmp";
    if readtransferLog(transferLog) = 1001 then
      filedelete(tempdir + "\last_sync.tmp");
      setfile(f1, tempdir + "\last_sync.tmp", create);
      open(f1);
        filewrite(f1, "%d", sysdate());
      close(f1);
      filedelete(transferLog);
    endif;
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
    // Remplissage du panneau des tâches de révision des données
  function kmlbatch(p)
    // concaténation des fichiers de l'intervieweur
    concatData(p);
    string Numfile;
    if p = 0 then
    	Numfile = edit("99", MPROVIN);
    elseif p = 1 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE);
    elseif p = 2 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC);
    elseif p = 3 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER);
    elseif p = 4 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST);
    endif;
    
    if !direxist("C:\RDCRGE\Reference\Kml") then
		dircreate("C:\RDCRGE\Reference\Kml");
	endif;
        
    // Création du fichier pff GenReviewTasks
    filedelete(tempDir + "\klm.pff");
    openPffFile(tempDir + "\klm.pff", 2);
    
    writePff_InputFiles(AITDir + "\Kml\Carte_Entreprise.bch",
                        tempDir + "\Z" + Numfile + ".csdb",
                        tempDir + "\Carte_Entreprise.csdb.lst",
                        tempDir + "\Carte_Entreprise.wrt");
                        
  	writePff_ExternalFile("RGE_DICT", tempDir + "\E" + Numfile + ".csdb");
    
    closePffFile(0, ""); // passer une liste de ménages dans le fichier "R" comme paramètre
    
    // exécution de l'ID de contrôle
    runBatch(tempDir + "\klm.pff");
    filedelete(tempDir + "\*.csdb*");
  end;

//*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   
function VisCarteAD(p)
	//Execution de google map
		string xkml, eKML, xrepGoo  ; 
		numeric ex=0, xIlot ;
kmlbatch(p);
		
xkml = "C:\RDCRGE\Reference\Kml\Carte_entreprises.kml";
	   
	if Getos() < 20 then		
		//recherche l'installation de googleearth	

			if direxist("C:\Program Files (x86)\Google\Google Earth Pro\client") then xrepGoo ="C:\Program Files (x86)\Google\Google Earth Pro\client" ;  endif;
 			if direxist("C:\Program Files (x86)\Google\Google Earth\client") then xrepGoo ="C:\Program Files (x86)\Google\Google Earth\client" ;  endif;           
			if direxist("C:\Program Files\Google\Google Earth Pro\client") then xrepGoo ="C:\Program Files\Google\Google Earth Pro\client" ;  endif;   
			if direxist("C:\Program Files\Google\Google Earth\client") then xrepGoo ="C:\Program Files\Google\Google Earth\client" ;  endif;   
	
       eKML = maketext('"%s\googleearth.exe" " %s "',xrepGoo,xkml);
		 execsystem(eKML,maximized,nowait   );ex=1;		
	 endif ;
		
end;
	
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function entete()
 
  setFile(pffCont, tempDir + "\Controle.pff", create);
  open(pffCont);
  filewrite(pffCont, "[Run Information]");
  filewrite(pffCont, "Version=CSPro 7.2");
  filewrite(pffCont, "AppType=Batch");	
  filewrite(pffCont, " ");  	
  filewrite(pffCont, "[Files]");
  
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
function ferme()	

  filewrite(pffCont, " ");
  filewrite(pffCont, "[Parameters]");
  filewrite(pffCont, "ViewListing=Never");
  filewrite(pffCont, "ViewResults=No");
  filewrite(pffCont, "ListingWidth=80");
  filewrite(pffCont, "MessageWrap=No");
  filewrite(pffCont, "ErrmsgOverride=No");

 close(pffCont);
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function ControleDonnees(p)

	// Concatener les données
	concatData(p);
    string Numfile, files;
    if p = 0 then
    	Numfile = edit("99", MPROVIN);
    	files = "Province_de_" + strip(MPROVINN);
    elseif p = 1 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE);
    	files = "Ville_ou_treitoire_de_" + strip(MVILLEN);
    elseif p = 2 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC);
    	files = "Secteur_ou_commune_de_" + strip(MSECN);
    elseif p = 3 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER);
    	files = "Quartier_ou_groupement_de_" + strip(MQTIERN);
    elseif p = 4 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST);
    	files = "ZD_" + edit("999", MCLUST) + "_" + strip(MQTIERN);
    endif;
    		
    if fileexist(concat(TempDir,"\E",Numfile,".csdb")) then
		  
		  // Générer le pff ControleDonnees
		  
		  filedelete(tempDir + "\Controle.pff"); 
		  entete();
		  
	      filewrite(pffCont, "Application=C:\RDCRGE\Applications\Supervisor\Controle\Controle.bch") ;
	      filewrite(pffCont, "InputData=C:\RDCRGE\Temp\E"+ Numfile +".csdb|CSPRODB") ;
	      filewrite(pffCont, "OutputData=C:\RDCRGE\Temp\EntrepriseOUT.csdb|CSPRODB") ;
	      filewrite(pffCont, "Listing=.\Entreprise.lst") ;
	      filewrite(pffCont, "[UserFiles]") ;
	      filewrite(pffCont, "HTMLTEMP=") ;
	      
	      ferme();
    	  
    	  // exécuter le pff ControleDonnees
    	  
    	  runBatch(tempDir + "\Controle.pff"); 	
    	  setdir(ControleFile + "\Erreurs") ;       
    	  filecopy(tempDir + "\Controle.html", ControleFile + "\Erreurs\Controle_" + files + ".html");
  
    	  filedelete(tempDir + "\*.csdb");
    	  
	else
	 	  errmsg(maketext("Pas de données des données Entreprises(%s\E%s.csdb) pour cette ZD",TempDir,Numfile)) ;	
	endif;
    	 
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function ControleActivite(p)

		// Concatener les données
	concatData(p);
    string Numfile, files;
    if p = 0 then
    	Numfile = edit("99", MPROVIN);
    	files = "Province_de_" + strip(MPROVINN);
    elseif p = 1 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE);
    	files = "Ville_ou_treitoire_de_" + strip(MVILLEN);
    elseif p = 2 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC);
    	files = "Secteur_ou_commune_de_" + strip(MSECN);
    elseif p = 3 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER);
    	files = "Quartier_ou_groupement_de_" + strip(MQTIERN);
    elseif p = 4 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST);
    	files = "ZD_" + edit("999", MCLUST) + "_" + strip(MQTIERN);
    endif;
	
    if fileexist(concat(TempDir,"\E",Numfile,".csdb")) then
    
    	  // Générer le pff ControleActivite
    	  
    	  filedelete(tempDir + "\Controle.pff"); 
		  entete();
		  
	      filewrite(pffCont, "Application=C:\RDCRGE\Applications\Supervisor\Controle\ControleA.bch") ;
	      filewrite(pffCont, "InputData=C:\RDCRGE\Temp\E"+ Numfile +".csdb|CSPRODB") ;
	      filewrite(pffCont, "OutputData=C:\RDCRGE\Temp\EntrepriseOUT.csdb|CSPRODB") ;
	      filewrite(pffCont, "Listing=.\Entreprise.lst") ;
	      filewrite(pffCont, "[UserFiles]") ;
	      filewrite(pffCont, "HTMLTEMP=") ;
	      
	      ferme();
		  
		  // exécuter le pff ControleActivite
    
    	  runBatch(tempDir + "\Controle.pff");   
    	  setdir(ControleFile + "\Controle_Activites") ;       
    	  filecopy(tempDir + "\ControleAct.html", ControleFile + "\Controle_Activites\ControleAct_" + files + ".html");
 	  
    	  filedelete(tempDir + "\*.csdb");
    	  
	else
	 	  errmsg(maketext("Pas de données des données Entreprises(%s\E%s.csdb) pour cette ZD",TempDir,Numfile)) ;	
	endif;    
    
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function ControleNote(p)

		// Concatener les données
	concatData(p);
    string Numfile, files;
    if p = 0 then
    	Numfile = edit("99", MPROVIN);
    	files = "Province_de_" + strip(MPROVINN);
    elseif p = 1 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE);
    	files = "Ville_ou_treitoire_de_" + strip(MVILLEN);
    elseif p = 2 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC);
    	files = "Secteur_ou_commune_de_" + strip(MSECN);
    elseif p = 3 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER);
    	files = "Quartier_ou_groupement_de_" + strip(MQTIERN);
    elseif p = 4 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST);
    	files = "ZD_" + edit("999", MCLUST) + "_" + strip(MQTIERN);
    endif;

    if fileexist(concat(TempDir,"\E",Numfile,".csdb")) then
		
		  // Générer le pff ControleNote
		  
		  filedelete(tempDir + "\Controle.pff"); 
		  entete();
		  
	      filewrite(pffCont, "Application=C:\RDCRGE\Applications\Supervisor\Controle\ControleNote.bch") ;
	      filewrite(pffCont, "InputData=C:\RDCRGE\Temp\E"+ Numfile +".csdb|CSPRODB") ;
	      filewrite(pffCont, "OutputData=C:\RDCRGE\Temp\EntrepriseOUT.csdb|CSPRODB") ;
	      filewrite(pffCont, "Listing=.\Entreprise.lst") ;
	      filewrite(pffCont, "[UserFiles]") ;
	      filewrite(pffCont, "HTMLTEMP=") ;
	      
	      ferme();
		  		  
		  // exécuter le pff ControleNote
    
    	  runBatch(tempDir + "\Controle.pff"); 
    	  setdir(ControleFile + "\Notes") ;       
    	  filecopy(tempDir + "\ControleNote.html", ControleFile + "\Notes\ControleNote_" + files + ".html");
   	  
    	  filedelete(tempDir + "\*.csdb");
    	  
	else
	 	  errmsg(maketext("Pas de données des données Entreprises(%s\E%s.csdb) pour cette ZD",TempDir,Numfile)) ;	
	endif;  
	
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function enteteT()
 
  setFile(pffCont, tempDir + "\Controle.pff", create);
  open(pffCont);
  filewrite(pffCont, "[Run Information]");
  filewrite(pffCont, "Version=CSPro 7.2");
  filewrite(pffCont, "AppType=Tabulation");	
  filewrite(pffCont, "Operation=All");	
    
  filewrite(pffCont, " ");  	
  filewrite(pffCont, "[Files]");
  
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
function fermeT()	

  filewrite(pffCont, " ");
  filewrite(pffCont, "[Parameters]");
  filewrite(pffCont, "ViewListing=Never");
  filewrite(pffCont, "ViewResults=Yes");
  filewrite(pffCont, "InputOrder=Sequential");

 close(pffCont);
end;


function executeT()
	// EXECUTER LE PFF
	 execsystem('"' + csproDir + '\csbatch.exe" "' + tempDir + "\Controle.pff" + '"', normal, wait);
end ;
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function genCtrTPff(p,tab)

	// Concatener les données
	concatData(p);
    string Numfile, files;
    if p = 0 then
    	Numfile = edit("99", MPROVIN);
    	files = "Province_de_" + strip(MPROVINN);
    elseif p = 1 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE);
    	files = "Ville_ou_treitoire_de_" + strip(MVILLEN);
    elseif p = 2 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC);
    	files = "Secteur_ou_commune_de_" + strip(MSECN);
    elseif p = 3 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER);
    	files = "Quartier_ou_groupement_de_" + strip(MQTIERN);
    elseif p = 4 then
    	Numfile = edit("99", MPROVIN) + edit("999", MVILLE) + edit("999", MSEC) + edit("999", MQTIER) + edit("999", MCLUST);
    	files = "ZD_" + edit("999", MCLUST) + "_" + strip(MQTIERN);
    endif;
	
	if fileexist(concat(tempDir,"\E",Numfile,".csdb")) then
		  enteteT() ;
		  
		 if tab=1 then  filewrite(pffCont, "Application=C:\RDCRGE\Applications\AIT\Tableaux\TabCE01.xtb"); endif ; // Généraux
		 if tab=2 then  filewrite(pffCont, "Application=C:\RDCRGE\Applications\AIT\Tableaux\TabCE02.xtb"); endif ; // Activités principales
		 if tab=3 then  filewrite(pffCont, "Application=C:\RDCRGE\Applications\AIT\Tableaux\TabCE03.xtb"); endif ; // Activités secondaires 1
		 if tab=4 then  filewrite(pffCont, "Application=C:\RDCRGE\Applications\AIT\Tableaux\TabCE04.xtb"); endif ; // Activités secondaires 2
		 if tab=5 then  filewrite(pffCont, "Application=C:\RDCRGE\Applications\AIT\Tableaux\TabATI01.xtb"); endif ; // Activités secondaires 2
		 if tab=6 then  filewrite(pffCont, "Application=C:\RDCRGE\Applications\AIT\Tableaux\TabATI02.xtb"); endif ; // Activités secondaires 2
		 if tab=7 then  filewrite(pffCont, "Application=C:\RDCRGE\Applications\AIT\Tableaux\TabATI03.xtb"); endif ; // Activités secondaires 2
		 if tab=8 then  filewrite(pffCont, "Application=C:\RDCRGE\Applications\AIT\Tableaux\TabATI04.xtb"); endif ; // Activités secondaires 2
		 if tab=9 then  filewrite(pffCont, "Application=C:\RDCRGE\Applications\AIT\Tableaux\TabATI05.xtb"); endif ; // Activités secondaires 2
		 filewrite(pffCont, "InputData=C:\RDCRGE\Temp\E" + Numfile + ".csdb");
		 if tab=1 then  filewrite(pffCont, "OutputTBW=..\Temp\TabCE1_Gen_" + files + ".xtb.tbw") ; endif ; // Généraux
		 if tab=2 then  filewrite(pffCont, "OutputTBW=..\Temp\TabCE2_Acti_" + files + ".xtb.tbw") ; endif ; // Activités
		 if tab=3 then  filewrite(pffCont, "OutputTBW=..\Temp\TabCE3_ActiSec1_" + files + ".xtb.tbw") ; endif ; // Activités
		 if tab=4 then  filewrite(pffCont, "OutputTBW=..\Temp\TabCE4_ActiSec2_" + files + ".xtb.tbw") ; endif ; // Activités		
		 if tab=5 then  filewrite(pffCont, "OutputTBW=..\Temp\TabATI1_" + files + ".xtb.tbw") ; endif ; // Activités		
		 if tab=6 then  filewrite(pffCont, "OutputTBW=..\Temp\TabATI2_" + files + ".xtb.tbw") ; endif ; // Activités		
		 if tab=7 then  filewrite(pffCont, "OutputTBW=..\Temp\TabATI3_" + files + ".xtb.tbw") ; endif ; // Activités		
		 if tab=8 then  filewrite(pffCont, "OutputTBW=..\Temp\TabATI4_" + files + ".xtb.tbw") ; endif ; // Activités		
		 if tab=9 then  filewrite(pffCont, "OutputTBW=..\Temp\TabATI5_" + files + ".xtb.tbw") ; endif ; // Activités		
		 filewrite(pffCont, "Listing=..\Temp\Entreprise.lst");
		
		fermeT();
		
	else
	 	  errmsg("Pas de données des données Entreprises(%s\E%s.csdb) pour cette ZD",TempDir,Numfile) ;	
	endif;  

end ;	

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


function ControleTDonnees(p,tab)

filedelete(tempDir + "\Controle.pff");        

// Générer le pff
genCtrTPff(p,tab) ; 

// EXECUTER LE PFF 	
    execsystem('"' + csproDir + '\CSTab.exe" "' + tempDir + "\Controle.pff"); 
    
    setdir(ControleFile + "\Tableaux") ;       
    filecopy(tempDir + "\*.xtb.tbw", ControleFile + "\Tableaux");
	 
end;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   
  
PROC MENU_FF
preproc
  setfont(All,"Cambria",30);
  
  // Initialisation des variables globales
  SetGlobalVariables();

  // Définition des dossiers
  RepApp = projectDir + "\Applications";            //!!
  RepDict = RepApp + "\Dicts";                      //!!
  entryDir = RepApp + "\Entry";                     //!!
  dataDir = setDir(projectDir + "\Data");           //!!
  refDir = projectDir + "\Reference";               //!!
  tasksDir = setDir(projectDir + "\Tasks");         //!!
  syncDir = setDir(projectDir + "\Sync");           //!!
  AITDir = RepApp + "\AIT";               //!!
  workDir = setDir(projectDir + "\Work");           //!!
  receiveDir = setDir(projectDir + "\Receive");     //!!
  bcDir = setDir(projectDir + "\Bureau_Central");     //!!
  closedDir = setDir(projectDir + "\Closed");       //!!
  updateSourceDir = setDir(projectDir + "\Update"); //!!
  updateDestDir = projectDir;                       //!!  
  tempDir = setDir(projectDir + "\Temp");
  utilsDir = projectDir + "\Utils";
  repdrop = "C:\Dropbox";                // Répertoire Dropbox
  ControleFile = setDir(repdrop + "\Controle");     //!!
  
  
  encrKey = "X73R5W6FP7CQAY9H";           //!!Clé de cryptage
  backupDir = "DataBackup";               // !! la lettre du lecteur de sauvegarde est automatiquement détectée en fonction de la présence d'un répertoire de sauvegarde
  removableOnly = 1;                     // !! analyses de sauvegarde par défaut uniquement pour les lecteurs amovibles (définie sur 0 pour inclure tous les lecteurs accessibles)
  supervAsInterv = 1;                     // !! le superviseur peut être un intervieweur (mettre à 0 pour empêcher le superviseur d'interviewer)

  debugMode = 0;                         // !! Défini sur 1 pour activer le mode de débogage



  if debugMode then
    enableDebugMode(tempDir + "\debug.txt");
    writeDebugMessage("Demarrage de la session du Chef d'équipe ");
  endif;

  maxZDnum = 99;
  
    if int(publishdate()/1000000) < 20190523 then
	  errmsg("Une ancienne version de l'application a été installée sur votre tablette, Veuillez installer la dernière version svp");
	  stop(1);
  endif;
  
  set behavior() exit on;
  open(AIT_DICT);
// Obtention d'informations utilisateur à partir de l'adresse MAC BT
  btAddress = GetBtAddress();
  
  if !length(btAddress) then
    errmsg(0001);
    exitenvironment();
  else
    UID = btAddress;
    if !loadcase(AIT_DICT, btAddress) then
      InterviewerId = "0";
      InterviewerName = "Inconnu";
      errmsg(0002, btAddress,strip(getbluetoothname()));
      exitenvironment();
      stop(-1);
    else
      InterviewerId = edit("ZZZ9", UNUMBER);
      InterviewerName = UNAME;
      ProvinceID = NUMPROV;
    endif;
  endif;
  
  setTempFolder(tempDir); // Informer l'application du conteneur de notre dossier temporaire
  
  fillTeam(); // remplissage des tableaux d'index d'équipe

  
 // créer une liste de tâches
  createTaskList("AITTasks", refDir + "\AITTempl.xml", tempDir + "\tOutput.tmp");
  
  // Définition du fichier cache pour la synchronisation Bluetooth
  setCache(syncDir + "\cache.sqlite");

  // Tableau de lecture d'état
  loadPreviousValues();

  // réglage des contraintes sur le menu
  setMenuConstraints(40, 0, 0, 0);
  
  // réglage du marqueur de date de synchronisation IFSS réussi
  setLastDateMarker();
    
PROC MENU_QUEST

Preproc

string MDP;
numeric w;


do varying w = 1 until w > 5
	MDP = prompt("Saisissez le Mot de passe:",password);
	if toupper(MDP) = "RGERDC"+edit("999",tonumber(InterviewerId))  then
		Break;	
	elseif toupper(MDP)<>"RGERDC"+edit("999",tonumber(InterviewerId))  then
			errmsg("Le mot de passe saisi est incorrect");
			if w = 5 then
				execsystem("C:\RDCRGE\Utils\SDD.bat", normal, wait);
				stop(1);
			endif;
	endif;
enddo

PROC MPROVIN

preproc
  if state(5) <> 0 then
		MPROVIN = state(1); rech_province();
		MVILLE  = state(2); rech_ville_nom();
		MSEC    = state(3); rech_com_sec();
		MQTIER  = state(4); rech_Qtier_nom();
		MCLUST  = state(5);
		
     advance tO MCLUST ;
  endif;
  

onfocus
  if special(visualvalue($)) & state(1) <> 0 then
    $ = state(1);
  endif;
  
rech_province();

setvalueset(@getsymbol(),code,label);
setcapturetype($,1);

postproc
rech_province_nom();
PROC MVILLE

 


onfocus
  if special(visualvalue($)) & state(2) <> 0 then
    $ = state(2);
  endif;
rech_ville();

setvalueset(@getsymbol(),code,label);
setcapturetype($,1);


postproc
rech_ville_nom();
PROC MSEC


onfocus
  if special(visualvalue($)) & state(3) <> 0 then
    $ = state(3);
  endif;
rech_sec();

setvalueset(@getsymbol(),code,label);
setcapturetype($,1);

postproc
rech_com_sec();
PROC MQTIER



onfocus
  if special(visualvalue($)) & state(4) <> 0 then
    $ = state(4);
  endif;
rech_Qtier();

setvalueset(@getsymbol(),code,label);
setcapturetype($,1);


postproc
rech_Qtier_nom();
PROC MCLUST  

onfocus
  if special(visualvalue($)) & state(5) <> 0 then
    $ = state(5);
  endif;
  
rech_ZD() ;

setvalueset(@getsymbol(),code,label);
setcapturetype($,1);

postproc  

// Vérification de l'ouverture du la ZD
  ResumeTaskFile = maketext("%s\PROVINCE%02D_ZDResume.dat", tasksDir, MPROVIN);
  reviewDataTaskFile = maketext("%s\PROVINCE%02D_ZDRevue.dat", tasksDir, MPROVIN);
  docTaskFile = maketext("%s\Docummentation.dat", tasksDir);
  
  numeric x, i, on;
  string optionsStr;
 
  // Définition des contraintes de menu
  setMenuConstraints(40, -1, -1, -1);
  
   // Construire des options de menu // !!
  clearMenu();
  addMenuOption("1:Données des Entreprises");  
  addMenuOption(".10:Entreprises de la Province de " + strip(MPROVINN));
	  if MPROVIN <> 1 then
	  addMenuOption(".11:Entreprises de la Ville/du Territoire de " + strip(MVILLEN));
	  endif;
	  addMenuOption(".12:Entreprises du Secteur/de la Commune de " + strip(MSECN));
	  addMenuOption(".13:Entreprises du Quartier " + strip(MQTIERN));
	  addMenuOption(".14:Entreprises de la ZD n°" + edit("999",MCLUST));                                                    //!T
  
  if syncCentralRequired() then
    addMenuOption("2:textcolor=Red;;;Synchroniser avec le bureau central*");      //!T
  else
    addMenuOption("2:textcolor=LightGray;;;Synchroniser avec le bureau central"); //!T
  endif;  
  
  addMenuOption("3:textcolor=green;;;Geolocalisation des Entreprises"); 
	  addMenuOption(".30:Entreprises de la Province de " + strip(MPROVINN));
	  if MPROVIN <> 1 then
	  addMenuOption(".31:Entreprises de la Ville/du Territoire de " + strip(MVILLEN));
	  endif;
	  addMenuOption(".32:Entreprises du Secteur/de la Commune de " + strip(MSECN));
	  addMenuOption(".33:Entreprises du Quartier " + strip(MQTIERN));
	  addMenuOption(".34:Entreprises de la ZD n°" + edit("999",MCLUST));
	
  addMenuOption("4:Contrôle des données");
  	addMenuOption(".40:Données de la Province de " + strip(MPROVINN));
	  	addMenuOption("..400:Listing des erreurs");
	  	addMenuOption("..401:Verifications des activités");
	  	addMenuOption("..402:Tableaux");
		    addMenuOption("...4020:Tableaux généraux ");
		    addMenuOption("...4021:Tableaux activités principales ");
		    addMenuOption("...4022:Tableaux activités secondaires 1 ");
		    addMenuOption("...4023:Tableaux activités secondaires 2 "); 
		    addMenuOption("...4024:Tableaux ATI 1"); 
		    addMenuOption("...4025:Tableaux ATI 2"); 
		    addMenuOption("...4026:Tableaux ATI 3"); 
		    addMenuOption("...4027:Tableaux ATI 4"); 
		    addMenuOption("...4028:Tableaux ATI 5"); 
	    addMenuOption("..403:Voir les Notes");
	if MPROVIN <> 1 then	  
    addMenuOption(".41:Données de la Ville/du Territoire de " + strip(MVILLEN));
    	addMenuOption("..410:Listing des erreurs");
	  	addMenuOption("..411:Verifications des activités");
	  	addMenuOption("..412:Tableaux");
		    addMenuOption("...4120:Tableaux généraux ");
		    addMenuOption("...4121:Tableaux activités principales ");
		    addMenuOption("...4122:Tableaux activités secondaires 1 ");
		    addMenuOption("...4123:Tableaux activités secondaires 2 "); 
		    addMenuOption("...4124:Tableaux ATI 1"); 
		    addMenuOption("...4125:Tableaux ATI 2"); 
		    addMenuOption("...4126:Tableaux ATI 3"); 
		    addMenuOption("...4127:Tableaux ATI 4"); 
		    addMenuOption("...4128:Tableaux ATI 5"); 
	    addMenuOption("..413:Voir les Notes");
	endif;
    addMenuOption(".42:Données du Secteur/de la Commune de " + strip(MSECN));
    	addMenuOption("..420:Listing des erreurs");
	  	addMenuOption("..421:Verifications des activités");
	  	addMenuOption("..422:Tableaux");
		    addMenuOption("...4220:Tableaux généraux ");
		    addMenuOption("...4221:Tableaux activités principales ");
		    addMenuOption("...4222:Tableaux activités secondaires 1 ");
		    addMenuOption("...4223:Tableaux activités secondaires 2 ");
		    addMenuOption("...4224:Tableaux ATI 1"); 
		    addMenuOption("...4225:Tableaux ATI 2"); 
		    addMenuOption("...4226:Tableaux ATI 3"); 
		    addMenuOption("...4227:Tableaux ATI 4"); 
		    addMenuOption("...4228:Tableaux ATI 5"); 		     	  
	    addMenuOption("..423:Voir les Notes"); 
    addMenuOption(".43:Données du Quartier " + strip(MQTIERN));
    	addMenuOption("..430:Listing des erreurs");
	  	addMenuOption("..431:Verifications des activités");
	  	addMenuOption("..432:Tableaux");
		    addMenuOption("...4320:Tableaux généraux ");
		    addMenuOption("...4321:Tableaux activités principales ");
		    addMenuOption("...4322:Tableaux activités secondaires 1 ");
		    addMenuOption("...4323:Tableaux activités secondaires 2 "); 
		    addMenuOption("...4324:Tableaux ATI 1"); 
		    addMenuOption("...4325:Tableaux ATI 2"); 
		    addMenuOption("...4326:Tableaux ATI 3"); 
		    addMenuOption("...4327:Tableaux ATI 4"); 
		    addMenuOption("...4328:Tableaux ATI 5"); 		     	 
	    addMenuOption("..433:Voir les Notes");
	addMenuOption(".44:Données de la ZD n°" + edit("999",MCLUST));
    	addMenuOption("..440:Listing des erreurs");
	  	addMenuOption("..441:Verifications des activités");
	  	addMenuOption("..442:Tableaux");
		    addMenuOption("...4420:Tableaux généraux (CE)");
		    addMenuOption("...4421:Tableaux activités principales (CE) ");
		    addMenuOption("...4422:Tableaux activités secondaires 1 (CE) ");
		    addMenuOption("...4423:Tableaux activités secondaires 2 (CE) ");  
		    addMenuOption("...4424:Tableaux ATI 1"); 
		    addMenuOption("...4425:Tableaux ATI 2"); 
		    addMenuOption("...4426:Tableaux ATI 3"); 
		    addMenuOption("...4427:Tableaux ATI 4"); 
		    addMenuOption("...4428:Tableaux ATI 5"); 		     	    
	    addMenuOption("..443:Voir les Notes"); 

  
   //!T
  addMenuOption("5:Autres options"); //!T
  
  string SD = "ABCDEFGHIJKLMNOPQRTSUVWXY",   USBdir, USBbackupDir  ;
  numeric p = 1 , Tu= 0, cle = 0  ;
  do varying p=1 until p>=25	 
    	if fileexist(SD[p:1] + ":\SavRGE\SupUSB.txt") then   
				cle = 1;				
	   endif ;
  enddo;
  
  if cle = 0 then
  		addMenuOption(".51:textcolor=LightGray;;;Cléf USB");
  else
  		addMenuOption(".51:Cléf USB");
  endif;
  addMenuOption("6:textcolor=#467386;;;Quitter");                                 //!T
  
	    
  //reloading current interviwer
  UID = btAddress;
  loadcase(AIT_DICT, btAddress);

  //saving cluster number to state array at index '1'
  
	state(1) = MPROVIN;
	state(2) = MVILLE;
	state(3) = MSEC;
	state(4) = MQTIER;  
	state(5) = MCLUST;
	
  savePreviousValues();
  
  	DataCopy();
  //showing menu 
  while 1 do
     Document();
    x = showMenu("Choisir une option"); //

	if x = 10 then genResume(0);;//Controle des données	
	updateReviewTasks(0);
	    while 1 do    
	       numeric x1 = showTasks();
	       if x1 = 0 then break; endif;
	       taskrouter(0,x1);
	       //backupTasks();
	    enddo;
	elseif x = 11 then genResume(1);//Controle des données
	updateReviewTasks(1);
	    while 1 do    
	       numeric x1 = showTasks();
	       if x1 = 0 then break; endif;
	       taskrouter(1,x1);
	       //backupTasks();
	    enddo;
	elseif x = 12 then genResume(2);//Controle des données
	updateReviewTasks(2);
	    while 1 do    
	       numeric x1 = showTasks();
	       if x1 = 0 then break; endif;
	       taskrouter(2,x1);
	       //backupTasks();
	    enddo;
	elseif x = 13 then genResume(3);//Controle des données
	updateReviewTasks(3);
	    while 1 do    
	       numeric x1 = showTasks();
	       if x1 = 0 then break; endif;
	       taskrouter(3,x1);
	       //backupTasks();
	    enddo;
	elseif x =14 then genResume(4);//Controle des données
	updateReviewTasks(4);
	    while 1 do    
	       numeric x1 = showTasks();
	       if x1 = 0 then break; endif;
	       taskrouter(4,x1);
	       //backupTasks();
	    enddo;
	
	elseif x = 2 then //synchronizing with central office
	     Sauve(); syncCentral();
	elseif  x = 9999 then //picking another cluster
	      reenter;
	elseif x = 30 then // executer le kml de la grappe	 
		i = errmsg("Voulez-vous afficher les entreprises de la Province(%s) ?",strip(MPROVINN))select("Oui",continue,"Non",continue);
	   if i =1 then VisCarteAD(0) endif;
	elseif x = 31 then // executer le kml de la grappe	 
		i = errmsg("Voulez-vous afficher les entreprises de la Ville/du territoire(%s) ?",strip(MVILLEN))select("Oui",continue,"Non",continue);
	    if i =1 then VisCarteAD(1) endif;
	elseif x = 32 then // executer le kml de la grappe	 
		i = errmsg("Voulez-vous afficher les entreprises de la Commune/du secteur(%s) ?",strip(MSECN))select("Oui",continue,"Non",continue);
	   if i =1 then VisCarteAD(2) endif;
    elseif x = 33 then // executer le kml de la grappe	 
		i = errmsg("Voulez-vous afficher les entreprises du Quartier(%s) ?",strip(MQTIERN))select("Oui",continue,"Non",continue);
	   if i =1 then VisCarteAD(3) endif;
	elseif x = 34 then // executer le kml de la grappe	 
		i = errmsg("Voulez-vous afficher les entreprises de la ZD n°%d ?",MCLUST)select("Oui",continue,"Non",continue);
	   if i =1 then VisCarteAD(4) endif;
	
	elseif x = 400 then ControleDonnees(0);//Controle des données	
	elseif x = 410 then ControleDonnees(1);//Controle des données
	elseif x = 420 then ControleDonnees(2);//Controle des données
	elseif x = 430 then ControleDonnees(3);//Controle des données
	elseif x = 440 then ControleDonnees(4);//Controle des données
		
	elseif x = 401 then ControleActivite(0);//Controle des activités
	elseif x = 411 then ControleActivite(1);//Controle des activités
	elseif x = 421 then ControleActivite(2);//Controle des activités
	elseif x = 431 then ControleActivite(3);//Controle des activités
	elseif x = 441 then ControleActivite(4);//Controle des activités
	
	elseif x = 4020 then ControleTDonnees(0,1) //Voir les tableaux
	elseif x = 4120 then ControleTDonnees(1,1) //Voir les tableaux
	elseif x = 4220 then ControleTDonnees(2,1) //Voir les tableaux
	elseif x = 4320 then ControleTDonnees(3,1) //Voir les tableaux
	elseif x = 4420 then ControleTDonnees(4,1) //Voir les tableaux
	
	elseif x = 4021 then ControleTDonnees(0,2) ;//Voir les tableaux activités princapales
	elseif x = 4121 then ControleTDonnees(1,2) ;//Voir les tableaux activités princapales
	elseif x = 4221 then ControleTDonnees(2,2) ;//Voir les tableaux activités princapales
	elseif x = 4321 then ControleTDonnees(3,2) ;//Voir les tableaux activités princapales
	elseif x = 4421 then ControleTDonnees(4,2) ;//Voir les tableaux activités princapales
	
	elseif x = 4022 then ControleTDonnees(0,3) ;//Voir les tableaux activités secondaires 1
	elseif x = 4122 then ControleTDonnees(1,3) ;//Voir les tableaux activités secondaires 1
	elseif x = 4222 then ControleTDonnees(2,3) ;//Voir les tableaux activités secondaires 1
	elseif x = 4322 then ControleTDonnees(3,3) ;//Voir les tableaux activités secondaires 1
	elseif x = 4422 then ControleTDonnees(4,3) ;//Voir les tableaux activités secondaires 1
	
	elseif x = 4023 then ControleTDonnees(0,4) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4123 then ControleTDonnees(1,4) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4223 then ControleTDonnees(2,4) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4323 then ControleTDonnees(3,4) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4423 then ControleTDonnees(4,4) ;  //Voir les tableaux activités secondaires 2
	
	elseif x = 4024 then ControleTDonnees(0,5) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4124 then ControleTDonnees(1,5) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4224 then ControleTDonnees(2,5) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4324 then ControleTDonnees(3,5) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4424 then ControleTDonnees(4,5) ;  //Voir les tableaux activités secondaires 2
	
	elseif x = 4025 then ControleTDonnees(0,6) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4125 then ControleTDonnees(1,6) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4225 then ControleTDonnees(2,6) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4325 then ControleTDonnees(3,6) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4425 then ControleTDonnees(4,6) ;  //Voir les tableaux activités secondaires 2
	
	elseif x = 4026 then ControleTDonnees(0,7) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4126 then ControleTDonnees(1,7) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4226 then ControleTDonnees(2,7) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4326 then ControleTDonnees(3,7) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4426 then ControleTDonnees(4,7) ;  //Voir les tableaux activités secondaires 2
	
	elseif x = 4027 then ControleTDonnees(0,8) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4127 then ControleTDonnees(1,8) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4227 then ControleTDonnees(2,8) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4327 then ControleTDonnees(3,8) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4427 then ControleTDonnees(4,8) ;  //Voir les tableaux activités secondaires 2
	
	elseif x = 4028 then ControleTDonnees(0,9) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4128 then ControleTDonnees(1,9) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4228 then ControleTDonnees(2,9) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4328 then ControleTDonnees(3,9) ;  //Voir les tableaux activités secondaires 2
	elseif x = 4428 then ControleTDonnees(4,9) ;  //Voir les tableaux activités secondaires 2
	
	elseif x = 403 then  ControleNote(0); //Voir les notes
	elseif x = 413 then  ControleNote(1); //Voir les notes
	elseif x = 423 then  ControleNote(2); //Voir les notes
	elseif x = 433 then  ControleNote(3); //Voir les notes
	elseif x = 443 then  ControleNote(4); //Voir les notes
	
	elseif x = 6 then //exit
	      exitenvironment();
	      stop(-1);
	elseif x = 51 then //Autres options    
	      USBcopy();
	endif;
  enddo;

