//Global variables
string workDrive, projectDir, projectName, csproDir;
numeric projectStartYear, projectEndYear;

//!!Sets gloabl project variables
function SetGlobalVariables()
  //!!Project drive letter
  workDrive = "c:";
  //!!Project root folder
  projectDir = workDrive + "\RDCRGE";
  //!!Default CSPro folder
  csproDir = pathname(CSPro);
  csproDir = csproDir[1:length(csproDir) - 1]; //trimming "\" off the end of the path
  
  //!!Project start year
  projectStartYear = 2019;
  //!!Project end year
  projectEndYear = projectStartYear;
  
  string projectYear = edit("ZZZ9", projectStartYear);
  if projectEndYear <> projectStartYear then
    projectYear = projectYear + "-" + edit("ZZZ9", projectEndYear);
  endif;
  
  //!!Project name
  projectName = "RDC RGE " + projectYear;
end;

function string GetGuid()
  string guid = uuid();
  string res;
  numeric i;
  do i = 1 while i <= length(guid) by 1
    if guid[i:1] <> "-" then
	  res = res + guid[i:1];
	endif;
  enddo;
  
  GetGuid = ToUpper(res);
end;

string line;
array string spl(100);     {split function populates this array with split values}
{splits a string into an array of strings based on the delimiter character}
function split(string input, alpha(1) splitChar)
  numeric splNum = 1;
  numeric p = pos(splitChar, input);
  while p do
    spl(splNum) = input[1:p - 1];
    line = input[p + 1:length(strip(input)) - p];
    input = line;
    splNum = splNum + 1;
    p = pos(splitChar, input);
  enddo;
  spl(splNum) = strip(input);
    
  split = splNum;
end;

///"Hash" table that can hold 1000 strings
array string hashTable(999, 2);

function string getHashValue(string name)
  numeric i;
  string res = "";
  do i = 0 while i <= 999 by 1
    if length(hashTable(i, 1)) > 0 then
      if toupper(name) = hashTable(i, 1) then
	    res = hashTable(i, 2);
	    break;
	  endif;
	endif;
  enddo;
  getHashValue = res;
end;

function getHashIndex(string name)
  numeric i, res = -1;
  do i = 0 while i <= 999 by 1
    if length(hashTable(i, 1)) > 0 then
      if toupper(name) = hashTable(i, 1) then
	    res = i;
	    break;
	  endif;
	endif;
  enddo;
  getHashIndex = res;
end;

function getEmptyIndex()
  numeric i, res = -1;
  
  do i = 0 while i <= 999 by 1
    if length(hashTable(i, 1)) = 0 then
	  res = i;
	  break;
	endif;
  enddo;
  
  getEmptyIndex = res;
end;

//returns index in the hash array for this name
function setHashValue(string name, string value)
  numeric idx = getHashIndex(name);
  if idx >= 0 then
    hashTable(idx, 2) = value;
  else
    idx = getEmptyIndex();
	hashTable(idx, 1) = toupper(name);
	hashTable(idx, 2) = value;
  endif;
  setHashValue = idx;
end;

///PFF constructions functions
file pffTemp;
array pffFlags(10); //10 internal flags used in PFF construction


function resetFlags()
  numeric i;
  do i = 0 while i <= 10 by 1
    pffFlags(i) = 0;
  enddo;
end;

//opening pff file handle and writing out PFF header. appType (1 = entry, 2 = batch, 3 = sort)
function openPffFile(string fName, appType)
  close(pffTemp);
  filedelete(fName);
  setFile(pffTemp, fName, create);

  open(pffTemp);
  filewrite(pffTemp, "[Run Information]");
  filewrite(pffTemp, "Version=CSPro 7.2");
  if appType = 1 then
    filewrite(pffTemp, "AppType=Entry");
  elseif appType = 2 then
    filewrite(pffTemp, "AppType=Batch");
  elseif appType = 3 then
    filewrite(pffTemp, "AppType=Sort");
  endif;
  
  resetFlags();
  pffFlags(0) = 1;
end;

//writing out PFF footer and closing the pff file handle
function closePffFile(showReport, string parameter)
  if !pffFlags(0) then
    exit;
  endif;

  filewrite(pffTemp, "[Parameters]");
  if length(strip(parameter)) > 0 then
    filewrite(pffTemp, concat("Parameter=", strip(parameter)));
  endif;
  if showReport then
    filewrite(pffTemp, "ViewListing=Always");
    filewrite(pffTemp, "ViewResults=Yes");
  else
    filewrite(pffTemp, "ViewListing=Never");
    filewrite(pffTemp, "ViewResults=No");
      endif;
  filewrite(pffTemp, "ListingWidth=80");
  filewrite(pffTemp, "MessageWrap=No");
  filewrite(pffTemp, "ErrmsgOverride=No");

  close(pffTemp);
  
  resetFlags();
end;

function writePff_DataEntryInit(string operatorId, string lock, string startMode, fullScreen, noFileOpen)
  if !pffFlags(0) then
    exit;
  endif;
  
  filewrite(pffTemp, "[DataEntryInit]");
  filewrite(pffTemp, "OperatorID=" + operatorId);
  if length(startMode) then
    filewrite(pffTemp, "StartMode=" + startMode);
  endif;
  filewrite(pffTemp, "Lock=" + lock);  
  if fullScreen then
    filewrite(pffTemp, "Fullscreen=Nomenus");
  else
    filewrite(pffTemp, "Fullscreen=No");
  endif;
  if noFileOpen then
    filewrite(pffTemp, "NoFileOpen=Yes");
  else
    filewrite(pffTemp, "NoFileOpen=No");
  endif;
end;

function writePff_InputFiles(string application, string inputFile, string lstFile, string wrtFile)
  if !pffFlags(0) then
    exit;
  endif;
  
  filewrite(pffTemp, "[Files]");
  filewrite(pffTemp, "Application=" + application);
  filewrite(pffTemp, "InputData=" + inputFile);
  filewrite(pffTemp, "Listing=" + lstFile);
  if length(wrtFile) then
    filewrite(pffTemp, "WriteData=" + wrtFile);
  endif;
end;

{function writePff_ExternalFile(string dictName, string path)
  if !pffFlags(0) then
    exit;
  endif;
  
  if !pffFlags(1) then
    pffFlags(1) = 1;
	filewrite(pffTemp, "[ExternalFiles]");
  endif;
  
  filewrite(pffTemp, dictName + "=" + path);
end;

function writePff_UserFile(string fName, string path)
  if !pffFlags(0) then
    exit;
  endif;
  
  if !pffFlags(2) then
    pffFlags(2) = 1;
	filewrite(pffTemp, "[UserFiles]");
  endif;
  
  filewrite(pffTemp, fName + "=" + path);
end;}


function runBatch(string pffFile)
  execsystem('"' + csproDir + '\csbatch.exe" "' + pffFile + '"', normal, wait);
end;

function runEntry(string pffFile)
  execsystem('"' + csproDir + '\csentry.exe" "' + pffFile + '"', normal, wait);
end;

function string trimQuotes(string input)
  trimQuotes = input[2:length(input) - 2];
end;

file transferLogFile;
function readtransferLog(string logFile)
  numeric res = 0;
  
  if fileexist(logFile) then
    setFile(transferLogFile, logFile);
	open(transferLogFile);
	string s;
	if fileread(transferLogFile, s) then
	  res = tonumber(s[1:4]);
	endif;
	close(transferLogFile);
  endif;
  
  readtransferLog = res;
end;

{Function to extract century day code from a date}
function cdcode(day, month, year)
  {year days}
  numeric a_res = year - 1901;
  a_res = a_res * 365 + int(a_res / 4);

  {months days}
  numeric a_xx = 0;
  numeric a_leap = (year / 4 = int(year / 4));
  numeric a_i;
  do a_i = 1 while a_i < month by 1
    box a_i              => a_xx;
        1,3,5,7,8,10,12  => a_xx + 31;
        4,6,9,11         => a_xx + 30;
        2                => a_xx + 28 + a_leap;
    endbox;
  enddo;
  a_res = a_res + a_xx;

  {days}
  cdcode = a_res + day;
end;