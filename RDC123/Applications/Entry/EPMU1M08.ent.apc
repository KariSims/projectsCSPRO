{Application 'SECURITE' logic file generated by CSPro}
PROC GLOBAL

set explicit;
{ Definitions of working variables }
array alpha(8) KishGrid(10);	   { Grid used for selection of child for child discipline module }
alpha(26) alphavar;				   { Alpha working variable used in checking alpha vars }
alpha(26) alphanew;                { Alpha working variable used in checking alpha vars }
alpha(62) alphalst;                { The alphabet }
array codes(50);                   { Array used for creating line numbers of household members sleeping under mosquito net}
array alpha(50) labels(50) ;
array  lien(50);


        { Array used for creating names of household members sleeping under mosquito net}
alpha(40) yname, ynamehh, tmpname; { List of names for questions }
alpha(900) strnotes;               { for editnote at the end of the interview }
alpha(40) worklabel;               { Alpha variable to get customize text for questions }

numeric   hhn,xintnum,xsupnum,xmodcent ;


numeric TOTPRIM,maxmain,MOMIN,MOMAX  maxdep;
numeric addmode i cln  hhnum x j ;
string strpart dmois trentedrnjours article;
file FichSaPart ;


// sauvegarde des données


Function sav()
	savepartial();
end;


// Quitter


Function quitter()
	savepartial();
	stop(1) ;
end;

{ User defined functions }


function showCalc()
	execsystem("calc");
end;

  { setup basic user bar }


function userbase();
	userbar( clear );


	userbar(add text,"ECVM.:MOD.8:");
	userbar(set color,236,254,255);

	userbar( add button, "<",    do("PreviousField") );
	userbar( add button, ">",    do("NextField") );
	userbar( add button, ">>|",  do("AdvanceToEnd") );
	userbar( add button, "Note", do("EditNote") );
	userbar( add button, "Lang", do("ChangeLanguage") );
	userbar( add button, "Calc", showCalc );

	 userbar(add spacing,25);
	userbar(add button,"Sauvegarde", sav());
	userbar(add spacing,25);
	userbar(add text," ");

	userbar(add button,"Quitter", quitter());
	userbar(add spacing,25);
	userbar(add text," ");
end;

{ --------------------------------------------------------------------------- }
{ valid
  Checks that a variable has a valid value.
  A valid value is less than 96 and not a special value e.g notappl/missing
  Returns: 1 if valid, 0 if not valid                                        }


function valid(xvar);
	valid = (!special(xvar) and xvar < 96)
end;

{ -------------------------------------------------------------------------- }
{ NAtoZero
  Converts notappl (and 99 - for child labour module) values to zero while not changing other values.
  Returns: 0 if input variable is notappl, else returns it unchanged         }


function NAtoZero(xvar);
	if xvar = notappl or xvar=99 then
		xvar = 0
	endif;
	NAtoZero = xvar;
end;


{ clear_labels
Set value labels for certain questions where the response categories can change }


function clear_labels();
	do i = 1 while i <= 50
		codes(i) = notappl;
		labels(i) = "";
	enddo;
end;

//Setting a variable value for the currently loaded task


function setTaskVar(string varName, string varValue)
	//first checking if the variable is already set
	for i in TASKS.TASK_VARIABLES do
		if toupper(strip(varName)) = toupper(strip(TASK_VARNAME(i))) then
			TASK_VARVAL(i) = varValue;
			exit;
		endif;
	enddo;

	//adding a new variable if in case it hasn't been set alerady
	i = 0;
	while i <= maxocc(TASKS.TASK_VARIABLES) do
		i = i + 1;
		if length(strip(TASK_VARNAME(i))) = 0 then
			TASK_VARNAME(i) = strip(varName);
			TASK_VARVAL(i) = strip(varValue);
			break;
		endif;
	enddo;
end;

  //Getting the variable value using varibale name for the currently loaded task


function string getTaskVar(string varName)
	do i = 1 while i <= maxocc(TASKS.TASK_VARIABLES)
		if length(strip(TASK_VARNAME(i))) = 0 then
			break;
		endif;
		if toupper(strip(varName)) = toupper(strip(TASK_VARNAME(i))) then
			getTaskVar = strip(TASK_VARVAL(i));
			break;
		endif;
	enddo;
end;



function endmess();
	{ Returns true if response is REVIEW }
	endmess = ({addmode and}
			   accept("Fin du questionnaire",
					   "Vérifier du questionnaire",
					   "Nouvelle quête./Questionnaire après")
					   <> 2);
end;
{FR}


function alphachk(alpha(26) alphamask);
	{  russian_convert();}
	  { first remove all blanks, and duplicate question marks }
	  alphanew = "";
	 numeric  qmark = 0;
	 numeric  lx = 1  l  a ;
	do l = 1 while l <= length(strip(alphavar))
		if alphavar[l:1] <> " " and (alphavar[l:1] <> "?" or not qmark) then
			alphanew[lx:1] = alphavar[l:1];
			lx = lx + 1;
			if alphavar[l:1] = "?" then
				qmark = 1;
			endif;
		endif;
	enddo;
	{ aok = 0 - string is bad, aok = 1 - string is good }
	numeric   totlen = length(strip(alphamask));
	 numeric  aok = 0;           { assume string is bad - for empty string }
	 numeric alphsize = length(strip(alphanew));
	if alphsize then   { not empty string }
		{ check for "?" as only character }
		aok = (alphanew[1:1] = "?" and alphsize = 1);
		if !aok then     { if not a single "?", check string }
			aok = 1;       { now assume string is good until we know otherwise }
			l = 1;         { l is position in string of acceptable values }
			a = 1;         { a is position in input string }
			{ loop while the string is still good and there are more letters }
			while aok and a <= alphsize do
				aok = pos(alphanew[a:1],alphamask[l:totlen-l+1]);
				if aok then     { letter is acceptable }
					l = l + aok;  { increment l to position after letter in string of acceptable values }
					a = a + 1     { increment a to next letter in input string }
				endif;
			enddo;
		endif;
	endif;
	alphachk = (!aok);    { alphachk = 0 - if string is good, = 1 - if string is bad }
	{ now expand variables }
	if aok then
		do l = 1 while l <= length(strip(alphamask))
			if pos(alphamask[l:1],alphanew) then
				alphavar[l:1] = alphamask[l:1]
			elseif pos("?",alphanew) then
				alphavar[l:1] = "?"
			else
				alphavar[l:1] = " "
			endif;
		enddo;
	endif;
end;

{ function to clear codes and labels for household members }


function clean_labels();
	do i = 1 while i <= 30 by 1
		codes(i)  = notappl;
		labels(i) = "";
	enddo;
end;

//!!AI start


function onStop();
	savepartial();
	stop(-1);
end;
//!!AI end






//PROC SEC06
//savepartial() ;
//PROC SEC07

//if $ = 2 then
 //  skip to SEC08
//endif;
//PROC SEC08

//if $ = 2 then
//   skip to SEC01
//endif;


PROC MOD08_FF


preproc

	//Initializing global variables
	SetGlobalVariables();
	tempDir = projectDir + "\Temp";
	utilsDir = projectDir + "\Utils";

	setfont(All,"Cambria",30);

	 setvaluesets("_FRA");  //to set valuesets in French


	//reading the task
	TASK_ID = trimQuotes(readEnviValue("taskId"));
	loadcase(TASKS, TASK_ID);

	//if task is water quality questionnaire task, loading parent household task
	if strip(TASK_TEMPLATENAME) <> "hh_int" & length(strip(TASK_PARENTID)) > 0 then
		TASK_ID = TASK_PARENTID;
		loadcase(TASKS, TASK_ID);
	endif;



	hhnum  = 0;       { last household number used }



	cln=tonumber(sysparm()[1:3]);
	hhn=tonumber(sysparm()[4:2]);
	xintnum  = tonumber( sysparm()[9:3] );
	xsupnum  = tonumber( sysparm()[12:3] );


	alphalst = "ABCDEFGHIJKLMNOPQRSTUVWXYZÃÇÅÄÁÆÈÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÝÞßáãäåæíÉìÂ";


	{ settings for CAPI }

	set attributes (EPMU1M08) assisted on;
	set attributes (EPMU1M08) assisted off (variable (title));

	{ set up minimal user bar }
	userbase();
	userbar( show );


postproc

	{ update file with households assigned to interviewers }
	 //if !xmodcent then
	 //  updthhassgn();
	 //endif;
	if !xmodcent then      { central office desn't have to exit after reviewing one HH }
		stop(-1);
	endif;


PROC M08

preproc

	if demode() = add then addmode = 1 endif;
	if demode() = modify then addmode = 2 endif;
	if demode() = verify then addmode = 3 endif;

	if ispartial() then
		advance to getsymbol(savepartial);
	endif;


Postproc

	endlevel


PROC M081

preproc

	if special(visualvalue($)) then
		$ = cln;
	endif;

postproc

	YCLUSTER = $;
	if loadcase( CLUSTERS, YCLUSTER ) then
		M087 = YURBRUR;
		M088 = YREGION;
	endif;


PROC M082

preproc

	if hhn <> 0 & (special(visualvalue($)) | visualvalue($) = hhn) then
		$ = hhn;
	endif;

postproc

	set attributes(M08NAME) native;
	if addmode then
		M08NAME = getTaskVar("hhead");
		M08ADDR = getTaskVar("address");
	else
		if length(strip(M08NAME)) then
			set attributes (M08NAME) protect;
			set attributes (M08ADDR) protect;
		else
			M08NAME = getTaskVar("hhead");
			M08ADDR = getTaskVar("address");
		endif;
	endif;


PROC M08INT

preproc

	if addmode  | special(visualvalue($)) then
		M08INT = xintnum;
		M083 = 0;
		M08HINT = xsupnum;
	endif;


PROC M087


preproc

	if addmode  | special(visualvalue($)) then
		M087 = 1;
	endif;


PROC M088

preproc

	M088 = 10 ;


PROC M08NAME

preproc

	if !addmode then
		exit;
	endif;


PROC M08ADDR

preproc

	if addmode  then
		exit;
	endif;


PROC M0811


postproc

	if $ <> 1 then
		skip to M0817
	endif;


PROC M086J

preproc

	if demode() = add then
		if special(visualvalue($)) then
			x = sysdate();
			if M086J = notappl then M086J = sysdate( "DD" );endif;
			if M086M = notappl then M086M = sysdate( "MM" );endif;
			if M086A = notappl then M086A = sysdate( "YYYY" );endif;
		endif;
	endif;

postproc

	numeric xdate;
	xdate = (((visualvalue(M086A)*100)+visualvalue(M086M))*100)+ M086J;
	if xdate > sysdate("YYYYMMDD") then
		errmsg("la date saisie est supérieure à la date du jour ,veuillez régler la date de la tablette");
		stop(1) ;
	endif;


PROC M086M

	dmois = getlabel($,$);


PROC M089H

preproc

	if demode() = add then
		if special(visualvalue($)) then
			x = systime();
			if M089H = notappl then M089H = int(x / 10000);endif;
			if M089M = notappl then M089M = int(x / 100) % 100;endif;
		endif;
	endif;


PROC SECURITE_FORM

preproc

	// Trante dernier jours
	numeric xlastdate ;

	xlastdate = dateadd( ( ((M086A * 100) + M086M) * 100) + M086J  ,-31);
	string sldat =edit("99999999",xlastdate) ;

	Trentedrnjours = concat( sldat[7:2] ," ", getlabel( M086M,tonumber(sldat[5:2])) , " ", sldat[1:4] ) ;


PROC SEC0A

preproc

	sav();
		 numeric k, trv = 0  rec  ;
		 clear_labels();
		 i=1;

Onfocus

	setfile( FichSaPart, concat( projectDir + "\Data\H",edit("999",M081), edit("999",M08INT), ".csdb")) ;
	if Filesize( FichSaPart ) > 0 then
		while FileRead( FichSaPart, strpart ) do
		  For z in 
			if HH2 = M082 and M08(z) >= 10 then

				codes(i) = tonumber(strpart[14:2]);
				labels(i)= strip (strpart[16:40]);
			
				i=i+1;

			endif ;
		enddo;
	endif ;
		 close( FichSaPart );

			//
	if i = 0 then
		errmsg("Aucun Membre de Ménage");
		//Reenter SEC0A ;
	endif;



	setvalueset(@getsymbol(),codes,labels);
	setcapturetype(SEC0A,3);




Postproc

	Do varying j = 0 until j >= i
		if codes(j) = SEC0A then
			SEC0B = labels(j);
		endif;
	enddo;
	savepartial();
	sav();


PROC SEC0B

	sav();

	// Trente dernier jour


PROC SEC01


	sav();


PROC LPR


preproc

	sav();
		 numeric k, trv = 0  rec  ;
		 clear_labels();
numeric liens;
	setfile( FichSaPart, concat(projectDir + "\Data\H",edit("999",M081), edit("999",M08INT), ".csdb")) ;
	if Filesize( FichSaPart ) > 0 then
			while FileRead( FichSaPart, strpart ) do

			if strpart[11:3] = "0HL" and tonumber(strpart[4:2]) = M082 and tonumber( strpart[70:2]) >= 10 and SEC0A= tonumber(strpart[14:2]) then
				lien(curocc())= tonumber(strpart[56:2]);
				liens=lien(curocc());
                LPR=liens;
			endif ;
			enddo;
	endif ;
		 close( FichSaPart );

	{if i = 0 then
		errmsg("Aucun Membre de Ménage");
		//Reenter SEC0A ;
	endif;



	setvalueset(@getsymbol(),codes,labels);
	setcapturetype(SEC0A,3);




Postproc

	Do varying j = 0 until j >= i
		if codes(j) = SEC0A then
			SEC0B = labels(j);
		endif;
	enddo;
	savepartial();
	sav();




errmsg("lien=%d",lien(curocc()));
errmsg("lien menage=%d",tonumber(strpart[56:2]));
errmsg("liens=%d",liens);

}
PROC LLPR
preproc
LLPR=strip(getlabel(LPR_VS1,LPR));
PROC SEC02

	sav();


PROC SEC03

	sav();


PROC SEC04

	sav();


PROC SEC05

	sav();


PROC SEC06

	sav();


PROC SEC07

	sav();


PROC SEC08

	savepartial();


PROC SEC09A

	sav();


PROC SEC09B

	sav();


PROC SEC11A

	sav();


PROC SEC11B

	sav();


PROC SEC11C

	sav();


PROC SEC11D

	sav();


PROC SEC11E

	savepartial();


PROC SEC10

	if SEC10 = 2 then
		skip to SECURITF000 ;
	endif;
	sav();


PROC SEC12G

	sav();


PROC SEC12H

	sav();


PROC SEC12I

	sav();


PROC SEC12J

	sav();


PROC SEC12K

	sav();


PROC SEC12L

	sav();


PROC SEC12M

	sav();


PROC SEC12N

	sav();


PROC SEC12O

	sav();


PROC SEC12P

	sav();


PROC SEC12Q

	sav();


PROC SEC12R

	sav();


PROC SEC13A

	sav();



if $=12 then
  editnote();
  	if length(strip (editnote()))< 5 then
  		errmsg("veuilllez préciser SVP");
  		reenter $;
  	endif;
  
endif ;
PROC SEC13B

	if SEC13B > 0 and  SEC13B = SEC13A then
		errmsg("La cause ne peut être la mmême avec la 1ère !");
		reenter ;
	endif;
	sav();



if $=13 then
  editnote();
  	if length(strip (editnote()))< 5 then
  		errmsg("veuilllez préciser SVP");
  		reenter $;
  	endif;
  
  
endif ;
PROC SEC13C

	if SEC13C > 0 and  SEC13A = SEC13C then
		errmsg("La cause ne peut être la mmême avec la 1ère !");
		reenter ;
	endif;

	if SEC13C > 0 and  SEC13B = SEC13C then
		errmsg("La cause ne peut être la mmême avec la 2ème !");
		reenter ;
	endif;
	sav();





if $=13 then
  editnote();
  	if length(strip (editnote()))< 5 then
  		errmsg("veuilllez préciser SVP");
  		reenter $;
  	endif;
  
  
endif ;
PROC SEC14A

	sav();


PROC SEC14B

	savepartial();


PROC SECURITF000

	
preproc

	SEC15A(1)=1; SEC15B(1)="Maïs" ; SEC15C(1)="011111";
	SEC15A(2)=2; SEC15B(2)="Riz" ; SEC15C(2)="011112";
	SEC15A(3)=3; SEC15B(3)="Sorgho" ; SEC15C(3)="011115";
	SEC15A(4)=4; SEC15B(4)="Mil" ; SEC15C(4)="011114";
	SEC15A(5)=5; SEC15B(5)="Autres céréales(blé,)" ; SEC15C(5)="011116";
	SEC15A(6)=6; SEC15B(6)="Manioc" ; SEC15C(6)="011754";
	SEC15A(7)=7; SEC15B(7)="Patates douces" ; SEC15C(7)="011744";
	SEC15A(8)=8; SEC15B(8)="Taro" ; SEC15C(8)="011746";
	SEC15A(9)=9; SEC15B(9)="Pomme de terre" ; SEC15C(9)="011745";
	SEC15A(10)=10; SEC15B(10)="Ignames" ; SEC15C(10)="011746";
	SEC15A(11)=11; SEC15B(11)="Autres tubercules" ; SEC15C(11)="011747";
	SEC15A(12)=12; SEC15B(12)="Haricot" ; SEC15C(12)="011737";
	SEC15A(13)=13; SEC15B(13)="Petit pois" ; SEC15C(13)="011738";
	SEC15A(14)=14; SEC15B(14)="Autres légumineuses" ; SEC15C(14)="011729";
	SEC15A(15)=15; SEC15B(15)="Viandes" ; SEC15C(15)="011210";
	SEC15A(16)=16; SEC15B(16)="Volaille" ; SEC15C(16)="011246";
	SEC15A(17)=17; SEC15B(17)="Poisson" ; SEC15C(17)="011318";
	SEC15A(18)=18; SEC15B(18)="Crustacées" ; SEC15C(18)="011318";
	SEC15A(19)=19; SEC15B(19)="Oeufs" ; SEC15C(19)="011432";
	SEC15A(20)=20; SEC15B(20)="Oléagineux : arachides décorcotiqués" ; SEC15C(20)="011731";
	SEC15A(21)=21; SEC15B(21)="Sésame Wangila" ; SEC15C(21)="011738";
	SEC15A(22)=22; SEC15B(22)="Lait/produits laitiers" ; SEC15C(22)="011418";
	SEC15A(23)=23; SEC15B(23)="Feuilles de manioc" ; SEC15C(23)="011712";
	SEC15A(24)=24; SEC15B(24)="Feuilles de Haricot" ; SEC15C(24)="011729";
	SEC15A(25)=25; SEC15B(25)="Mfumbwa" ; SEC15C(25)="011716";
	SEC15A(26)=26; SEC15B(26)="Epinard" ; SEC15C(26)="011714";
	SEC15A(27)=27; SEC15B(27)="Feuilles de patates douces" ; SEC15C(27)="011729";
	SEC15A(28)=28; SEC15B(28)="Amarante (bitekuteku)" ; SEC15C(28)="011711";
	SEC15A(29)=29; SEC15B(29)="Autres légumes" ; SEC15C(29)="011729";
	SEC15A(30)=30; SEC15B(30)="Produits de la ceuillette (feuilles,noix,racines,fruits,etc.)" ; SEC15C(30)="011729";
	SEC15A(31)=31; SEC15B(31)="Fruits: banane de table" ; SEC15C(31)="011613";
	SEC15A(32)=32; SEC15B(32)="Ananas" ; SEC15C(32)="011611";
	SEC15A(33)=33; SEC15B(33)="Orange" ; SEC15C(33)="011616";
	SEC15A(34)=34; SEC15B(34)="Avocat" ; SEC15C(34)="011612";
	SEC15A(35)=35; SEC15B(35)="Papaye" ; SEC15C(35)="011617";
	SEC15A(36)=36; SEC15B(36)="Sucre et produits sucrés" ; SEC15C(36)="011813";
	SEC15A(37)=37; SEC15B(37)="Huile de cuisson" ; SEC15C(37)="011525";
	


postproc

	M0817 = 1 ;


PROC SEC15A

	sav();


PROC SEC15B

	sav();


PROC SEC15C

	sav();


PROC SEC15D

onfocus

	if SEC15B(curocc()) in "Maïs"	,"Riz"	,"Mil"	,"Sorgho"	,"Poisson",	"Lait/produits laitiers",	"Mfumbwa"	,"Haricot",	"Petit pois"	, "sésame",	"Taro"	,"Manioc",	"Sucre et produits sucrés" then
		article=strip(concat("le"," ",SEC15B(curocc())))
	endif;

	if SEC15B(curocc()) in "Huile de cuisson",	"ananas	","Avocat",	"orange",	"Amarante (bitekuteku)",	"Epinard" then
		article=strip(concat("l'"," ",SEC15B(curocc())));
	endif;

	if SEC15B(curocc()) in "Volaille",	"papaye",	"Pomme de terre" then
		article=strip(concat("la"," ",SEC15B(curocc())))
	endif;;

	if SEC15B(curocc()) in "Autres céréales(blé,)",	"Viandes",	"Crustacées",	"Œufs",	"Fruits: banane de table",	"Feuilles de manioc",	"Autres légumineuses",	"Feuilles de Haricot",	"Feuilles de patates douces"	,"Autres légumes",	"Produits de ceuillette (feuilles,noix,racines,fruits,etc.)",	"Oléagineux : arachides décorcotiqués",	"Patates douces",	"Ignames",	"Autres tubercules" then
		article=strip(concat("les"," ",SEC15B(curocc())))
	endif;

postproc

	if SEC15D = 0 then skip to next endif ; // SEC15D 

	savepartial() ;


PROC SEC15E

	sav();


PROC M0817

preproc

	if SEC01<> NOTAPPL and SEC02<> NOTAPPL and SEC03<> NOTAPPL and  SEC04<> NOTAPPL and SEC05<> NOTAPPL and SEC06<> NOTAPPL
		and SEC07<> NOTAPPL and SEC08<> NOTAPPL then
			M0817=1;
			noinput;
	endif;

postproc

	if M0817 in 1:4 then
		M08FIN = 3 ;
	else
		M08FIN = 1 ;
	endif;


	sav();


PROC M0810H

preproc

	if demode() = add then
		if special(visualvalue($)) then
			x = systime();
			if M0810H = notappl then M0810H = int(x / 10000);endif;
			if M0810M = notappl then M0810M = int(x / 100) % 100;endif;
		endif;
	endif;


PROC M08FIN




preproc

	$ = 3;

postproc

	if $ = 1 then
		errmsg(" Vous pouvez remonter ");
		reenter ;
	endif;

	if $ = 2 then editnote() endif;

	$ = 3 ;


	sav();


