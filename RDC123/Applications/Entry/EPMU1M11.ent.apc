{Application 'PAIX' logic file generated by CSPro}


PROC GLOBAL
set explicit;
{ Definitions of working variables }
array alpha(8) KishGrid(10);	   { Grid used for selection of child for child discipline module }
alpha(26) alphavar;				   { Alpha working variable used in checking alpha vars }
alpha(26) alphanew;                { Alpha working variable used in checking alpha vars }
alpha(62) alphalst;                { The alphabet }
array codes(50);                   { Array used for creating line numbers of household members sleeping under mosquito net}
array alpha(50) labels(50);        { Array used for creating names of household members sleeping under mosquito net} 
alpha(40) yname, ynamehh, tmpname; { List of names for questions }
alpha(900) strnotes;               { for editnote at the end of the interview }
alpha(40) worklabel;               { Alpha variable to get customize text for questions }

numeric   hhn,xintnum,xsupnum,xmodcent ;
Alpha(60) douzdernmois douzeprochainmois ; {Création de la fonction qui calcul les mois pour le capi} 
numeric TOTPRIM,maxmain,MOMIN,MOMAX  maxdep;
numeric addmode i cln  hhnum x j ;
string strpart dmois xmois xunite libelle ;

file FichSaPart ;


// sauvegarde des données 
Function sav()
	savepartial(); 
end;


// Quitter
Function quitter()
	savepartial();
	stop(1) ;
end;

{ User defined functions }

  function showCalc()
    execsystem("calc");
  end;

  { setup basic user bar }
  function userbase();
    userbar( clear );

    
    userbar(add text,"ECVM: Mod.11");
	userbar(set color,236,254,255);
	
    userbar( add button, "<",    do("PreviousField") );
    userbar( add button, ">",    do("NextField") );
    userbar( add button, ">>|",  do("AdvanceToEnd") );
    userbar( add button, "Note", do("EditNote") );
    userbar( add button, "Lang", do("ChangeLanguage") );
    userbar( add button, "Calc", showCalc );	
    
 	userbar(add spacing,2);   
	userbar(add button,"Sauvegarde", sav());    
	userbar(add spacing,2);
	userbar(add text," ");
	
	userbar(add button,"Quitter", quitter());    
	userbar(add spacing,2);
	userbar(add text," ");
  end;
  
{ --------------------------------------------------------------------------- }
{ valid
  Checks that a variable has a valid value.
  A valid value is less than 96 and not a special value e.g notappl/missing
  Returns: 1 if valid, 0 if not valid                                        }

function valid(xvar);
  valid = (!special(xvar) and xvar < 96)
end;

{ -------------------------------------------------------------------------- }
{ NAtoZero
  Converts notappl (and 99 - for child labour module) values to zero while not changing other values.
  Returns: 0 if input variable is notappl, else returns it unchanged         }
function NAtoZero(xvar);
  if xvar = notappl or xvar=99 then
    xvar = 0
  endif;
  NAtoZero = xvar;
end;


{ clear_labels
Set value labels for certain questions where the response categories can change }
function clear_labels();
	do i = 1 while i <= 50
	  codes(i) = notappl;
	  labels(i) = "";
	enddo;
end;

//Setting a variable value for the currently loaded task
  function setTaskVar(string varName, string varValue)
    //first checking if the variable is already set
    for i in TASKS.TASK_VARIABLES do
      if toupper(strip(varName)) = toupper(strip(TASK_VARNAME(i))) then
	    TASK_VARVAL(i) = varValue;
	    exit;
	  endif;
    enddo;

    //adding a new variable if in case it hasn't been set alerady
    i = 0;
    while i <= maxocc(TASKS.TASK_VARIABLES) do 
      i = i + 1;
	  if length(strip(TASK_VARNAME(i))) = 0 then
	    TASK_VARNAME(i) = strip(varName);
	    TASK_VARVAL(i) = strip(varValue);
	    break;
	  endif;
    enddo;
  end;

  //Getting the variable value using varibale name for the currently loaded task
  function string getTaskVar(string varName)
    do i = 1 while i <= maxocc(TASKS.TASK_VARIABLES)
      if length(strip(TASK_VARNAME(i))) = 0 then
	    break;
	  endif;
      if toupper(strip(varName)) = toupper(strip(TASK_VARNAME(i))) then
	    getTaskVar = strip(TASK_VARVAL(i));
	    break;
  	  endif;
    enddo;
  end;



function endmess();
  { Returns true if response is REVIEW }
  endmess = ({addmode and}
             accept("Fin du questionnaire",
                     "Vérifier du questionnaire",
                     "Nouvelle quête./Questionnaire après") 
                     <> 2);
end;
{FR}
function alphachk(alpha(26) alphamask);
{  russian_convert();}
  { first remove all blanks, and duplicate question marks }
  alphanew = "";
 numeric  qmark = 0;
 numeric  lx = 1  l  a ;
  do l = 1 while l <= length(strip(alphavar))
    if alphavar[l:1] <> " " and (alphavar[l:1] <> "?" or not qmark) then
      alphanew[lx:1] = alphavar[l:1];
      lx = lx + 1;
      if alphavar[l:1] = "?" then
        qmark = 1;
      endif;
    endif;
  enddo;
  { aok = 0 - string is bad, aok = 1 - string is good }
numeric   totlen = length(strip(alphamask));
 numeric  aok = 0;           { assume string is bad - for empty string }
 numeric alphsize = length(strip(alphanew));
  if alphsize then   { not empty string }
    { check for "?" as only character }
    aok = (alphanew[1:1] = "?" and alphsize = 1);
    if !aok then     { if not a single "?", check string }
      aok = 1;       { now assume string is good until we know otherwise }
      l = 1;         { l is position in string of acceptable values }
      a = 1;         { a is position in input string }
      { loop while the string is still good and there are more letters }
      while aok and a <= alphsize do
        aok = pos(alphanew[a:1],alphamask[l:totlen-l+1]);
        if aok then     { letter is acceptable }
          l = l + aok;  { increment l to position after letter in string of acceptable values }
          a = a + 1     { increment a to next letter in input string }
        endif;
      enddo;
    endif;
  endif;
  alphachk = (!aok);    { alphachk = 0 - if string is good, = 1 - if string is bad }
  { now expand variables }
  if aok then
    do l = 1 while l <= length(strip(alphamask))
      if pos(alphamask[l:1],alphanew) then
        alphavar[l:1] = alphamask[l:1]
      elseif pos("?",alphanew) then
        alphavar[l:1] = "?"
      else
        alphavar[l:1] = " "
      endif;
    enddo;
  endif;
end;

{ function to clear codes and labels for household members }
function clean_labels();
	do i = 1 while i <= 30 by 1
	  codes(i)  = notappl;
	  labels(i) = "";
	enddo;
end;

function onStop();
    savepartial();
    stop(-1);
end;


PROC EPMU1M11_FF



preproc
  //Initializing global variables
  SetGlobalVariables();
  tempDir = projectDir + "\Temp";
  utilsDir = projectDir + "\Utils";
  
  setfont(All,"Cambria",30);
  
   setvaluesets("_FRA");  //to set valuesets in French


  //reading the task
  TASK_ID = trimQuotes(readEnviValue("taskId"));
  loadcase(TASKS, TASK_ID);

  //if task is water quality questionnaire task, loading parent household task
  if strip(TASK_TEMPLATENAME) <> "hh_int" & length(strip(TASK_PARENTID)) > 0 then
    TASK_ID = TASK_PARENTID;
    loadcase(TASKS, TASK_ID);
  endif;



  hhnum  = 0;       { last household number used }
 


  cln=tonumber(sysparm()[1:3]);
  hhn=tonumber(sysparm()[4:2]);
  xintnum  = tonumber( sysparm()[9:3] );
  xsupnum  = tonumber( sysparm()[12:3] );


  alphalst = "ABCDEFGHIJKLMNOPQRSTUVWXYZÃÇÅÄÁÆÈÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÝÞßáãäåæíÉìÂ";
 

  { settings for CAPI }

  set attributes (EPMU1M11) assisted on;
  set attributes (EPMU1M11) assisted off (variable (title));

  { set up minimal user bar }
  userbase();
  userbar( show );


postproc
  { update file with households assigned to interviewers }
   //if !xmodcent then
   //  updthhassgn();
   //endif;
  if !xmodcent then      { central office desn't have to exit after reviewing one HH }
    stop(-1);
  endif;
  



PROC M11
preproc
if demode() = add then addmode = 1 endif;
if demode() = modify then addmode = 2 endif;
if demode() = verify then addmode = 3 endif;

  
  if ispartial() then
    advance to getsymbol(savepartial);
  endif;

postproc 

endlevel

PROC M111

preproc
  if special(visualvalue($)) then
    $ = cln;
  endif;

postproc
  YCLUSTER = $;
  if loadcase( CLUSTERS, YCLUSTER ) then
    M117 = YURBRUR;
    M118 = YREGION;
  endif;


PROC M112

preproc
  if hhn <> 0 & (special(visualvalue($)) | visualvalue($) = hhn) then
    $ = hhn;
  endif;

postproc
  set attributes(M11NAME) native;
  if addmode then
    M11NAME = getTaskVar("hhead");
    M11ADDR = getTaskVar("address");
  else
    if length(strip(M11NAME)) then 
      set attributes (M11NAME) protect;
      set attributes (M11ADDR) protect;
    else 
      M11NAME = getTaskVar("hhead");
      M11ADDR = getTaskVar("address");
    endif;
  endif;

PROC M11INT
preproc
  if addmode | special(visualvalue($)) then
    $ = xintnum;
    M11INT = xintnum;
    M11HINT = xsupnum;
  endif;
  
PROC M113


preproc
  if addmode | special(visualvalue($)) then
    $ = 0;
    M11INT = xintnum ;
    M11HINT = xintnum;
  endif;
  
PROC M117


preproc
  if addmode | special(visualvalue($)) then
    M117 = 1;
  endif;
  
PROC M118

preproc

M118 = 10 ;
PROC M11NAME
preproc
  if !addmode then
    exit;
  endif;
PROC M11ADDR

preproc
  if !addmode then
    exit;
  endif;


PROC M1111


postproc
  if $  <> 1 then
    skip to M1117
  endif;
PROC M116J
preproc
if addmode  then
  M116J = sysdate( "DD" );
  M116M = sysdate( "MM" );
  M116A = sysdate( "YYYY" );
endif;
PROC M119H

preproc
  if special(visualvalue($)) then
    x = systime();
    if M119H = notappl then M119H = int(x / 10000);endif;
    if M119M = notappl then M119M = int(x / 100) % 100;endif;
  endif;


PROC CRPD

preproc

	sav();
		 numeric k, trv = 0  rec  ;
		 clear_labels();
		 i=1;
		 

Onfocus

	setfile( FichSaPart, concat("C:\RDC123\Data\H",edit("999",M111), edit("999",M11INT), ".dat")) ;
	if Filesize( FichSaPart ) > 0 then
		while FileRead( FichSaPart, strpart ) do
			if strpart[11:3] = "0HL" and tonumber(strpart[4:2]) = M112 and tonumber( strpart[70:2]) >= 18 then

				codes(i) = tonumber(strpart[14:2]);
				labels(i)= strip (strpart[16:40]);
			
				i=i+1;

			endif ;
		enddo;
	endif ;
		 close( FichSaPart );

			//
	if i = 0 then
		errmsg("Aucun Membre de Ménage");
	endif;



	setvalueset(@getsymbol(),codes,labels);
	setcapturetype(CRPD,3);




Postproc

	Do varying j = 1 until j >= i
		if codes(j) = CRPD then
			NRPD = labels(j);
		endif;
	enddo;
	savepartial();
	sav();
PROC PS01A

if PS01A = 1 then skip to PS01B endif;

if PS01A = 9 then skip to PS01B endif;
PROC PS01B

if PS01B = 1 then skip to PS01C endif;
if PS01B = 9 then skip to PS01C endif;
PROC PS01C

if PS01C = 1 then skip to PS01D endif;
if PS01C = 9 then skip to PS01D endif;
PROC PS01D

if PS01D = 1 then skip to PS01E endif;
if PS01D = 9 then skip to PS01E endif;
PROC PS01E

if PS01E = 1 then skip to PS01F endif;
if PS01E = 9 then skip to PS01F endif;
PROC PS01F

if PS01F = 1 then skip to PS01G endif;
if PS01F = 9 then skip to PS01G endif;
PROC PS01G

if PS01G = 1 then skip to PS01H endif;
if PS01G = 9 then skip to PS01H endif;
PROC PS01H

if PS01H = 1 then skip to PS01I endif;
if PS01H = 9 then skip to PS01I endif;
PROC PS01I

if PS01I = 1 then skip to PS01J endif;
if PS01I = 9 then skip to PS01J endif;
PROC PS01J

if PS01J = 1 then skip to PS01K endif;
if PS01J = 9 then skip to PS01K endif;
PROC PS01K

if PS01K = 1 then skip to PS01L endif;
if PS01K = 9 then skip to PS01L endif;
PROC PS01L

if PS01L = 1 then skip to PS01M endif;
if PS01L = 9 then skip to PS01M endif;
PROC PS01M

if PS01M = 1 then skip to PS01N endif;
if PS01M = 9 then skip to PS01N endif;
PROC PS01N

if PS01N = 1 then skip to PS03A endif;
if PS01N = 9 then skip to PS03A endif;
PROC PS04AA

if PS04AA = 2 then skip to PS04BA endif;

numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;



PROC PS04AB

if PS04AB = 1 then skip to PS04BA endif;

if PS04AB = 8 then
    editnote();
    if length (strip(editnote()))< 2 then
  		errmsg("Assistance non valide");
    	reenter;
	endif;
endif;
PROC PS04BA

if PS04BA = 2 then skip to PS04DA endif;


numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;
PROC PS04BB

if PS04BB = 1 then skip to PS04CA endif;

if PS04BB = 8 then
    editnote();
    if length (strip(editnote()))< 2 then
  		errmsg("Assistance non valide");
    	reenter;
	endif;
endif;
PROC PS04DA

if PS04DA = 2 then skip to PS04EA endif;

if PS04DA = 8 then
    editnote();
    if length (strip(editnote()))< 2 then
  		errmsg("Assistance non valide");
    	reenter;
	endif;
endif;
numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;
PROC PS04DB

if PS04DB = 1 then skip to PS04EA endif;

if PS04DB = 8 then
    editnote();
    if length (strip(editnote()))< 2 then
  		errmsg("Assistance non valide");
    	reenter;
	endif;
endif;
PROC PS04EA

if PS04EA = 2 then skip to PS04GA endif;
numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;
PROC PS04EB

if PS04EB = 1 then skip to PS04FA endif;

if PS04EB = 8 then
    editnote();
    if length (strip(editnote()))< 2 then
  		errmsg("Assistance non valide");
    	reenter;
	endif;
endif;
PROC PS04GA

if PS04GA = 2 then skip to PS04HA endif;
numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;
PROC PS04GB

if PS04GB = 1 then skip to PS04HA endif;

if PS04GB = 8 then
    editnote();
    if length (strip(editnote()))< 2 then
  		errmsg("Assistance non valide");
    	reenter;
	endif;
endif;
PROC PS04HA

if PS04HA = 2 then skip to PS05A endif;
numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;
PROC PS04HB

if PS04HB = 1 then skip to PS05A endif;

if PS04HB = 8 then
    editnote();
    if length (strip(editnote()))< 2 then
  		errmsg("Assistance non valide");
    	reenter;
	endif;
endif;
PROC PS05A
numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;
PROC PS05B
numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;
PROC PS05C
numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;
PROC PS09E


Onfocus
numeric natio ;
natio=0;
	setfile( FichSaPart, concat("C:\RDC123\Data\H",edit("999",M111), edit("999",M11INT), ".dat")) ;
	if Filesize( FichSaPart ) > 0 then
		while FileRead( FichSaPart, strpart ) do
			if strpart[11:3] = "0HL" and tonumber(strpart[4:2]) = M112 and tonumber( strpart[70:2]) >= 18 then
	
			 natio = tonumber( strpart[101:1]);
			 if CRPD = tonumber(strpart[14:2]) and natio = 1 then
			 	skip to PS09F;
             endif;
			endif ;
		enddo;
	endif ;
		 close( FichSaPart );
PROC PS10

if PS10 = 2 then skip to PS12 endif;
numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;
PROC PS11
numeric xlastdate ss_xlastdate twelvemonth s_tw thirdays s_thirdays sevendays s_seven refere;


// Code des 12 derniers mois
twelvemonth = dateadd((((M116A * 100)+ M116M) * 100) + M116J ,-13,"m");
s_tw=dateadd((((M116A * 100)+ M116M) * 100) + M116J,-1,"m");

string tw_sldat =edit("99999999",twelvemonth) ; //Pour plus de précision dans le capi
string stw=edit("99999999",s_tw); //De Décembre à février...

douzdernmois = concat( getlabel( M116M,tonumber(tw_sldat[5:2])) , " ", tw_sldat[1:4], " à ", getlabel(M116M,tonumber(stw[5:2])), " ",stw[1:4]) ;
PROC PS12

if PS12 = 2 then skip to PS16 endif;


PROC PS13

if PS13 = 9 then
     editnote();
    if length (strip(editnote()))< 2 then
  		errmsg("Origine non valide");
    	reenter;
	endif;
endif;
PROC PS16

if PS16 = 2 then skip to PS19 endif;
PROC PS17

if PS17 = 5 then
     editnote();
    if length (strip(editnote()))< 2 then
  		errmsg("Assistance non valide");
    	reenter;
	endif;
endif;
PROC M1110H
preproc
  if special(visualvalue($)) then
    x = systime();
    if M1110H = notappl then M1110H = int(x / 10000);endif;
    if M1110M = notappl then M1110M = int(x / 100) % 100;endif;
  endif;
PROC M11FIN
preproc
$ = 3;

postproc

if $ = 1 then 
	errmsg(" Vous pouvez remonter ");
	reenter ;
endif;

if $ = 2 then editnote() endif;

M11FIN = 3 ;
