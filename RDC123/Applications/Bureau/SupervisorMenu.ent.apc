{Application 'SUPERVISORMENU' logic file generated by CSPro}
PROC GLOBAL

  //Répertoire
  string RepApp, RepDict, repdrop, entryDir, dataDir, refDir, tasksDir, syncDir, supervDir, workDir, receiveDir, backupDir, closedDir, updateSourceDir, updateDestDir concatlst;
  string btAddress, InterviewerId, InterviewerName;  
  string hhAssignTaskFile, clusterOperationsTaskFile, reviewDataTaskFile;
  string encrKey, ifssUser, ifssPassword;
  
  array string teamIdIndex(9999); //index des enqueteur par ID 
  array teamIds(50);              //tables des IDs de l'équipe
  numeric teamMemberCount;        //nombre total des memebres de l'équipe
  numeric NumEquip ;              // Numéro de l'équipe

  numeric debugMode;              //1 - debug mode, 0 - non-debug mode
  numeric removableOnly;          //1 - backup to removable drive only, 0 - scan all accessable drives
  numeric supervAsInterv;         //1 - supervisor can play a role of interviewer, 0 - supervisor cannot conduct interviews

  numeric maxHhNum ;               //Maximum number of households possible in one cluster

  file f1  pffCont ;
  
  
  //Setting a variable value for the currently loaded task
  function setTaskVar(string varName, string varValue)
    numeric i;
    //first checking if the variable is already set
    do i = 1 while i <= maxocc(TASKS.TASK_VARIABLES) by 1
      if toupper(strip(varName)) = toupper(strip(TASK_VARNAME(i))) then
	    TASK_VARVAL(i) = varValue;
	    exit;
	  endif;
    enddo;

    //adding a new variable if in case it hasn't been set alerady
    do i = 1 while i <= maxocc(TASKS.TASK_VARIABLES) by 1
	  if length(strip(TASK_VARNAME(i))) = 0 then
	    TASK_VARNAME(i) = strip(varName);
	    TASK_VARVAL(i) = strip(varValue);
	    break;
	  endif;
    enddo;
  end;

  //Getting the variable value using varibale name for the currently loaded task
  function string getTaskVar(string varName)
    numeric i;
    do i = 1 while i <= maxocc(TASKS.TASK_VARIABLES)
      if length(strip(TASK_VARNAME(i))) = 0 then
	    break;
	  endif;
      if toupper(strip(varName)) = toupper(strip(TASK_VARNAME(i))) then
	    getTaskVar = strip(TASK_VARVAL(i));
	    break;
  	  endif;
    enddo;
  end;
  
  //this function will try create the directory if it doesn't exist already
  function string setDir(string dir)
    if !direxist(dir) then
      dircreate(dir);
    endif;
    setDir = dir;
  end;
  
  //constructing team arrays
  function fillTeam()
    numeric curNum = UNUMBER;
    numeric curTeam = UTEAM;
    string curId = UID;
    
    close(USERS_DICT);
    open(USERS_DICT);
    
    teamMemberCount = 0;
    while loadcase(USERS_DICT) do
      if UTEAM = curTeam then
       NumEquip = UTEAM ;
        inc(teamMemberCount);
        teamIds(teamMemberCount) = UNUMBER;
        teamIdIndex(UNUMBER) = UID;
      endif;
    enddo;

    close(USERS_DICT);
    
    //sorting team members list (needed because CSPro sorts cases by case ID, which is Bluetooth MAC address)
    numeric i, j, k;
    do i = 1 while i < teamMemberCount by 1
      do j = i + 1 while j <= teamMemberCount by 1
        if teamIds(j) < teamIds(i) then
          k = teamIds(i);
          teamIds(i) = teamIds(j);
          teamIds(j) = k;
        endif;
      enddo;
    enddo;
    
    //creating ENVI variables for team users
    string enviStr="string teamNames; int teamNumbers;";
    do i = 1 while i <= teamMemberCount by 1
      enviStr = enviStr + maketext("teamNumbers += %d;", teamIds(i));
      
      UID = teamIdIndex(teamIds(i));
      if loadcase(USERS_DICT, UID) then
        enviStr = enviStr + maketext("teamNames += '%s';", strip(UNAME));
      else
        enviStr = enviStr + "teamNames += '';"
      endif;
    enddo;
    execEnvi(enviStr);
    
    //reloading original user record
    UID = curId;
    loadcase(USERS_DICT, UID);    
  end;

  //backing up tasks for current cluster to removable drive
  function backupTasks()
    numeric bDrives = split(getSystemDrives(removableOnly), ";");
    
    //no drives found
    if bDrives = 1 then
      exit;
    endif;
    
    numeric i;
    string bDir;
    do i = 1 while i < bDrives by 1
      bDir = spl(i) + backupDir;
      if dirExist(bDir) then
        //copying tasks
        if !dirExist(bDir + "\Tasks") then
          dircreate(bDir + "\Tasks");
        endif;
        filecopy(tasksDir + "\T" + edit("99999", MCLUST) + "*", bDir + "\Tasks");
      endif;
    enddo;
  end;
  
  //Returns the name of the interviewer by MAC address
  function string getUName(string userId)
    string res = "";
    string oId = UID;
    
    UID = userId;
    if loadcase(USERS_DICT, UID) then
      res = UNAME;
    endif;
    
    //reloading original user
    UID = oId;
    loadcase(USERS_DICT, UID);
    
    getUName = strip(res);
  end;
  
  //generates tasks for the newly opened cluster
  function genTasks()
    numeric i, j;
    
    //household assignment tasks
    clear(TASKS);
    setfile(TASKS, hhAssignTaskFile, create);
    open(TASKS);
    
    XCLUSTER = MCLUST;
    if loadcase(HOUSEHOLDS_DICT, XCLUSTER) then
      for i in HOUSEHOLDS_DICT.HOUSEHOLDS_REC do
        TASK_ID = getGuid(); //unique task ID
        TASK_TEMPLATENAME = "HHAssign";
        {+EN}
        TASK_LABEL = "Ménage #<%d:hhnum,2:00%><br>Address: <%address%><br> Chef de ménage : <%hhead%>"; //!T
        {EN+}
        {{RU}
        TASK_LABEL = "Домовладение #<%d:hhnum,2:00%><br>Адрес: <%address%><br>Имя главы: <%hhead%>"; //!T
        {RU}}
        TASK_STATUS = 1;
      
        //task variables
        setTaskVar("hhnum", maketext("%d", XHOUSEHOLD));
        setTaskVar("address", strip(XADDRESS));
        setTaskVar("hhead", strip(XFNAME) + " " + strip(XLNAME));
        setTaskVar("hhsample", "true"); //flag to let the system know that this household is part of the sample
        
        //subsample information
        for j in XSUBSAMPLE
          if !special(XSUBSAMPLE) then
            setTaskVar(maketext("sub%d", j), maketext("%d", XSUBSAMPLE(i, j)));
          endif;
        enddo;
        
        TASK_DUMMY = 0; //Very important!
      
        writecase(TASKS, TASK_ID);
      enddo;
    endif;
    
    close(TASKS);
    
    //cluster operations tasks
    clear(TASKS);
    setfile(TASKS, clusterOperationsTaskFile, create);
    open(TASKS);
    TASK_ID = getGuid(); //unique task ID
    TASK_TEMPLATENAME = "ClustClose";
    TASK_LABEL = "Situation de la grappe";  
    TASK_STATUS = 1;
    TASK_DUMMY = 0; //Very important!
    writecase(TASKS, TASK_ID);
    close(TASKS);
  end;

  //displays supervisor's currnet tasks
  function showTasks()
    numeric res = 0;

    //Charger les taches   NAB
    loadTasks("supTasks", 0, RepDict + "\tasks.dcf", hhAssignTaskFile);
  //  loadTasks("supTasks", 1, RepDict + "\tasks.dcf", reviewDataTaskFile);
    loadTasks("supTasks", 1, RepDict + "\tasks.dcf", clusterOperationsTaskFile);
          
    //showing tasks
    showTaskList("supTasks");
  
    //reading result
    //function returns option ID. Task loaded into a TASKS dictionary
    string ares;
    if fileexist(tempDir + "\taskList.tmp") then
      setfile(f1, tempDir + "\taskList.tmp");
      open(f1);  
      fileread(f1, ares);
      close(f1);
      
      split(ares, ";");
      
      //Modifier le panel  NAB
      
    numeric panelIdx = tonumber(spl(3));
    //  numeric panelIdx = tonumber(spl(2));
      string curFile;
      if panelIdx = 0 | panelIdx = default then
        curFile = hhAssignTaskFile;
      elseif panelIdx = 2 then
        curFile = reviewDataTaskFile;
      elseif panelIdx = 1 then
        curFile = clusterOperationsTaskFile;
      endif;
            
      //loading case
      filedelete(curFile + ".idx");
      setfile(TASKS, curFile);
      open(TASKS);
      TASK_ID = strip(spl(1));
      if loadcase(TASKS, TASK_ID) then
        res = tonumber(spl(2));
      endif;
      close(TASKS);
    endif;
    showTasks = res;

  end;

  //handles household assignment tasks
  function onHhAssign(optionsId)
    string shelf = "outgoing";
    if TASK_STATUS = 1 then //household hasn't been assigned yet
      numeric pHh = tonumber(getTaskVar("hhnumroot")); //getting root household number, in case this is an added household
          
      //adding interviewer number and name task variables
      setTaskVar("intNum", edit("999", optionsId));
      setTaskVar("intName", getUName(teamIdIndex(optionsId)));
    
      //creating ENVI variable for the task to be synced to the interviewer
      string ee = "task t1;"                        //declaring t1 ENVI variable of type "task"
      ee = ee + "t1.id='" + strip(TASK_ID) + "';";  //generated task ID is the same as the household assignment task ID
      ee = ee + "t1.templatename='hh_int';";        //template name for the HH interview is hh_int
      if special(pHh) then
        ee = ee + "t1.label='Interview ménage #<%d:hhnum,2:00%><br>Addresse: <%address%><br>Chef de ménage: <%hhead%>';"; 
      else

        ee = ee + "t1.label='Interview ménage #<%d:hhnum,2:00%> (Ajout pour le ménage #<%d:hhnumroot,2:00%>)<br>Address: <%address%><br>Chef de ménage: <%hhead%>';"; 
      endif;
      ee = ee + "t1.status=1;";                     //status set to 1 - not visited
      ee = ee + "t1.parentid='';";                  //hh interview tasks are at the root, not parent
      
      execenvi(ee);
      ee = "";
      
      //setting variables
      ee = ee + "var v1;";
      numeric i;
      do i = 1 while i <= maxocc(TASKS.TASK_VARIABLES) by 1
        if length(strip(TASK_VARNAME(i))) > 0 then
          ee = ee + "v1.name='" + strip(TASK_VARNAME(i)) + "';";
          ee = ee + "v1.val='" + strip(TASK_VARVAL(i)) + "';";
          ee = ee + "t1.variables += v1;";
	    endif;
      enddo;

      execenvi(ee);
      
      
      if optionsId = tonumber(InterviewerId) then //putting the task into 'incoming' folder if on the same machine
        shelf = "incoming";
      endif;
      
      //saving task to the outgoing folder in sync cache database
      //destination task file where the transferred task is going to be merged
      string destFile = tasksDir + "\T" + edit("99999", MCLUST) + edit("99999", optionsId) + "_HhAssigned.dat";
      addTaskToSync("t1", "HhAssign" + TASK_ID, edit("99999", optionsId), edit("99999", tonumber(InterviewerId)), destFile, shelf);
      
      //marking task as "Assigned"
      TASK_STATUS = 2;
      writecase(TASKS, TASK_ID);
    elseif TASK_STATUS = 2 then //household has been assigned
      //getting receiver ID
      string receiverId = getTaskVar("intNum");
      
      if tonumber(receiverId) = tonumber(InterviewerId) then //removing the task from the 'received' folder if on the same machine
        shelf = "incoming";
      endif;
      
      //removing packages from sync
      numeric x1 = removeFromSync("HhAssign" + TASK_ID, edit("99999", tonumber(receiverId)), edit("99999", tonumber(InterviewerId)), shelf);
      
      //something bad happened!
      if x1 < 0 then
        errmsg(9901);
        exit;
      endif;
      
      numeric doRemove = 1;
      //Task has already been synced with interviewer
      if x1 = 0 then
          x1 = errmsg(1002) select("Yes", continue, "No", continue);
          box x1 => doRemove;
              1  => 1;
                 => 0;
          endbox;
      endif;
      
      //changing status back to "unassigned"
      if doRemove then
        TASK_STATUS = 1;
        writecase(TASKS, TASK_ID);
      endif;
    endif;
    
    //cleaning up
    close(TASKS);
    string taskFile = tasksDir + "\T" + edit("99999", MCLUST) + edit("99999", tonumber(InterviewerId)) + "_Assign.dat";
    cleanupTaskFile(taskFile, length(TASK_ID));
  end;
  
  array hhIdx(999);
  array string pTaskVars(32, 2); //memoizing parent task vars
  //creates additional household task
  function createAdditionalHh(num)
    numeric i, hn, fn, j, k;
    
    //saving info of the root household task
    string pId = TASK_ID;
    string pHhNum = getTaskVar("hhnum");
    numeric varCount = 0;
    for i in TASK_VARIABLES do
      if !length(strip(TASK_VARNAME)) then next; endif;
      
      inc(varCount);
      pTaskVars(varCount, 1) = strip(TASK_VARNAME);
      pTaskVars(varCount, 2) = strip(TASK_VARVAL);
    enddo;
    
    //clearing hhIdx array
    do i = 1 while i <= maxHhNum by 1 
      hhIdx(i) = 0;
    enddo;
    
    //creating existing households index
    close(TASKS);
    open(TASKS);
    while loadcase(TASKS) do
      if TASK_TEMPLATENAME <> "HHAssign" then
        next;
      endif;
      hn = tonumber(getTaskVar("hhnum"));
      if special(hn) | hn > maxHhNum | hn < 1 then
        next;
      endif;
      
      hhIdx(hn) = hn; 
    enddo;
    
    do i = 1 while i <= num by 1
      //finding next available number
      do j = 1 while j <= maxHhNum & hhIdx(j) > 0 by 1 enddo;
      
      if j > maxHhNum then
        errmsg(1004);
        break;
      endif;
      
      //creating new task
      clear(TASKS);
      TASK_ID = GetGuid();
      TASK_TEMPLATENAME = "HHAssign";
      {+FR}
      TASK_LABEL = "Ménage #<%d:hhnum,2:00%> (Ajout pour le ménage #<%d:hhnumroot,2:00%>)<br>Addresse: <%address%><br>Chef de ménage: <%hhead%>"; //!T
      {FR+}      
      
      TASK_STATUS = 1;
      TASK_PARENTID = pId;
      TASK_DUMMY = 0;
      
      //setting variables
      do k = 1 while k <= varCount by 1
        TASK_VARNAME(k) = pTaskVars(k, 1);
        TASK_VARVAL(k) = pTaskVars(k, 2);
      enddo;
      
      //setting new hh number and parent hh number variables
      setTaskVar("hhnum", maketext("%d", j));
      setTaskVar("hhnumroot", pHhNum);
      setTaskVar("hhsample", "false"); //this household is not part of the sample
      
      writecase(TASKS, TASK_ID);
      
      hhIdx(j) = j; //updating hh index array
    enddo;
    
    close(TASKS);
  end;
  
  //removes task for assigning additional household
  function removeAdditionalHh()
    delcase(TASKS, TASK_ID);
    
    //cleaning up
    close(TASKS);
    string taskFile = tasksDir + "\T" + edit("99999", MCLUST) + edit("99999", tonumber(InterviewerId)) + "_Assign.dat";
    cleanupTaskFile(taskFile, length(TASK_ID));
  end;
  
  //concatenates data comming from interviewers
  function concatIntervData()
    string fl = "HABCDEFGIJKLMNOPQRSUVWXYZ12345678", fNum;
    numeric i;
    do i = 1 while i <= length(fl) by 1
      fNum = fl[i:1] + edit("999", MCLUST);
      filedelete(receiveDir + "\" + fNum + "*");
      
      fileConcat(receiveDir + "\" + fNum + ".dat", workDir + "\" + fNum + "???.dat");
      fileConcat(receiveDir + "\" + fNum + ".dat.not", workDir + "\" + fNum + "???.dat.not");
      fileConcat(receiveDir + "\" + fNum + ".dat.sts", workDir + "\" + fNum + "???.dat.sts");
      
      //making sure we have an empty files in case no data from interviewers
      if !fileexist(receiveDir + "\" + fNum + ".dat") then
        setfile(f1, receiveDir + "\" + fNum + ".dat", create);
        open(f1);
        close(f1);
      endif;
    enddo;
  end;
  
  //removes redundant individuals from the closed cluster data
  function cleanUpClosed()
    openPffFile(tempDir + "\ClustClose.pff", 2);
    
    writePff_InputFiles(supervDir + "\CloseClust.bch",
                        closedDir + "\H" + edit("999", MCLUST) + ".dat",
                        tempDir + "\CloseClust.lst", "");
    
    writePff_ExternalFile("EPMU1M19", closedDir  + "\A" + edit("999", MCLUST) + ".dat");  // NAB
    writePff_ExternalFile("EPMU1M16", closedDir  + "\B" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M20", closedDir  + "\C" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M08", closedDir  + "\D" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M07", closedDir  + "\E" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M21", closedDir  + "\F" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M22", closedDir  + "\G" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M23", closedDir  + "\I" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M24", closedDir  + "\J" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M26", closedDir  + "\K" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M14", closedDir  + "\L" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M12", closedDir  + "\M" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M27", closedDir  + "\N" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M28", closedDir  + "\O" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M29", closedDir  + "\P" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M13", closedDir  + "\Q" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M18", closedDir  + "\R" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M11", closedDir  + "\S" + edit("999", MCLUST) + ".dat");   
    writePff_ExternalFile("EPMU1M30", closedDir  + "\U" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M31", closedDir  + "\V" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M32", closedDir  + "\W" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M15", closedDir  + "\X" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M09", closedDir  + "\Y" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M17", closedDir  + "\Z" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M33", closedDir  + "\1" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M06", closedDir  + "\2" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M34", closedDir  + "\3" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M10", closedDir  + "\4" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M35", closedDir  + "\5" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M25", closedDir  + "\6" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M37", closedDir  + "\7" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M01", closedDir  + "\8" + edit("999", MCLUST) + ".dat");
    
    
    closePffFile(0, "");
    
    //running Pff
    runBatch(tempDir + "\ClustClose.pff");
    
    //getting rid of index files
    filedelete(closedDir + "\*.idx");
  end;

  function onClustClose();
    //concatenating interviewer files
    //concatIntervData();
  
    //creating checkID pff file
    openPffFile(tempDir + "\ckid.pff", 2);
    
    writePff_InputFiles(supervDir + "\ckid.bch",
                        receiveDir + "\H" + edit("999", MCLUST) + ".dat",
                        tempDir + "\ckid.lst", "");
                        
    writePff_ExternalFile("HOUSEHOLDS_DICT", refDir + "\households.dat");
    writePff_ExternalFile("CLUSTERS", refDir + "\clusters.dat");

    writePff_ExternalFile("EPMU1M19", receiveDir  + "\A" + edit("999", MCLUST) + ".dat");  // NAB
    writePff_ExternalFile("EPMU1M16", receiveDir  + "\B" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M20", receiveDir  + "\C" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M08", receiveDir  + "\D" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M07", receiveDir  + "\E" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M21", receiveDir  + "\F" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M22", receiveDir  + "\G" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M23", receiveDir  + "\I" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M24", receiveDir  + "\J" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M26", receiveDir  + "\K" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M14", receiveDir  + "\L" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M12", receiveDir  + "\M" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M27", receiveDir  + "\N" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M28", receiveDir  + "\O" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M29", receiveDir  + "\P" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M13", receiveDir  + "\Q" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M18", receiveDir  + "\R" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M11", receiveDir  + "\S" + edit("999", MCLUST) + ".dat");   
    writePff_ExternalFile("EPMU1M30", receiveDir  + "\U" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M31", receiveDir  + "\V" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M32", receiveDir  + "\W" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M15", receiveDir  + "\X" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M09", receiveDir  + "\Y" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M17", receiveDir  + "\Z" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M33", receiveDir  + "\1" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M06", receiveDir  + "\2" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M34", receiveDir  + "\3" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M10", receiveDir  + "\4" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M35", receiveDir  + "\5" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M25", receiveDir  + "\6" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M37", receiveDir  + "\7" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M01", receiveDir  + "\8" + edit("999", MCLUST) + ".dat");
    // Ajouter les modalités ici
    
    
    writePff_ExternalFile("TASKS", tasksDir + "\T" + edit("99999", MCLUST) + edit("99999", tonumber(InterviewerId)) + "_Assign.dat");
    
    closePffFile(0, edit("99999", MCLUST) + edit("99999", tonumber(InterviewerId)));
    
    //running check ID
    filedelete(tempDir + "\ckid.html");
    runBatch(tempDir + "\ckid.pff");
    
    if !fileexist(tempDir + "\ckid.html") then
      errmsg(1100);
      exit;
    endif;
    
    //displaying results
    browse(tempDir + "\ckid.html");
    
    //closing cluster if ready to close
    numeric ev = tonumber(readEnviValue("ckidResult"));
    if ev > 0 then
      errmsg(1101);
      //resetting tasks status back to 1
      if TASK_STATUS <> 1 then
        TASK_STATUS = 1;
        writecase(TASKS, TASK_ID);
      endif;
      exit;
    endif;
    
    if TASK_STATUS <> 2 then
      errmsg(1102);
      TASK_STATUS = 2;
      writecase(TASKS, TASK_ID);
      close(TASKS);
    endif;

    //saving cluster to "closed" folder
    string qTypes = "HABCD";
    string xFileNum = edit("999", MCLUST);
    numeric i;
    do i = 1 while i <= length(qTypes) by 1
      filecopy(maketext("%s\%s%s.dat", receiveDir, qTypes[i:1], xFileNum), maketext("%s\%s%s.dat", closedDir, qTypes[i:1], xFileNum));
      filecopy(maketext("%s\%s%s.dat.not", receiveDir, qTypes[i:1], xFileNum), maketext("%s\%s%s.dat.not", closedDir, qTypes[i:1], xFileNum));
      //filecopy(maketext("%s\%s%s.dat.sts", receiveDir, qTypes[i:1], xFileNum), maketext("%s\%s%s.dat.sts", closedDir, qTypes[i:1], xFileNum));
    enddo;
    
    //cleaning up closed cluster
    cleanUpClosed();
  end;
  
  
  // Revoir les données des enquêteurs

  
  function reviewHhInt(hhverif)
  
    //first checking if there is data to review. Needed for water quality questionnaire here
    if TASK_STATUS = 1 then
      exit;
    endif;
    
    numeric hhNum = toNumber(getTaskVar("hhnum"));
    numeric intNum = toNumber(getTaskVar("intnum"));
    string hhId = edit("999", MCLUST) + edit("99", hhNum) + edit("999", intNum) + "00";
    string xFileNum = edit("999", MCLUST);
    
    //making a copy of the data in the temp folder
    filedelete(tempDir + "\hh.dat*");                
    filecopy(receiveDir + "\H" + xFileNum + ".dat", tempDir + "\hh.dat");

    //checking if the data has already been verified fro this household
    numeric modflag = 1;
    if hhverif then
      HH1 = MCLUST;
      HH2 = hhNum;
      HINT = notappl;
      HLN = 0;
    
      string verFile = maketext("%s\R%s.dat", receiveDir, xFileNum);
      modflag = 0;
      if fileexist(verFile) then
        setfile(EPMU1, verFile);
        open(EPMU1);
        modflag = loadcase(EPMU1, HH1, HH2, HINT, HLN);
        close(EPMU1);
      endif;
    endif;

    //generating pff
    openPffFile(tempDir + "\Saisie.pff", 1);
    
    if modflag then
      writePff_DataEntryInit("EPMU1", "Verify", "MODIFY;" + hhId, 1, 1);
    else
      writePff_DataEntryInit("EPMU1", "Verify", "ADD;" + hhId, 1, 1);
    endif;
 
    if !hhverif then   
      writePff_InputFiles(entryDir + "\SaisieHH.ent",
                          tempDir + "\hh.dat",
                          tempDir + "\hh.lst", "");
    else
      writePff_InputFiles(entryDir + "\SaisieHH.ent",
                          receiveDir + "\R" + xFileNum + ".dat",
                          tempDir + "\hh.lst", "");
    endif;
                        
    //writePff_ExternalFile("OTHERS", dataDir + "\O" + xFileNum + ".dat");
    writePff_ExternalFile("CLUSTERS", refDir + "\clusters.dat");
    writePff_ExternalFile("TASKS", tasksDir + "\T" + edit("99999", MCLUST) + edit("99999", tonumber(InterviewerId)) + "_Review.dat");
    
    string p1 = edit("999", MCLUST) + 
                edit("99", hhNum) +
                "   " +
                edit("999", intNum) +
                edit("999", tonumber(interviewerId)) +
                "0" +
                "0" +                         //Modify by central office
                "0" +                         //Revisit
                maketext("%d", modflag) +     //Modify completed
                "0" +                         //Partial
                maketext("%d", 0) +           //water quality
                "0" +                         //no-partial flag
                maketext("%d", hhverif);      //verify by supervisor
    
    closePffFile(0, p1);
    
    execEnvi("string taskId = '" + TASK_ID + "';");
    
    runEntry(tempDir + "\SaisieHH.pff");
  end;


  function reviewIndInt( string qts,xx)
    //first checking if there is data to review
    if TASK_STATUS = 1 then
      exit;
    endif;
    
    //checking if interviewer number is present
    numeric intNum = toNumber(getTaskVar("indintnum"));
    if intNum = 0 | intNum = default then
      exit;
    endif;
    
    numeric hhNum = toNumber(getTaskVar("hhnum"));
    numeric lnNum = toNumber(getTaskVar("lnnum"));
    string indId = edit("999", MCLUST) + edit("99", hhNum) + edit("999", tonumber(interviewerId)) + edit("99", lnNum);
    string xFileNum = edit("999", MCLUST);
    
    
    //making a copy of the data in the temp folder
    filedelete(tempDir + "\hh.dat*");                
    filecopy(receiveDir + "\H" + xFileNum + ".dat", tempDir + "\hh.dat");
    filedelete(tempDir + "\ind.dat*");                
    filecopy(receiveDir + "\" + qts + xFileNum + ".dat", tempDir + "\ind.dat");
    
    openPffFile(tempDir + "\SaisieMod.pff", 1);
    
    writePff_DataEntryInit("EPMU1", "Modify, Verify", "MODIFY;" + indId, 1, 1);
    
    writePff_InputFiles(entryDir + "\Saisie" + qts + ".ent",
                        tempDir + "\ind.dat",
                        tempDir + "\ind.lst", "");
 
    writePff_ExternalFile("EPMU1", tempDir + "\hh.dat");
    writePff_ExternalFile("TASKS", tasksDir + "\T" + edit("99999", MCLUST) + edit("99999", tonumber(InterviewerId)) + "_Review.dat");
    
    string p1 = edit("999", MCLUST) + 
                edit("99", hhNum) +
                edit("99", lnNum) +
                " " +
                edit("999", intNum) +
                "0000" +
                "0" +                  //Modify by central office
                "0" +                  //Revisit
                "1" +                  //Modify completed
                "0" ;                   //Partial
                
    
    closePffFile(0, p1);
    
    execEnvi("string taskId = '" + TASK_ID + "';");
    
    runEntry(tempDir + "\SaisieMod.pff");
  end;
  
  numeric nLineCount;
  function procNoteLine(string caseId, string nLine, string qType)
    //checking if case ID matches the note ID
    if length(nLine) < length(caseId) then
      exit;
    endif;
    if pos(caseId, nLine) <> 1 then
      exit;
    endif;
    
    addTableRow("notes");
    addTableCell(maketext("%d", inc(nLineCount)), 0);
    addTableCell(qType, 0);
    addTableCell(caseId, 0);
    
    numeric cPos = length(caseId);
    //line number
    if length(nLine) >= cPos + 2 then
      addTableCell(strip(nLine[cPos + 1:2]), 0);  
      inc(cPos, 2); //incrementing current position by length of line number
    endif;
    
    //question text
    if length(nLine) >= cPos + 46 then
      addTableCell(strip(nLine[cPos + 1:46]), 0);  
      inc(cPos, 46);
    endif;
    
    //question occurence
    if length(nLine) >= cPos + 3 then
      addTableCell(strip(nLine[cPos + 1:3]), 0);  
      inc(cPos, 3);
    endif;
    
    //note
    if length(nLine) > cPos then
      addTableCell(strip(nLine[cPos + 1:length(nLine) - cPos]), 0);  
    endif;
  end;
  
  function reviewNotes()
    string hId = maketext("%03D%02D%03D", MCLUST, tonumber(getTaskVar("hhnum")), tonumber(getTaskVar("intnum")));    
    openBuffer(tempDir + "\buffer.tmp");

    //clearing document and linking CSS
    clearDocument();
    clearCssLinks();
    addCssLink(refDir + "\style1.css");
  
    //date label
    setLabelCss("date", "Date: " + edit("99/99/9999", sysdate("MMDDYYYY")), "dateLabel");

    //creating separator label
    setLabelCss("separator", " ", "separator");

    //title label
    setDocumentTitle(maketext("Interviewer notes for cluster %03D, household %02D, interviewer %03D", MCLUST, tonumber(getTaskVar("hhnum")), tonumber(getTaskVar("intnum")))); //!T
    setLabel("title", htmlHeader(1, maketext("Cluster %03D", MCLUST))); //!T

    setLabel("subtitle", htmlHeader(2, maketext("Household %02D, Interviewer %03D", tonumber(getTaskVar("hhnum")), tonumber(getTaskVar("intnum")))));

    //constructing notes table
    setTableCss("notes", "detailstable1");
    addTableRow("notes");
    
    addTableCell("#", 1); //!T
    addTableCell("Quest. type", 1); //!T
    addTableCell("Case ID", 1); //!T
    addTableCell("Line", 1); //!T
    addTableCell("Question", 1); //!T
    addTableCell("Occ", 1); //!T
    addTableCell("Note", 1); //!T

    
    string fh = "HABCD";
    numeric i;
    string fLine;
    nLineCount = 0;
    do i = 1 while i <= length(fh) by 1
      string fName = maketext("%s\%s%03d.dat.not", receiveDir, fh[i:1], MCLUST);
      if fileexist(fName) then
        close(f1);
        setfile(f1, fName);
        open(f1);
        
        while fileread(f1, fLine) do
          procNoteLine(hId, fLine, fh[i:1]);
        enddo;
        
        close(f1);
      endif;
    enddo;
    
    //assembling the page and writing out the document
    addContent(div("", "logoins") + projectName + "%date%");
    addContent("%title%%subtitle%%separator%");
    addContent("%notes%%separator%" + projectName + "%date%");
    
    renderDocument(tempdir + "\Notes.html");

    closebuffer();    
    
    browse(tempdir + "\notes.html");
  end;

  //writes a hh schedule table  
  //returns: 0 - no case found, 1 - case found, 2 - case found, but no hh members present
  function writeVerifTable(string tabName, hhNum)
    numeric res = 0;
    setTableCss(tabName, "detailstable1");
    
    addTableRow(tabName);
    addTableCell("Ln", 1);
    addTableCell("Name", 1);
    addTableCell("Sex", 1);
    addTableCell("Relation", 1);
    addTableCell("Date of birth", 1);
    addTableCell("Age", 1);

    HH1 = YCLUSTER;
    HH2 = hhNum;
    HINT = tonumber(getTaskVar("intnum"));
    HLN = 0;
    
    if loadcase(EPMU1, HH1, HH2, HINT, HLN) then

      if noccurs( EPMU1.DEMO) then
        res = 1;
        numeric i;
        for i in  EPMU1.DEMO do
          addTableRow(tabName);
          addTableCell(maketext("%d", M01), 0);
          addTableCell(strip(M02), 0);
          addTableCell(maketext("%d:%s", M04, getlabel(M04, M04)), 0);
          addTableCell(maketext("%d:%s", M03, getlabel(M03, M03)), 0);
          addTableCell(maketext("%02D/%04D", M07M(i), M07A(i)), 0);
          addTableCell(maketext("%d", M08(i)), 0);
        enddo;    
      else
        res = 2;
        //no members in the household
        setLabelCss(tabName, "Pas de membre de ménage présent.","grayBoldNormal");
      endif;
    else
      //case not found
      setLabelCss(tabName, "Questionnaire non retrouvé !!!","redBold");
    endif;
    
    writeVerifTable = res;
  end;

  //generates the comparison document between the interviewer data and supervisor
  function compareVerifHhSchedule()
    openBuffer(tempDir + "\buffer.tmp");
    
    //clearing document and linking CSS
    clearDocument();
    clearCssLinks();
    addCssLink(refDir + "\style1.css");
  
    //date label
    setLabelCss("date", "Date: " + edit("99/99/9999", sysdate("MMDDYYYY")), "dateLabel");

    {+EN}  
    setLabel("title", htmlHeader(1, "Cluster " + edit("999", YCLUSTER))); //!T
    {EN+}
    {{RU}
    setLabel("title", htmlHeader(1, "Кластер " + edit("999", YCLUSTER))); //!T
    {RU}}
    
    numeric hhNum = tonumber(getTaskVar("hhnum"));
    setlabel("Sous titre", htmlHeader(2, maketext("Ménage %02D", hhNum)));

    //creating separator label
    setLabelCss("separator", " ", "separator");
    
    //writing interviewer table
    close(EPMU1);
    setfile(EPMU1, maketext("%s\H%03D.dat", receiveDir, YCLUSTER));
    open(EPMU1);
    writeVerifTable("inttab", hhNum);
    
    //writing supervisor table
    close(EPMU1);
    setfile(EPMU1, maketext("%s\R%03D.dat", receiveDir, YCLUSTER));
    open(EPMU1);
    numeric cf = writeverifTable("suptab", hhNum);

    close(EPMU1);
    
    //updating task
    {if cf & TASK_STATUS = 2 then
      TASK_STATUS = 21;
      writecase(TASKS, TASK_ID);
    endif;}
    

    //writing document
    addContent(div("", "logo") + projectName + "%date%");
    addContent("%title%%subtitle%%separator%");
    
    addContent("Calendrien de l'enqueteur : %inttab%%separator%"); //!T
    addContent("Calendrien du chef d'équipe : %suptab%%separator%"); //!T


    addContent(projectName + "%date%");
  
    renderDocument(tempdir + "\verifCompare.html");

    closebuffer();
    
    //afficher le document en html
    browse(tempDir + "\verifCompare.html");
  end;
  
  //starts synchronization procedure with remote user
  function btSync(remoteId)
    //getting remote peer information
    UID = teamIdIndex(remoteId);
    if loadcase(USERS_DICT, UID) then
      string peerId = edit("ZZZZ9", UNUMBER);
      string peerName = strip(UNAME);
      string peerAddress = strip(UID);
      
      //constructing outgoing filter
      string filter = "1:" + edit("99999", UNUMBER) + ";;2:" + edit("99999", tonumber(InterviewerId));
      
      startSync(btAddress, interviewerId, interviewerName, peerAddress, peerId, peerName, RepDict + "\tasks.dcf", filter);
    endif;
  end;
  
  //Dynamically setting colors for menu options based on synchronization status
  function setMenuColors(syncButtonIndex)
    //setting Sync button color
    numeric c = getOutgoingPackageCount("");
    if c then
      menuOptions(syncButtonIndex) = "2:textcolor=red;;;Synchronisation avec les enquêteurs*";
    else
      menuOptions(syncButtonIndex) = "2:Synchronisation avec les enquêteurs";
    endif;
    
    numeric i, j = syncButtonIndex + 1;
    numeric on;
    string filter;
    //looping through team members
    do i = 1 while i <= teamMemberCount by 1
       UID = teamIdIndex(teamIds(i));
       if loadcase(USERS_DICT, UID) then
         if teamIds(i) <> tonumber(InterviewerId) then //excluding current interviewer
           filter = "1:" + edit("99999", UNUMBER) + ";;2:" + edit("99999", tonumber(InterviewerId));
           c = getOutgoingPackageCount(filter);
           on = UNUMBER + 10000;
           if c then
             menuOptions(j) = maketext(".%d:textcolor=red;;;%d %s*", on, UNUMBER, strip(UNAME));
           else
             menuOptions(j) = maketext(".%d:%d %s", on, UNUMBER, strip(UNAME));
           endif;
           j = j + 1;
         endif;
       endif;
    enddo;
    
    //reloading current interviwer
    UID = btAddress;
    loadcase(USERS_DICT, btAddress);
  end;
  
  //creates a semi-colon separated string with all household cases found in the "R" file (supervisor verification file)
  function string getReviewedHouseholds()
    string res = "";
    
    string dFile = maketext("%s\R%03D.dat", receiveDir, MCLUST);
    
    if filesize(dFile) > 5 then
      close(EPMU1);
      
      filedelete(dFile + ".idx");
      
      setfile(EPMU1, dFile);
      open(EPMU1);
        while loadcase(EPMU1) do
          res = res + maketext("%d", HH2) + ";";
        enddo;
      close(EPMU1);
    endif;
    
    if length(res) > 1 then
      res = res[1:length(res) - 1]; //trimming last ';' at the end
    endif;
    
    getReviewedHouseholds = res;
  end;
  
  //Populating data review tasks panel
  function populateReviewTasks()
    //concatenating interviewer files
    concatIntervData();
    
    //getting a list of households verified by supervisor
    string rh = getReviewedHouseholds();
    
    string xFileNum = edit("99999", MCLUST) + edit("99999", tonumber(InterviewerId));
    filedelete(tasksDir + "\T" + xFilenum + "_Review.dat");
    filedelete(tasksDir + "\T" + xFilenum + "_Review.dat.idx");
    
    //creating GenReviewTasks pff file
    openPffFile(tempDir + "\GenReviewTasks.pff", 2);
    
    writePff_InputFiles(supervDir + "\GenReviewTasks.bch",
                        receiveDir + "\H" + edit("999", MCLUST) + ".dat",
                        tempDir + "\GenReviewTasks.lst", "");

    writePff_ExternalFile("EPMU1M19", receiveDir  + "\A" + edit("999", MCLUST) + ".dat");  // NAB
    writePff_ExternalFile("EPMU1M16", receiveDir  + "\B" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M20", receiveDir  + "\C" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M08", receiveDir  + "\D" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M07", receiveDir  + "\E" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M21", receiveDir  + "\F" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M22", receiveDir  + "\G" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M23", receiveDir  + "\I" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M24", receiveDir  + "\J" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M26", receiveDir  + "\K" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M14", receiveDir  + "\L" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M12", receiveDir  + "\M" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M27", receiveDir  + "\N" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M28", receiveDir  + "\O" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M29", receiveDir  + "\P" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M13", receiveDir  + "\Q" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M18", receiveDir  + "\R" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M11", receiveDir  + "\S" + edit("999", MCLUST) + ".dat");   
    writePff_ExternalFile("EPMU1M30", receiveDir  + "\U" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M31", receiveDir  + "\V" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M32", receiveDir  + "\W" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M15", receiveDir  + "\X" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M09", receiveDir  + "\Y" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M17", receiveDir  + "\Z" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M33", receiveDir  + "\1" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M06", receiveDir  + "\2" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M34", receiveDir  + "\3" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M10", receiveDir  + "\4" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M35", receiveDir  + "\5" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M25", receiveDir  + "\6" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M37", receiveDir  + "\7" + edit("999", MCLUST) + ".dat");
    writePff_ExternalFile("EPMU1M01", receiveDir  + "\8" + edit("999", MCLUST) + ".dat");
    
    // Ajouter les modules ici
    
    writePff_ExternalFile("TASKS", tasksDir + "\T" + xFilenum + "_Review.dat");
    
    closePffFile(0, rh); //passing a list of households in "R" file as a paraemeter
    
    //running check ID
    runBatch(tempDir + "\GenReviewTasks.pff");
  end;

  //main function that makes decisions on routing code execution for currently loaded task  
  function taskRouter(optionId)
    if strip(TASK_TEMPLATENAME) = "HHAssign" then
      if optionId = 9 then
        removeAdditionalHh();
      elseif optionId < 99990 then
        onHhAssign(optionId - 10000);
      else
        createAdditionalHh(optionId - 99990);
      endif;
    elseif strip(TASK_TEMPLATENAME) = "ClustClose" then
      onClustClose();
    elseif strip(TASK_TEMPLATENAME) = "hh_int" then
      if optionId = 4 then
        reviewHhInt( 0);
      elseif optionId = 5 then
        reviewNotes();
      elseif optionId = 6 then
        reviewHhInt(1);
        compareVerifHhSchedule();
        populateReviewTasks(); //populating data review tasks. This will also concatenate interviewer data
      endif;

    elseif strip(TASK_TEMPLATENAME) = "mod19_int" then reviewIndInt("A",0);  // NAB
    elseif strip(TASK_TEMPLATENAME) = "mod16_int" then reviewIndInt("B",0);
    elseif strip(TASK_TEMPLATENAME) = "mod20_int" then reviewIndInt("C",0);
    elseif strip(TASK_TEMPLATENAME) = "mod08_int" then reviewIndInt("D",0);
    elseif strip(TASK_TEMPLATENAME) = "mod07_int" then reviewIndInt("E",0);
    elseif strip(TASK_TEMPLATENAME) = "mod21_int" then reviewIndInt("F",0);
    elseif strip(TASK_TEMPLATENAME) = "mod22_int" then reviewIndInt("G",0);
    elseif strip(TASK_TEMPLATENAME) = "mod23_int" then reviewIndInt("I",0);
    elseif strip(TASK_TEMPLATENAME) = "mod24_int" then reviewIndInt("J",0);
    elseif strip(TASK_TEMPLATENAME) = "mod26_int" then reviewIndInt("K",0);
    elseif strip(TASK_TEMPLATENAME) = "mod14_int" then reviewIndInt("L",0);
    elseif strip(TASK_TEMPLATENAME) = "mod12_int" then reviewIndInt("M",0);
    elseif strip(TASK_TEMPLATENAME) = "mod27_int" then reviewIndInt("N",0);
    elseif strip(TASK_TEMPLATENAME) = "mod28_int" then reviewIndInt("O",0);
    elseif strip(TASK_TEMPLATENAME) = "mod29_int" then reviewIndInt("P",0);
    elseif strip(TASK_TEMPLATENAME) = "mod13_int" then reviewIndInt("Q",0);
    elseif strip(TASK_TEMPLATENAME) = "mod18_int" then reviewIndInt("R",0);
    elseif strip(TASK_TEMPLATENAME) = "mod11_int" then reviewIndInt("S",0);   
    elseif strip(TASK_TEMPLATENAME) = "mod30_int" then reviewIndInt("U",0);
    elseif strip(TASK_TEMPLATENAME) = "mod31_int" then reviewIndInt("V",0);
    elseif strip(TASK_TEMPLATENAME) = "mod32_int" then reviewIndInt("W",0);
    elseif strip(TASK_TEMPLATENAME) = "mod15_int" then reviewIndInt("X",0);
    elseif strip(TASK_TEMPLATENAME) = "mod09_int" then reviewIndInt("Y",0);
    elseif strip(TASK_TEMPLATENAME) = "mod17_int" then reviewIndInt("Z",0);
    elseif strip(TASK_TEMPLATENAME) = "mod33_int" then reviewIndInt("1",0);
    elseif strip(TASK_TEMPLATENAME) = "mod06_int" then reviewIndInt("2",0);
    elseif strip(TASK_TEMPLATENAME) = "mod34_int" then reviewIndInt("3",0);
    elseif strip(TASK_TEMPLATENAME) = "mod10_int" then reviewIndInt("4",0);
    elseif strip(TASK_TEMPLATENAME) = "mod35_int" then reviewIndInt("5",0);
    elseif strip(TASK_TEMPLATENAME) = "mod25_int" then reviewIndInt("6",0);
    elseif strip(TASK_TEMPLATENAME) = "mod37_int" then reviewIndInt("7",0);
    elseif strip(TASK_TEMPLATENAME) = "mod01_int" then reviewIndInt("8",0);
    
    endif;
  end;
  
  
// *************************************************************

function SavCSD()
string xSD = "ABCDEFGHIJKLMNOPQRTSUVWXY",   SDdir  ;
numeric p = 1 , T= 0  ;

       // Sauvegarde des données dans la tablette
       
 SDdir = projectDir + backupDir + "\SavPauv\SupData" + edit("9999999999",int(publishdate()/10000 ));       
       
        if !dirExist(SDdir) then
          dircreate(SDdir + "\Receive");
        endif;
        
        filecopy(ReceiveDir + "\?" + edit("999", MCLUST) + "*", SDdir + "\Receive" );

  // Sauvegarde dans les unités
	do varying p=1 until p>=25  ;
	 
    if fileexist(xSD[p:1] + ":\SavPauv\Enq.txt") then

     SDdir = backupDir + "\SavPauv\SupData" + edit("9999999999",int(publishdate()/10000 ));       
       
        if !dirExist(SDdir) then
          dircreate(SDdir + "\Receive");
        endif;
        
        filecopy(ReceiveDir + "\?" + edit("999", MCLUST) + "*", SDdir + "\Receive" );

    endif ;
    
  enddo;
end;



function  SauveCE() ;
string xSD = "ABCDEFGHIJKLMNOPQRTSUVWXY",   SDdir  ;
numeric p = 1 , T= 0  ;
 
       // Sauvegarde des données dans la tablette 
 
        if !dirExist( projectDir + "\DataBackup\SavPauv\Receive") then  dircreate( projectDir + "\DataBackup\SavPauv\Receive"); endif;
        filecopy(ReceiveDir + "\?" + edit("999", MCLUST) + "*",  projectDir + "\DataBackup\SavPauv\Receive" ); 
        
        // crée le rep de la sauvegarde incrementale si elle n'existe pas
        
         SDdir =  projectDir + "\DataBackup\SavPauv\SupDataS" + edit("9999999999",int(publishdate()/10000 )); 
         if !dirExist( SDdir) then  dircreate(SDdir); endif;
         
         // Copier les fichier dans la sauvegarde incrementale
        filecopy(ReceiveDir + "\?" + edit("999", MCLUST) + "*", SDdir );
        
        
       
       // Sauvegarde incrémentale dans la clé 
			do varying p=1 until p>=25  ;     
			    if fileexist(xSD[p:1] + ":\SavPauv\Sup.txt") then
			     SDdir = xSD[p:1]+":\SavPauv" ;
			
			       // Dossier de saugvergade des données avant suppression
			        if !dirExist(SDdir + "\Receive") then  dircreate(SDdir + "\Receive"); endif;
			        filecopy(ReceiveDir + "\?" + edit("999", MCLUST) + "*", SDdir + "\Receive" ); 
			        
			         SDdir =SDdir + "\DataBackup\SupDataS" + edit("9999999999",int(publishdate()/10000 )); 
			         if !dirExist( SDdir) then  dircreate(SDdir); endif;
			         // Copier les fichier dans la sauvegarde incrementale de la clé
			        filecopy(ReceiveDir + "\?" + edit("999", MCLUST) + "*", SDdir );
			                   	
			    endif ;
		   enddo;
		   
		   // nettoyer le rep receive dir
		   
		   
end;

  
Function DropBox()
  	// numeric bDrives = split(getSystemDrives(removableOnly), ";");
  				
   // Transfer par DropBox au Bureau Central  				
  				
   // vérification du dropBox			
  if ! direxist(concat(repdrop,"\PAUV",edit("99",NumEquip))) then
    dircreate(concat(repdrop,"\PAUV",edit("99",NumEquip)));
  endif;
    // Deposer les données dans le répertoire de l'équipe	
    filecopy(concat(receiveDir,"\?",edit("999",MCLUST),".*") ,concat(repdrop,"\PAUV",edit("99",NumEquip))  );   
    
	    // Vérifier l'internet
	    if connection() then  //  connection(wifi) | connection(wifi) 
	      errmsg("Les données sont en cours de transfert au Bureau Central ");
	    else
	      errmsg("Pas d'internet, les données seront transférées dès que vous serez connectés. ");
	   endif;

     // Sauvegarde incrémental      
      SauveCE() ;
     
End;
  
  
  

  //Data synchronization with the central office
  function syncCentral()

    // vérification du dropBox
    
    if direxist(repdrop) then
       // envoyer les données
       DropBox();
    else
       errmsg(" DropBox n'a pas été configuré ") ;   
    endif;
    
    
End;
    
    // création du fichier Log de transmission
  
  function syncCentralRequired()
    //first checking if there are any files in the \receive folder
    numeric res = fileexist(receiveDir + "\*.*");
    
    if res then
      //checking the last sync date
      if fileexist(tempdir + "\last_sync.tmp") then
        setfile(f1, tempdir + "\last_sync.tmp");
        open(f1);
          string lastDate;
          if fileread(f1, lastDate) then
            numeric ld = tonumber(lastDate);
            res = sysdate() > ld;
          endif;
        close(f1);
      endif;
    endif;
  
    syncCentralRequired = res;
  end;
  
  //setting date marker after successful IFSS sync
  function setLastDateMarker()
    string ifssLog = tempdir + "\ifsslog.tmp";
    if readIfssLog(ifssLog) = 1001 then
      filedelete(tempdir + "\last_sync.tmp");
      setfile(f1, tempdir + "\last_sync.tmp", create);
      open(f1);
        filewrite(f1, "%d", sysdate());
      close(f1);
      filedelete(ifssLog);
    endif;
  end;
  
  //this function looks into the update folder and if there are files to update
  //updates the current system and creates update packages for interviewers
  function doUpdate()
    //deleting flag from previous update
    if fileexist(tempdir + "\update.flag") then
      errmsg(1300);
      filedelete(tempdir + "\update.flag");
      filedelete(tempdir + "\update.bat");
    endif;
  
    //creating update files list variable
    createFilesListVar("fl", updateSourceDir, updateDestDir, "*");
    
    //checking if there are files to update
    numeric fCount = tonumber(readEnviValue("fl.files.count"));
    
    if special(fCount) | !fCount then
      exit; //no files to update
    endif;
    
    //creating update flag file and adding it to the sync list
    setfile(f1, tempdir + "\update.flag", create);
    open(f1);
    filewrite(f1, "update flag");
    close(f1);

    string ee = "filerec fr;";
    ee = ee + makeText("fr.source = '%s\update.flag';", tempdir);
    ee = ee + makeText("fr.dest += '%s\update.flag';", tempdir);
    ee = ee + "fl.files += fr;";

    execenvi(ee);
    
    //création du packages des membres de l'équipe à synchroniser 
    numeric i;
    string shelf = "outgoing";
    do i = 1 while i <= teamMemberCount by 1
      if teamIds(i) <> tonumber(interviewerId) then
        addFilesToSync("fl", "Update", edit("99999", teamIds(i)), edit("99999", tonumber(interviewerId)), encrKey, shelf);
      endif;
    enddo;
    
    //updating and deleting update files
    setfile(f1, tempdir + "\update.bat", create);
    filedelete(f1);
    open(f1);
    filewrite(f1, "");
    filewrite(f1, "timeout 3 > NUL");
    filewrite(f1, 'xcopy "%s\*" "%s" /S /C /H /R /Y', updateSourceDir, updateDestDir);
    filewrite(f1, 'del /f /s /q "%s\*"', updateSourceDir);
    filewrite(f1, 'start "" "%s\run.lnk"', supervDir);
    close(f1);
    execsystem(tempdir + "\update.bat", normal, nowait);
    
    stop(-1);
  end;
  
  
  
 function VisCarteAD(batis)
	//Execution de google map
		string xkml eKML xrepGoo  ; 
		numeric ex=0 xIlot ;
		
if MCLUST =  1   then xIlot =  88  ; endif;
if MCLUST =  2   then xIlot =  115  ; endif;
if MCLUST =  3   then xIlot =  132  ; endif;
if MCLUST =  4   then xIlot =  189  ; endif;
if MCLUST =  5   then xIlot =  314  ; endif;
if MCLUST =  6   then xIlot =  330  ; endif;
if MCLUST =  7   then xIlot =  387  ; endif;
if MCLUST =  8   then xIlot =  651  ; endif;
if MCLUST =  9   then xIlot =  693  ; endif;
if MCLUST =  10   then xIlot =  722  ; endif;
if MCLUST =  11   then xIlot =  794  ; endif;
if MCLUST =  12   then xIlot =  839  ; endif;
if MCLUST =  13   then xIlot =  840  ; endif;
if MCLUST =  14   then xIlot =  875  ; endif;
if MCLUST =  15   then xIlot =  996  ; endif;
if MCLUST =  16   then xIlot =  997  ; endif;
if MCLUST =  17   then xIlot =  1075  ; endif;
if MCLUST =  18   then xIlot =  1137  ; endif;
if MCLUST =  19   then xIlot =  1157  ; endif;
if MCLUST =  20   then xIlot =  1215  ; endif;
if MCLUST =  21   then xIlot =  1392  ; endif;
if MCLUST =  22   then xIlot =  1419  ; endif;
if MCLUST =  23   then xIlot =  1631  ; endif;
if MCLUST =  24   then xIlot =  1658  ; endif;
if MCLUST =  25   then xIlot =  1875  ; endif;
if MCLUST =  26   then xIlot =  1962  ; endif;
if MCLUST =  27   then xIlot =  2115  ; endif;
if MCLUST =  28   then xIlot =  2283  ; endif;
if MCLUST =  29   then xIlot =  2414  ; endif;
if MCLUST =  30   then xIlot =  2443  ; endif;
if MCLUST =  31   then xIlot =  2453  ; endif;
if MCLUST =  32   then xIlot =  2524  ; endif;
if MCLUST =  33   then xIlot =  2599  ; endif;
if MCLUST =  34   then xIlot =  2625  ; endif;
if MCLUST =  35   then xIlot =  2651  ; endif;
if MCLUST =  36   then xIlot =  2668  ; endif;
if MCLUST =  37   then xIlot =  2835  ; endif;
if MCLUST =  38   then xIlot =  3072  ; endif;
if MCLUST =  39   then xIlot =  3131  ; endif;
if MCLUST =  40   then xIlot =  3178  ; endif;
if MCLUST =  41   then xIlot =  3248  ; endif;
if MCLUST =  42   then xIlot =  3281  ; endif;
if MCLUST =  43   then xIlot =  3378  ; endif;
if MCLUST =  44   then xIlot =  3392  ; endif;
if MCLUST =  45   then xIlot =  3568  ; endif;
if MCLUST =  46   then xIlot =  3710  ; endif;
if MCLUST =  47   then xIlot =  3739  ; endif;
if MCLUST =  48   then xIlot =  3741  ; endif;
if MCLUST =  49   then xIlot =  3831  ; endif;
if MCLUST =  50   then xIlot =  3847  ; endif;
if MCLUST =  51   then xIlot =  3881  ; endif;
if MCLUST =  52   then xIlot =  3893  ; endif;
if MCLUST =  53   then xIlot =  3998  ; endif;
if MCLUST =  54   then xIlot =  4030  ; endif;
if MCLUST =  55   then xIlot =  4076  ; endif;
if MCLUST =  56   then xIlot =  4271  ; endif;
if MCLUST =  57   then xIlot =  4294  ; endif;
if MCLUST =  58   then xIlot =  4513  ; endif;
if MCLUST =  59   then xIlot =  4788  ; endif;
if MCLUST =  60   then xIlot =  4835  ; endif;
if MCLUST =  61   then xIlot =  4864  ; endif;
if MCLUST =  62   then xIlot =  4915  ; endif;
if MCLUST =  63   then xIlot =  4924  ; endif;
if MCLUST =  64   then xIlot =  4967  ; endif;
if MCLUST =  65   then xIlot =  5068  ; endif;
if MCLUST =  66   then xIlot =  5089  ; endif;
if MCLUST =  67   then xIlot =  5209  ; endif;
if MCLUST =  68   then xIlot =  5361  ; endif;
if MCLUST =  69   then xIlot =  5366  ; endif;
if MCLUST =  70   then xIlot =  5371  ; endif;
if MCLUST =  71   then xIlot =  5373  ; endif;
if MCLUST =  72   then xIlot =  5378  ; endif;
if MCLUST =  73   then xIlot =  5493  ; endif;
if MCLUST =  74   then xIlot =  5501  ; endif;
if MCLUST =  75   then xIlot =  5543  ; endif;
if MCLUST =  76   then xIlot =  5565  ; endif;
if MCLUST =  77   then xIlot =  5569  ; endif;
if MCLUST =  78   then xIlot =  5661  ; endif;
if MCLUST =  79   then xIlot =  5712  ; endif;
if MCLUST =  80   then xIlot =  5724  ; endif;
if MCLUST =  81   then xIlot =  5736  ; endif;
if MCLUST =  82   then xIlot =  5776  ; endif;
if MCLUST =  83   then xIlot =  5784  ; endif;
if MCLUST =  84   then xIlot =  5796  ; endif;
if MCLUST =  85   then xIlot =  5884  ; endif;
if MCLUST =  86   then xIlot =  6069  ; endif;
if MCLUST =  87   then xIlot =  6131  ; endif;
if MCLUST =  88   then xIlot =  6159  ; endif;
if MCLUST =  89   then xIlot =  6189  ; endif;
if MCLUST =  90   then xIlot =  6297  ; endif;
if MCLUST =  91   then xIlot =  6403  ; endif;
if MCLUST =  92   then xIlot =  6455  ; endif;
if MCLUST =  93   then xIlot =  6623  ; endif;
if MCLUST =  94   then xIlot =  6742  ; endif;
if MCLUST =  95   then xIlot =  6821  ; endif;
if MCLUST =  96   then xIlot =  6883  ; endif;
if MCLUST =  97   then xIlot =  6989  ; endif;
if MCLUST =  98   then xIlot =  7369  ; endif;
if MCLUST =  99   then xIlot =  7696  ; endif;
if MCLUST =  100   then xIlot =  7800  ; endif;
if MCLUST =  101   then xIlot =  8283  ; endif;
if MCLUST =  102   then xIlot =  8373  ; endif;
if MCLUST =  103   then xIlot =  8457  ; endif;
if MCLUST =  104   then xIlot =  9012  ; endif;
if MCLUST =  105   then xIlot =  9149  ; endif;
if MCLUST =  106   then xIlot =  9189  ; endif;
if MCLUST =  107   then xIlot =  9211  ; endif;
if MCLUST =  108   then xIlot =  9270  ; endif;
if MCLUST =  109   then xIlot =  9279  ; endif;
if MCLUST =  110   then xIlot =  9310  ; endif;
if MCLUST =  111   then xIlot =  9341  ; endif;
if MCLUST =  112   then xIlot =  9391  ; endif;
if MCLUST =  113   then xIlot =  9556  ; endif;
if MCLUST =  114   then xIlot =  9667  ; endif;
if MCLUST =  115   then xIlot =  9723  ; endif;
if MCLUST =  116   then xIlot =  9736  ; endif;
if MCLUST =  117   then xIlot =  9746  ; endif;
if MCLUST =  118   then xIlot =  9847  ; endif;
if MCLUST =  119   then xIlot =  9851  ; endif;
if MCLUST =  120   then xIlot =  10121  ; endif;
if MCLUST =  121   then xIlot =  10159  ; endif;
if MCLUST =  122   then xIlot =  10179  ; endif;
if MCLUST =  123   then xIlot =  10218  ; endif;
if MCLUST =  124   then xIlot =  10407  ; endif;
if MCLUST =  125   then xIlot =  10420  ; endif;
if MCLUST =  126   then xIlot =  10431  ; endif;
if MCLUST =  127   then xIlot =  10745  ; endif;
if MCLUST =  128   then xIlot =  10918  ; endif;
if MCLUST =  129   then xIlot =  10961  ; endif;
if MCLUST =  130   then xIlot =  10963  ; endif;
if MCLUST =  131   then xIlot =  11018  ; endif;
if MCLUST =  132   then xIlot =  11154  ; endif;
if MCLUST =  133   then xIlot =  11517  ; endif;
if MCLUST =  134   then xIlot =  11825  ; endif;
if MCLUST =  135   then xIlot =  12066  ; endif;
if MCLUST =  136   then xIlot =  12286  ; endif;
if MCLUST =  137   then xIlot =  12289  ; endif;
if MCLUST =  138   then xIlot =  12504  ; endif;
if MCLUST =  139   then xIlot =  12701  ; endif;
if MCLUST =  140   then xIlot =  12736  ; endif;
if MCLUST =  141   then xIlot =  13001  ; endif;
if MCLUST =  142   then xIlot =  13042  ; endif;
if MCLUST =  143   then xIlot =  13208  ; endif;
if MCLUST =  144   then xIlot =  13447  ; endif;
if MCLUST =  145   then xIlot =  13963  ; endif;
if MCLUST =  146   then xIlot =  14101  ; endif;
if MCLUST =  147   then xIlot =  14104  ; endif;
if MCLUST =  148   then xIlot =  14369  ; endif;
if MCLUST =  149   then xIlot =  14561  ; endif;
if MCLUST =  150   then xIlot =  14877  ; endif;
if MCLUST =  151   then xIlot =  15018  ; endif;
if MCLUST =  152   then xIlot =  15025  ; endif;
if MCLUST =  153   then xIlot =  15125  ; endif;
if MCLUST =  154   then xIlot =  15393  ; endif;
if MCLUST =  155   then xIlot =  15508  ; endif;
if MCLUST =  156   then xIlot =  15690  ; endif;
if MCLUST =  157   then xIlot =  15731  ; endif;
if MCLUST =  158   then xIlot =  15972  ; endif;
if MCLUST =  159   then xIlot =  16200  ; endif;
if MCLUST =  160   then xIlot =  16310  ; endif;
if MCLUST =  161   then xIlot =  16317  ; endif;
if MCLUST =  162   then xIlot =  16384  ; endif;
if MCLUST =  163   then xIlot =  16511  ; endif;
if MCLUST =  164   then xIlot =  16680  ; endif;
if MCLUST =  165   then xIlot =  16873  ; endif;
if MCLUST =  166   then xIlot =  16959  ; endif;
if MCLUST =  167   then xIlot =  17015  ; endif;
if MCLUST =  168   then xIlot =  17157  ; endif;
if MCLUST =  169   then xIlot =  17241  ; endif;
if MCLUST =  170   then xIlot =  17249  ; endif;
if MCLUST =  171   then xIlot =  17272  ; endif;
if MCLUST =  172   then xIlot =  17322  ; endif;
if MCLUST =  173   then xIlot =  17328  ; endif;
if MCLUST =  174   then xIlot =  17433  ; endif;
if MCLUST =  175   then xIlot =  17449  ; endif;
if MCLUST =  176   then xIlot =  17517  ; endif;
if MCLUST =  177   then xIlot =  17790  ; endif;
if MCLUST =  178   then xIlot =  17847  ; endif;
if MCLUST =  179   then xIlot =  17912  ; endif;
if MCLUST =  180   then xIlot =  17927  ; endif;
if MCLUST =  181   then xIlot =  17996  ; endif;
if MCLUST =  182   then xIlot =  18152  ; endif;
if MCLUST =  183   then xIlot =  18185  ; endif;
if MCLUST =  184   then xIlot =  18479  ; endif;
if MCLUST =  185   then xIlot =  18530  ; endif;
if MCLUST =  186   then xIlot =  18849  ; endif;
if MCLUST =  187   then xIlot =  18960  ; endif;
if MCLUST =  188   then xIlot =  18992  ; endif;
if MCLUST =  189   then xIlot =  19035  ; endif;
if MCLUST =  190   then xIlot =  19097  ; endif;
if MCLUST =  191   then xIlot =  19199  ; endif;
if MCLUST =  192   then xIlot =  19202  ; endif;
if MCLUST =  193   then xIlot =  19300  ; endif;
if MCLUST =  194   then xIlot =  19411  ; endif;
if MCLUST =  195   then xIlot =  19435  ; endif;
if MCLUST =  196   then xIlot =  19458  ; endif;
if MCLUST =  197   then xIlot =  19522  ; endif;
if MCLUST =  198   then xIlot =  19634  ; endif;
if MCLUST =  199   then xIlot =  19648  ; endif;
if MCLUST =  200   then xIlot =  19679  ; endif;
if MCLUST =  201   then xIlot =  19698  ; endif;
if MCLUST =  202   then xIlot =  19819  ; endif;
if MCLUST =  203   then xIlot =  20015  ; endif;
if MCLUST =  204   then xIlot =  20102  ; endif;
if MCLUST =  205   then xIlot =  20224  ; endif;
if MCLUST =  206   then xIlot =  20332  ; endif;
if MCLUST =  207   then xIlot =  20368  ; endif;
if MCLUST =  208   then xIlot =  20435  ; endif;
if MCLUST =  209   then xIlot =  20524  ; endif;
if MCLUST =  210   then xIlot =  20611  ; endif;
if MCLUST =  211   then xIlot =  20754  ; endif;
if MCLUST =  212   then xIlot =  20755  ; endif;
if MCLUST =  213   then xIlot =  20944  ; endif;
if MCLUST =  214   then xIlot =  21077  ; endif;
if MCLUST =  215   then xIlot =  21117  ; endif;
if MCLUST =  216   then xIlot =  21124  ; endif;
if MCLUST =  217   then xIlot =  21227  ; endif;
if MCLUST =  218   then xIlot =  21336  ; endif;
if MCLUST =  219   then xIlot =  21386  ; endif;
if MCLUST =  220   then xIlot =  21765  ; endif;
if MCLUST =  221   then xIlot =  21841  ; endif;
if MCLUST =  222   then xIlot =  21973  ; endif;
if MCLUST =  223   then xIlot =  22174  ; endif;
if MCLUST =  224   then xIlot =  22274  ; endif;
if MCLUST =  225   then xIlot =  22677  ; endif;
if MCLUST =  226   then xIlot =  22745  ; endif;
if MCLUST =  227   then xIlot =  22990  ; endif;
if MCLUST =  228   then xIlot =  23198  ; endif;
if MCLUST =  229   then xIlot =  23809  ; endif;
if MCLUST =  230   then xIlot =  23905  ; endif;
if MCLUST =  231   then xIlot =  24077  ; endif;
if MCLUST =  232   then xIlot =  24310  ; endif;
if MCLUST =  233   then xIlot =  24720  ; endif;
if MCLUST =  234   then xIlot =  24868  ; endif;
if MCLUST =  235   then xIlot =  24892  ; endif;
if MCLUST =  236   then xIlot =  25184  ; endif;
if MCLUST =  237   then xIlot =  25365  ; endif;
if MCLUST =  238   then xIlot =  25522  ; endif;
if MCLUST =  239   then xIlot =  25702  ; endif;
if MCLUST =  240   then xIlot =  25720  ; endif;
if MCLUST =  241   then xIlot =  25901  ; endif;
if MCLUST =  242   then xIlot =  25952  ; endif;
if MCLUST =  243   then xIlot =  26167  ; endif;
if MCLUST =  244   then xIlot =  26304  ; endif;
if MCLUST =  245   then xIlot =  26499  ; endif;
if MCLUST =  246   then xIlot =  26662  ; endif;
if MCLUST =  247   then xIlot =  30001  ; endif;
if MCLUST =  248   then xIlot =  30006  ; endif;
if MCLUST =  249   then xIlot =  30010  ; endif;
if MCLUST =  250   then xIlot =  30022  ; endif;
if MCLUST =  251   then xIlot =  30023  ; endif;
if MCLUST =  252   then xIlot =  30029  ; endif;
if MCLUST =  253   then xIlot =  30034  ; endif;
if MCLUST =  254   then xIlot =  30035  ; endif;
if MCLUST =  255   then xIlot =  30036  ; endif;
if MCLUST =  256   then xIlot =  30037  ; endif;
if MCLUST =  257   then xIlot =  30038  ; endif;
if MCLUST =  258   then xIlot =  30040  ; endif;
if MCLUST =  259   then xIlot =  30047  ; endif;
if MCLUST =  260   then xIlot =  30052  ; endif;
if MCLUST =  261   then xIlot =  30062  ; endif;
if MCLUST =  262   then xIlot =  30064  ; endif;
if MCLUST =  263   then xIlot =  30066  ; endif;
if MCLUST =  264   then xIlot =  30070  ; endif;
if MCLUST =  265   then xIlot =  30073  ; endif;
if MCLUST =  266   then xIlot =  30075  ; endif;
if MCLUST =  267   then xIlot =  30079  ; endif;
if MCLUST =  268   then xIlot =  30098  ; endif;
if MCLUST =  269   then xIlot =  30099  ; endif;
if MCLUST =  270   then xIlot =  30100  ; endif;
if MCLUST =  271   then xIlot =  30101  ; endif;
if MCLUST =  272   then xIlot =  30103  ; endif;
if MCLUST =  273   then xIlot =  30108  ; endif;
if MCLUST =  274   then xIlot =  30112  ; endif;
if MCLUST =  275   then xIlot =  30113  ; endif;
if MCLUST =  276   then xIlot =  30115  ; endif;
if MCLUST =  277   then xIlot =  30116  ; endif;
if MCLUST =  278   then xIlot =  30119  ; endif;
if MCLUST =  279   then xIlot =  30121  ; endif;
if MCLUST =  280   then xIlot =  30126  ; endif;
if MCLUST =  281   then xIlot =  30127  ; endif;
if MCLUST =  282   then xIlot =  30129  ; endif;
if MCLUST =  283   then xIlot =  30130  ; endif;
if MCLUST =  284   then xIlot =  30136  ; endif;
if MCLUST =  285   then xIlot =  30137  ; endif;
if MCLUST =  286   then xIlot =  30138  ; endif;
if MCLUST =  287   then xIlot =  30140  ; endif;
if MCLUST =  288   then xIlot =  30146  ; endif;

		
if batis = 1 then	 xkml="C:\RDC123\Reference\Cartes\Parcelle\Ilot\Carto_parcelle_"+edit("99999",xIlot)+".kml"	; endif ;
if batis = 2 then	 xkml="C:\RDC123\Reference\Cartes\Batiment\Ilot\Carto_bati_Ilot_"+edit("99999",xIlot)+".kml"	; endif ;
if batis = 3 then	 xkml="C:\RDC123\Reference\Cartes\Menage\Ilot\Carto_menage_Ilot_"+edit("99999",xIlot)+".kml"	; endif ;

	   
	if Getos() < 20 then		
		//recherche l'installation de googleearth	

			if direxist("C:\Program Files (x86)\Google\Google Earth Pro\client") then xrepGoo ="C:\Program Files (x86)\Google\Google Earth Pro\client" ;  endif;
 			if direxist("C:\Program Files (x86)\Google\Google Earth\client") then xrepGoo ="C:\Program Files (x86)\Google\Google Earth\client" ;  endif;           
			if direxist("C:\Program Files\Google\Google Earth Pro\client") then xrepGoo ="C:\Program Files\Google\Google Earth Pro\client" ;  endif;   
			if direxist("C:\Program Files\Google\Google Earth\client") then xrepGoo ="C:\Program Files\Google\Google Earth\client" ;  endif;   
	
       eKML = maketext('"%s\googleearth.exe" " %s "',xrepGoo,xkml);
		 execsystem(eKML,maximized,nowait   );ex=1;		
	 endif ;
		
	end;


function verifdonnees(nMod)
    
    if nMod= 62 and fileexist(receiveDir  + "\H"+ edit("999",MCLUST) +".dat") then // Module Ménage
	  verifdonnees=1;  
	endif ;
	
	if nMod= 63 and fileexist(receiveDir  + "\8"+ edit("999",MCLUST) +".dat") then // Module 01
	  verifdonnees=1;
	endif ;
	
	if nMod= 64 and fileexist(receiveDir  + "\2"+ edit("999",MCLUST) +".dat") then // Module 6
	  verifdonnees=1;
	endif ;
	  
	if nMod= 65 and fileexist(receiveDir  + "\E"+ edit("999",MCLUST) +".dat") then // Module 7
	   verifdonnees=1;
	  
	endif ;
	
	if nMod= 66 and fileexist(receiveDir  + "\D"+ edit("999",MCLUST) +".dat") then // Module 8
	  verifdonnees=1;  
	endif ;
	
	if nMod= 67 and fileexist(receiveDir  + "\Y"+ edit("999",MCLUST) +".dat") then // Module 9
	  verifdonnees=1;  
	endif ;
		
	if nMod= 68 and fileexist(receiveDir  + "\4"+ edit("999",MCLUST) +".dat") then // Module 10
	   verifdonnees=1;  
	endif ;
		
	if nMod= 69 and fileexist(receiveDir  + "\S"+ edit("999",MCLUST) +".dat") then // Module 11
	   verifdonnees=1; 
	endif ;
		
	if nMod= 70 and fileexist(receiveDir  + "\M"+ edit("999",MCLUST) +".dat") then // Module 12
	   verifdonnees=1; 
	endif ;
	
	if nMod= 71 and fileexist(receiveDir  + "\Q"+ edit("999",MCLUST) +".dat") then // Module 13
	  verifdonnees=1;  
	endif ;
	
	if nMod= 72 and fileexist(receiveDir  + "\L"+ edit("999",MCLUST) +".dat") then // Module 14
	  verifdonnees=1;
	endif ;
		
	if nMod= 73 and fileexist(receiveDir  + "\X"+ edit("999",MCLUST) +".dat") then // Module 15
	  verifdonnees=1 ;
	endif ;
	
	if nMod= 74 and fileexist(receiveDir  + "\B"+ edit("999",MCLUST) +".dat") then // Module 16
	  verifdonnees=1;
	endif ;
		
	if nMod= 75 and fileexist(receiveDir  + "\Z"+ edit("999",MCLUST) +".dat") then // Module 17
	  verifdonnees=1;
	endif ;
	
	if nMod= 76 and fileexist(receiveDir  + "\R"+ edit("999",MCLUST) +".dat") then // Module 18
	  verifdonnees=1;
	endif ;
	
	if nMod= 77 and fileexist(receiveDir  + "\A"+ edit("999",MCLUST) +".dat") then // Module 19
	  verifdonnees=1;
	endif ;
	
	if nMod= 78 and fileexist(receiveDir  + "\C"+ edit("999",MCLUST) +".dat") then // Module 20
	  verifdonnees=1;
	endif ;
	
	if nMod= 79 and fileexist(receiveDir  + "\F"+ edit("999",MCLUST) +".dat") then // Module 21
	  verifdonnees=1;
	endif ;
	
	if nMod= 80 and fileexist(receiveDir  + "\G"+ edit("999",MCLUST) +".dat") then // Module 22
	  verifdonnees=1;
	endif ;
	
	if nMod= 81 and fileexist(receiveDir  + "\I"+ edit("999",MCLUST) +".dat") then // Module 23
	  verifdonnees=1;
	endif ;
		
	if nMod= 82 and fileexist(receiveDir  + "\J"+ edit("999",MCLUST) +".dat") then // Module 24
	   verifdonnees=1;
	endif ;
		
	if nMod= 83 and fileexist(receiveDir  + "\6"+ edit("999",MCLUST) +".dat") then // Module 25
	  verifdonnees=1; 
	endif ;
	
	if nMod= 84 and fileexist(receiveDir  + "\K"+ edit("999",MCLUST) +".dat") then // Module 26
	  verifdonnees=1;
	endif ;
		
	if nMod= 85 and fileexist(receiveDir  + "\N"+ edit("999",MCLUST) +".dat") then // Module 27
	  verifdonnees=1;
	endif ;
	
	if nMod= 86 and fileexist(receiveDir  + "\O"+ edit("999",MCLUST) +".dat") then // Module 28
	  verifdonnees=1;
	endif ;
		
	if nMod= 87 and  fileexist(receiveDir  + "\P"+ edit("999",MCLUST) +".dat") then // Module 29
	  verifdonnees=1;
	endif ;	
	
	if nMod= 88 and fileexist(receiveDir  + "\U"+ edit("999",MCLUST) +".dat") then // Module 30
	  verifdonnees=1;
	endif ;
	
	if nMod= 89 and fileexist(receiveDir  + "\V"+ edit("999",MCLUST) +".dat") then // Module 31
	  verifdonnees=1;
	endif ;
	
	if nMod= 90 and fileexist(receiveDir  + "\W"+ edit("999",MCLUST) +".dat") then // Module 32
	  verifdonnees=1;
	endif ;
	
	if nMod= 91 and fileexist(receiveDir  + "\1"+ edit("999",MCLUST) +".dat") then // Module 33
	  verifdonnees=1;
	endif ;
	
	if nMod= 92 and fileexist(receiveDir  + "\3"+ edit("999",MCLUST) +".dat") then // Module 34
	  verifdonnees=1;
	endif ;
	
	if nMod= 93 and fileexist(receiveDir  + "\7"+ edit("999",MCLUST) +".dat") then // Module 35
	  verifdonnees=1;
	endif ; 
	
	if nMod= 94 and fileexist(receiveDir  + "\7"+ edit("999",MCLUST) +".dat") then // Module 37
	  verifdonnees=1;
	endif ;  

end;	
 

function genCtrPFF(nMod)

  setFile(pffCont, tempDir + "\Controle.pff", create);

  open(pffCont);
  
  filewrite(pffCont, "[Run Information]");
  filewrite(pffCont, "Version=CSPro 6.3");
  filewrite(pffCont, "AppType=Batch");
	
  filewrite(pffCont, " ");
  	
  filewrite(pffCont, "[Files]");
  
  	if nMod= 62 then // Module Ménage
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module_Menage.bch");
	  filewrite(pffCont, "InputData=..\Receive\H"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	
	if nMod= 63 then // Module 01
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module36.bch");
	  filewrite(pffCont, "InputData=..\Receive\8"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	  
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	  
	endif ;
	
	
	if nMod= 64 then // Module 6
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module06.bch");
	  filewrite(pffCont, "InputData=..\Receive\2"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
  
	if nMod= 65 then // Module 7
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module07.bch");
	  filewrite(pffCont, "InputData=..\Receive\E"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	if nMod= 66 then // Module 8
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module08.bch");
	  filewrite(pffCont, "InputData=..\Receive\D"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	if nMod= 67 then // Module 9
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module09.bch");
	  filewrite(pffCont, "InputData=..\Receive\Y"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	
	if nMod= 68 then // Module 10
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module10.bch");
	  filewrite(pffCont, "InputData=..\Receive\4"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	
	if nMod= 69 then // Module 11
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module11.bch");
	  filewrite(pffCont, "InputData=..\Receive\S"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
	
	if nMod= 70 then // Module 12
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module12.bch");
	  filewrite(pffCont, "InputData=..\Receive\M"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
 	  filewrite(pffCont, "EPMU1M07=..\Receive\E"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
	if nMod= 71 then // Module 13
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module13.bch");
	  filewrite(pffCont, "InputData=..\Receive\Q"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	if nMod= 72 then // Module 14
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module14.bch");
	  filewrite(pffCont, "InputData=..\Receive\L"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
	if nMod= 73 then // Module 15
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module15.bch");
	  filewrite(pffCont, "InputData=..\Receive\X"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1M34=..\Receive\3"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	  
	endif ;
	
	
	
	if nMod= 74 then // Module 16
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module16.bch");
	  filewrite(pffCont, "InputData=..\Receive\B"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
	if nMod= 75 then // Module 17
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module17.bch");
	  filewrite(pffCont, "InputData=..\Receive\Z"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
	if nMod= 76 then // Module 18
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module18.bch");
	  filewrite(pffCont, "InputData=..\Receive\R"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1M07=..\Receive\E"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	if nMod= 77 then // Module 19
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module19.bch");
	  filewrite(pffCont, "InputData=..\Receive\A"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  
	endif ;
	
	if nMod= 78 then // Module 20
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module20.bch");
	  filewrite(pffCont, "InputData=..\Receive\C"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	if nMod= 79 then // Module 21
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module21.bch");
	  filewrite(pffCont, "InputData=..\Receive\F"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	
	if nMod= 80 then // Module 22
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module22.bch");
	  filewrite(pffCont, "InputData=..\Receive\G"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
	if nMod= 81 then // Module 23
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module23.bch");
	  filewrite(pffCont, "InputData=..\Receive\I"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
	if nMod= 82 then // Module 24
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module24.bch");
	  filewrite(pffCont, "InputData=..\Receive\J"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
		
	if nMod= 83 then // Module 25
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module25.bch");
	  filewrite(pffCont, "InputData=..\Receive\6"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	if nMod= 84 then // Module 26
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module26.bch");
	  filewrite(pffCont, "InputData=..\Receive\K"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	
	if nMod= 85 then // Module 27
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module27.bch");
	  filewrite(pffCont, "InputData=..\Receive\N"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	if nMod= 86 then // Module 28
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module28.bch");
	  filewrite(pffCont, "InputData=..\Receive\O"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	
	if nMod= 87 then // Module 29
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module29.bch");
	  filewrite(pffCont, "InputData=..\Receive\P"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
	
	if nMod= 88 then // Module 30
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module30.bch");
	  filewrite(pffCont, "InputData=..\Receive\U"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	
	if nMod= 89 then // Module 31
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module31.bch");
	  filewrite(pffCont, "InputData=..\Receive\V"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	
	if nMod= 90 then // Module 32
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module32.bch");
	  filewrite(pffCont, "InputData=..\Receive\W"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	endif ;
	
	
	if nMod= 91 then // Module 33
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module33.bch");
	  filewrite(pffCont, "InputData=..\Receive\1"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
	if nMod= 92 then // Module 34
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module34.bch");
	  filewrite(pffCont, "InputData=..\Receive\3"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
	
	{if nMod= 93 then // Module 35
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module35.bch");
	  filewrite(pffCont, "InputData=..\Receive\V"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;}
		
		
	if nMod= 94 then // Module 37
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module37.bch");
	  filewrite(pffCont, "InputData=..\Receive\7"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\Controle.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	endif ;
	
	
  filewrite(pffCont, " ");
  
  filewrite(pffCont, "[Parameters]");
  filewrite(pffCont, "ViewListing=Always");
  filewrite(pffCont, "ViewResults=Yes");
  filewrite(pffCont, "ListingWidth=80");
  filewrite(pffCont, "MessageWrap=No");
  filewrite(pffCont, "ErrmsgOverride=No");

 close(pffCont);

end ;

function entete()
 
  setFile(pffCont, tempDir + "\Controle.pff", create);

  open(pffCont);
  
  filewrite(pffCont, "[Run Information]");
  filewrite(pffCont, "Version=CSPro 6.3");
  filewrite(pffCont, "AppType=Batch");
	
  filewrite(pffCont, " ");
  	
  filewrite(pffCont, "[Files]");
  
end;


	
function ferme()	
  filewrite(pffCont, " ");
  
  filewrite(pffCont, "[Parameters]");
  filewrite(pffCont, "ViewListing=Always");
  filewrite(pffCont, "ViewResults=No");
  filewrite(pffCont, "ListingWidth=80");
  filewrite(pffCont, "MessageWrap=No");
  filewrite(pffCont, "ErrmsgOverride=No");

 close(pffCont);
end;

function execute()
	// EXECUTER LE PFF
	 execsystem('"' + csproDir + '\csbatch.exe" "' + tempDir + "\Controle.pff" + '"', normal, wait);
end ;


function genCtrTPFF()


if fileexist(concat("c:\RDC123\Receive\H",edit("999",MCLUST),".dat") ) then

  entete() ;  // Module ménage
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module_Menage.bch");
	  filewrite(pffCont, "InputData=..\Receive\H"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M000.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
	
	
  if fileexist(concat("c:\RDC123\Receive\8",edit("999",MCLUST),".dat") ) then
	 entete() ; // Module 01
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module36.bch");
	  filewrite(pffCont, "InputData=..\Receive\8"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M001.lst");
	  
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\2",edit("999",MCLUST),".dat") ) then
	 entete() ; // Module 6
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module06.bch");
	  filewrite(pffCont, "InputData=..\Receive\2"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M006.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat") ;
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\E",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 7
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module07.bch");
	  filewrite(pffCont, "InputData=..\Receive\E"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M007.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\D",edit("999",MCLUST),".dat") ) then		
	 entete() ; // Module 8
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module08.bch");
	  filewrite(pffCont, "InputData=..\Receive\D"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M008.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\Y",edit("999",MCLUST),".dat") ) then		
	 entete() ; // Module 9
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module09.bch");
	  filewrite(pffCont, "InputData=..\Receive\Y"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M009.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\4",edit("999",MCLUST),".dat") ) then		
	
	 entete() ; // Module 10
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module10.bch");
	  filewrite(pffCont, "InputData=..\Receive\4"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M010.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\S",edit("999",MCLUST),".dat") ) then		
	 entete() ; // Module 11
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module11.bch");
	  filewrite(pffCont, "InputData=..\Receive\S"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M011.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\M",edit("999",MCLUST),".dat") ) then		
	 entete() ;// Module 12
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module12.bch");
	  filewrite(pffCont, "InputData=..\Receive\M"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M012.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
 	  filewrite(pffCont, "EPMU1M07=..\Receive\E"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\Q",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 13
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module13.bch");
	  filewrite(pffCont, "InputData=..\Receive\Q"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M013.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\L",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 14
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module14.bch");
	  filewrite(pffCont, "InputData=..\Receive\L"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M014.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\X",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 15
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module15.bch");
	  filewrite(pffCont, "InputData=..\Receive\X"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M015.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1M34=..\Receive\3"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\B",edit("999",MCLUST),".dat") ) then	
	 entete() ;// Module 16
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module16.bch");
	  filewrite(pffCont, "InputData=..\Receive\B"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M016.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\Z",edit("999",MCLUST),".dat") ) then	
	 entete() ;// Module 17
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module17.bch");
	  filewrite(pffCont, "InputData=..\Receive\Z"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M017.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\R",edit("999",MCLUST),".dat") ) then	
	 entete() ;// Module 18
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module18.bch");
	  filewrite(pffCont, "InputData=..\Receive\R"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M018.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1M07=..\Receive\E"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\A",edit("999",MCLUST),".dat") ) then	
	 entete() ;// Module 19
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module19.bch");
	  filewrite(pffCont, "InputData=..\Receive\A"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M019.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\C",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 20
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module20.bch");
	  filewrite(pffCont, "InputData=..\Receive\C"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M020.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\E",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 21
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module21.bch");
	  filewrite(pffCont, "InputData=..\Receive\F"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M021.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\G",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 22
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module22.bch");
	  filewrite(pffCont, "InputData=..\Receive\G"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M022.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\I",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 23
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module23.bch");
	  filewrite(pffCont, "InputData=..\Receive\I"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M023.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\J",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 24
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module24.bch");
	  filewrite(pffCont, "InputData=..\Receive\J"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M024.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\6",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 25
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module25.bch");
	  filewrite(pffCont, "InputData=..\Receive\6"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M025.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\K",edit("999",MCLUST),".dat") ) then	
	 entete() ;// Module 26
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module26.bch");
	  filewrite(pffCont, "InputData=..\Receive\K"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M026.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\N",edit("999",MCLUST),".dat") ) then	
	 entete() ;// Module 27
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module27.bch");
	  filewrite(pffCont, "InputData=..\Receive\N"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M027.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\O",edit("999",MCLUST),".dat") ) then	
	 entete() ;// Module 28
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module28.bch");
	  filewrite(pffCont, "InputData=..\Receive\O"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M028.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\P",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 29
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module29.bch");
	  filewrite(pffCont, "InputData=..\Receive\P"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M029.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\U",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 30
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module30.bch");
	  filewrite(pffCont, "InputData=..\Receive\U"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M030.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\V",edit("999",MCLUST),".dat") ) then	
	 entete() ;// Module 31
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module31.bch");
	  filewrite(pffCont, "InputData=..\Receive\V"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M031.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\W",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 32
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module32.bch");
	  filewrite(pffCont, "InputData=..\Receive\W"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M032.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\I",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 33
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module33.bch");
	  filewrite(pffCont, "InputData=..\Receive\1"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M033.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\3",edit("999",MCLUST),".dat") ) then	
	 entete() ;// Module 34
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module34.bch");
	  filewrite(pffCont, "InputData=..\Receive\3"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M034.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
	ferme();
	execute() ;
 endif ;

  if fileexist(concat("c:\RDC123\Receive\V",edit("999",MCLUST),".dat") ) then	
	{ entete() ; // Module 35
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module35.bch");
	  filewrite(pffCont, "InputData=..\Receive\V"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M035.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H"+ edit("999",MCLUST) +".dat");
		ferme();
	   execute() ;
	   }
 endif ;

  if fileexist(concat("c:\RDC123\Receive\7",edit("999",MCLUST),".dat") ) then	
	 entete() ; // Module 37
	  filewrite(pffCont, "Application=C:\RDC123\Applications\Supervisor\Controle\Module37.bch");
	  filewrite(pffCont, "InputData=..\Receive\7"+ edit("999",MCLUST) +".dat");
	  filewrite(pffCont, "Listing=.\M037.lst");
	
	  filewrite(pffCont, "[ExternalFiles]");
	  filewrite(pffCont, "EPMU1=..\Receive\H" + edit("999",MCLUST) +".dat");
		ferme();
	execute() ;
 endif ;


concatlst = TempDir + "\Ensemble_" + edit("999",MCLUST) + ".lst";

fileConcat(concatlst, TempDir + "\M0" + "??.lst");

//execsystem('"C:\Program Files (x86)\CSPro 6.3/TextView.exe"'+' '+concatlst'');

execsystem('"' + 'C:\Program Files (x86)\CSPro 6.3/TextView.exe" "' + concatlst + '"');


else
 errmsg("La grappe n'a pas des données ménage %s",concat("..\Receive\H",edit("999",MCLUST),".dat") );	

endif;

end ;


function ErreurModule(nMod)

 IF nMod=61 THEN
 
 // GENERER LE PFF
 
	genCtrTPFF() ; 
	
 ELSE
	// GENERER LE PFF
	genCtrPFF(nMod) ;
	
	// EXECUTER LE PFF
	 execsystem('"' + csproDir + '\csbatch.exe" "' + tempDir + "\Controle.pff" + '"', normal, wait);
 ENDIF ;	 
	 
end;




function  VerifSDCE() ;
   string xSD = "ABCDEFGHIJKLMNOPQRTSUVWXY",   SDdir  ;
   numeric p = 1 , cle= 0  ;
 
   // Sauvegarde incrémentale dans la clé 
   do varying p=1 until p>=25  ;     
	if fileexist(xSD[p:1] + ":\SavPauv\Sup.txt") then
	   cle = 1 ;    	
	endif ;
    enddo;
    
	if cle = 0 then	 
		errmsg("LA CARTE SD N'EST PAS INSTALLEE ! ");  
	endif ;
		   
end;



PROC MENU_FF
preproc
  setfont(All,"Cambria",30);
  
  //Initializing global variables
  SetGlobalVariables();

  //Setting folders
  RepApp = projectDir + "\Applications";           
  RepDict = RepApp + "\Dicts";                     
  entryDir = RepApp + "\Entry";                    
  dataDir = setDir(projectDir + "\Data");          
  refDir = projectDir + "\Reference";              
  tasksDir = setDir(projectDir + "\Tasks");       
  syncDir = setDir(projectDir + "\Sync");         
  supervDir = RepApp + "\Supervisor";              
  workDir = setDir(projectDir + "\Work");          
  receiveDir = setDir(projectDir + "\Receive");    
  closedDir = setDir(projectDir + "\Closed");      
  updateSourceDir = setDir(projectDir + "\Update"); 
  updateDestDir = projectDir;                      
  
  tempDir = setDir(projectDir + "\Temp");
  utilsDir = projectDir + "\Utils";
  repdrop = "C:\Dropbox";                // Répertoire Dropbox
  
  
  encrKey = "X73R5W6FP7CQAY9H";           //!!encryption key  
  backupDir = "DataBackup";               //!! backup drive letter is automatically detected based on the presence of a backup directory
  removableOnly = 1;                      //!! default backup scans for removable drives only (set to 0 to include all accessable drives)
  supervAsInterv = 1;                     //!! supervisor can be an interviewer (set to 0 to restrict supervisor from interviewing)

  debugMode = 0;                          //!! Set to 1 to enable debug mode

  if debugMode then
    enableDebugMode(tempDir + "\debug.txt");
    writeDebugMessage("Demarrage de la session du Chef d'équipe ");
  endif;

  maxHhNum = 99;
  
  set behavior() exit on;

  //Getting User information from the BT MAC address
  btAddress = GetBtAddress();
  
// errmsg('message adresse %s',btAddress);  
  if !length(btAddress) then
    errmsg(0001);
    exitenvironment();
   // stop(-1);
  else
    UID = btAddress;
    if !loadcase(USERS_DICT, btAddress) then
      InterviewerId = "0";
      InterviewerName = "Inconnu";
      errmsg(0002, btAddress);
      exitenvironment();
      stop(-1);
    elseif UROLE <> 2 then
      errmsg(0003);
      exitenvironment();
      stop(-1);
    else
      InterviewerId = edit("ZZZZ9", UNUMBER);
      InterviewerName = UNAME;
    endif;
  endif;
  
  setTempFolder(tempDir); //informing container app about our temp folder
  
  fillTeam(); //filling in team index arrays

  //setting supervisor IFSS credentials  
  ifssUser = "s" + edit("999", tonumber(interviewerId)); //!!user ID for IFSS web service NAB
  ifssPassword = "EPMU1";                                //!!IFSS password
  
  //creating task list
  createTaskList("supTasks", refDir + "\SupervisorTempl.xml", tempDir + "\tOutput.tmp");
  
  //setting cache file for bluetooth synchronization
  setCache(syncDir + "\cache.sqlite");

  //Reading state array
  loadPreviousValues();

  //setting constraints on the menu  
  setMenuConstraints(40, 0, 0, 0);
  
  //setting successful IFSS sync date marker
  setLastDateMarker();
  
  //updating
  doUpdate();
  
PROC MCLUST  

onfocus

  if special(visualvalue($)) & state(1) <> 0 then
    $ = state(1);
  endif;

postproc

  // Vérifier l'existence de la SD
  VerifSDCE() ; 

  //Checking if cluster exists in the sample
  
  YCLUSTER = MCLUST;
  if !loadcase(CLUSTERS, YCLUSTER) then
    errmsg(0010, MCLUST);
    reenter;
  endif;
  
  //Checking if cluster is open
  hhAssignTaskFile = maketext("%s\T%05D%05D_Assign.dat", tasksDir, YCLUSTER, tonumber(interviewerId));
  clusterOperationsTaskFile = maketext("%s\T%05D%05D_ClusterOperations.dat", tasksDir, YCLUSTER, tonumber(interviewerId));
  reviewDataTaskFile = maketext("%s\T%05D%05D_Review.dat", tasksDir, YCLUSTER, tonumber(interviewerId));

  numeric x;
  if !fileexist(hhAssignTaskFile) then
    x = errmsg(1001, YCLUSTER)
      select("Oui", continue, "Non", continue);  
    if x = 1 then
      genTasks(); //generating tasks for the newly opened cluster
    else
      reenter;
    endif;
  endif;
  
  
  //setting menu constraints
  setMenuConstraints(40, -1, -1, -1);
  
  //constructing menu options //!!  
  clearMenu();
  addMenuOption("1:Tâches");                                                     
  numeric syncIndex = addMenuOption("2:Synchronisation avec les enquêteurs");
  
  
  //adding other interviewers
  numeric i, on;
  string optionsStr = "{";
  do i = 1 while i <= teamMemberCount by 1
    UID = teamIdIndex(teamIds(i));
    if loadcase(USERS_DICT, UID) then
      on = 10000 + UNUMBER;
      if teamIds(i) <> tonumber(InterviewerId) then //excluding current interviewer        
        addMenuOption(maketext(".%d:%d %s", on, UNUMBER, strip(UNAME)));
      endif;
      
      //also setting dynamic options for supervisor tasks
      if supervAsInterv | teamIds(i) <> tonumber(InterviewerId) then
        setOption("supTasks", on, maketext("%d %s", UNUMBER, strip(UNAME)), "", "");
        optionsStr = maketext("%s%d,", optionsStr, on);
      endif;
    endif;
  enddo;
  
  if length(optionsStr) > 1 then
    optionsStr = optionsStr[1:length(optionsStr) - 1] + ", 9}"; //adding options '9 - remove hosehold'
    setOptionsTree("supTasks", "HHAssign", 1, optionsStr);
  endif;
  
  if syncCentralRequired() then
    addMenuOption("3:textcolor=Red;;;Synchroniser avec le bureau central*");      //!T
  else
    addMenuOption("3:textcolor=LightGray;;;Synchroniser avec le bureau central"); //!T
  endif;  
  
  addMenuOption("5:textcolor=green;;;Visualiser le lieu de travail"); 
  
  do i = 1 while i <= 3 by 1
  
      if i = 1 then
        addMenuOption(maketext(".51:%s", "Parcelles"));
      endif;
      
      if i = 2 then //Exlure l'actuel enqueteur       
        addMenuOption(maketext(".52:%s", "Batis"));                
      endif;
      
      if i = 3 then //Exlure l'actuel enqueteur       
        addMenuOption(maketext(".53:%s", "Ménages"));                
      endif;      
      
      
  enddo; 
   
  numeric ErrIndex = addMenuOption("6:textcolor=green;;;Contrôle des données");     //!T

  
  
  //Ajout d'enqueteur
numeric j Option;
//  string optionsStr = "{";
  do i = 1 while i <= 2 by 1
      
      if i = 1 then       
        addMenuOption(maketext(".61: %s", "Pour l'ensemble des modules"));
      endif;
      
      if i = 2 then
      
      		addMenuOption(maketext(".60: %s", "Par Module"));
      		
	      do varying j = 1 until j > 33
	      		
		      	if j =1 then
		      		
		      		Option = j + 61;
		      		
		      		if verifdonnees(Option) then
		      			addMenuOption(maketext("..%d:%s", Option, "Module Ménage"));
		      		else
		      			Option = 60;
		        		addMenuOption(maketext("..%d:textcolor=LightGray;;; %s", Option, "Module Ménage"));
		        	endif;
		        endif;
		        
		        if j =2 then
		        	Option = j + 61;
		        
		        	if verifdonnees(Option) then
		        		addMenuOption(maketext("..%d:%s", Option, "Module " + edit("99",1)));
		        	else
		        		Option = 60;
		        		addMenuOption(maketext("..%d:textcolor=LightGray;;; %s", Option, "Module " + edit("99",1)));
		        	endif;
		        	
		        endif;
		        
		        if j in 3:32 then
		        	
		        	Option = j + 61;
		        	
		        	if verifdonnees(Option) then
		        		addMenuOption(maketext("..%d:%s", Option, "Module " + edit("99",j+3)));
		        	else
		        		Option = 60;
		        		addMenuOption(maketext("..%d:textcolor=LightGray;;; %s", Option, "Module " + edit("99",j+3)));
		        	endif
		        
		        endif;
		        
		        if j = 33 then
		        
		        	Option = j + 61;
		        
		        	if verifdonnees(Option) then
		        		addMenuOption(maketext("..%d:%s", Option, "Module " + edit("99",j+4)));
		        	else
		        		Option = 60;
		        		addMenuOption(maketext("..%d:textcolor=LightGray;;; %s", Option, "Module " + edit("99",j+5)));
		        	endif;
		        	
		        endif;
		        
	      enddo;
	      
	  endif;
      
  enddo;
  
  addMenuOption("7:textcolor=#467386;;;Quitter");        
 
    
  //Charger l'actuel enqueteur
  UID = btAddress;
  loadcase(USERS_DICT, btAddress);

  //saving cluster number to state array at index '1'
  state(1) = MCLUST;
  savePreviousValues();
  
  //Afficher le Menu
  while 1 do
    setMenuColors(syncIndex); //setting sync buttons colors based on sync status
    x = showMenu("Choisir une option"); //
    if x = 1 then //tasks
      populateReviewTasks(); //populating data review tasks. This will also concatenate interviewer data
      while 1 do    
        numeric x1 = showTasks();
        if x1 = 0 then break; endif;
        taskrouter(x1);
        backupTasks();
      enddo;
    elseif x = 3 then //synchronizing with central office
      syncCentral();
    elseif x = 4  | x = 9999 then //picking another cluster
      reenter;
    
    elseif x = 51 then // executer le kml de la grappe
   
        VisCarteAD(1);
    
     elseif x = 52 then // executer le kml de la grappe
   
        VisCarteAD(2);
        
	 elseif x = 53 then // executer le kml de la grappe
   
        VisCarteAD(3);
           
    
    elseif x in 61:94 then // contrôle des données      
    	  ErreurModule(x);    
          
    elseif x = 7 then //exit
      exitenvironment();
      stop(-1);
    elseif x > 10000 then //sync
      btSync(x - 10000);
      
    endif;
  enddo;
