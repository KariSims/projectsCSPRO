{Application 'CFCRTM' logic file generated by CSPro}
PROC GLOBAL

//set explicit;
{ Definitions of working variables }
array alpha(8) KishGrid(10);	   { Grid used for selection of child for child discipline module }
alpha(26) alphavar;				   { Alpha working variable used in checking alpha vars }
alpha(26) alphanew;                { Alpha working variable used in checking alpha vars }
alpha(62) alphalst;                { The alphabet }
array codes(50);                   { Array used for creating line numbers of household members sleeping under mosquito net}
array alpha(50) labels(50);        { Array used for creating names of household members sleeping under mosquito net} 
alpha(40) yname, ynamehh, tmpname; { List of names for questions }
alpha(900) strnotes;               { for editnote at the end of the interview }
alpha(40) worklabel;               { Alpha variable to get customize text for questions }

file FichSaPart;
string xED5A,xED10A,xED16A,vcom,strpart,Name_rech;

numeric inEntry;                   
numeric addmode,qmark,totlen,aok,alphsize,
  maxmem, maxnet, hhnum,
  minage, maxage, minab, minam, mminage, mmaxage,
  chhlth, chlabl, chlabu, mindi, cln, psu, err, dd, ss, ddw,
  di, diwm, dich, xline, xwomen, xchild,
  udob, ldob, ldobfc, udobfc, ldoblc, udoblc, ldofm, udofm,
  hwsex, hwage, hwerr, birthd, birthm, birthy, age, xweight, xheight,
  lastdig,
  a, e, i, j, l, lx, n, t, x, y, found, net,rp,
  xwc, xcc, cdline, kount, opid ;
  
numeric   hhn,xintnum,xsupnum,xmodcent,xrvisit,xmodify,xpartial,xentryhw,xverif;
numeric   DB, comply, verific, nopartflag;
numeric   qhMoreCount;

// sauvegarde des données 
Function sav()
	savepartial();
end;


{ function to clear codes and labels for household members }
function clean_labels();
	do i = 1 while i <= 30 by 1
	  codes(i)  = notappl;
	  labels(i) = "";
	enddo;
end;
function valid(xvar);
  valid = (!special(xvar) and xvar < 96)
end;
{--------------------------------------------}
Function rech_AS()
  t=0; i=1; 
      setfile( FichSaPart,"C:\ENQBASE\CFCRTM\AS.txt") ;  
	     if Filesize( FichSaPart ) > 0 then
		     while FileRead( FichSaPart, strpart ) do
		          if tonumber(strpart[1:2]) = HH67 then  
                  codes(i)=tonumber(strpart[3:2]);
                  labels(i)=strip(strpart[5:50]);
		               if HH68=tonumber(strpart[3:2]) then
		               vcom=strip(strpart[5:50]);
		               endif;
                  i=i+1;
		          endif ;
		      enddo;
          endif ;
         close( FichSaPart );
end;

Function rech_Village()
  t=0; i=1; 
      setfile( FichSaPart,"C:\ENQBASE\CFCRTM\Village.txt") ;  
	     if Filesize( FichSaPart ) > 0 then
		     while FileRead( FichSaPart, strpart ) do
		          if tonumber(strpart[1:2]) = HH67 & tonumber(strpart[3:2]) = HH68 then  
                  codes(i)=tonumber(strpart[5:2]);
                  labels(i)=strip(strpart[7:50]);
		               if HH69=tonumber(strpart[5:2]) then
		               vcom=strip(strpart[7:50]);
		               endif;
                  i=i+1;
		          endif ;
		      enddo;
          endif ;
         close( FichSaPart );
end;
{--------------------------------------------}
{Bluetooth function}

function BLTCF()

	if !direxist("C:\ENQBASE\temp") then
	dircreate("C:\ENQBASE\temp");
	endif;
	filecopy("C:\ENQBASE\CFCRTMdata\*.*","C:\ENQBASE\temp");
 	
	if syncconnect(Bluetooth) = 1 then	  
	  syncfile(PUT,"../temp/*.*","/Sync");
	  syncdisconnect();	
	endif;    

end;


function checknet(xvar, alpha(8) xvarname, curnet);
  e = 0;
  n = tonumber(xvarname[length(strip(xvarname)):1]);  { Gets the TN15_x number, e.g. TN15_2 returns 2 }
  if xvar = 90 then
    if n = 1 & TN10 = 1 then
      e=errmsg(0205);
    endif;
  elseif xvar < 90 then
    if xvar > HH48 then	{ Greater than number of HH members }
      e=errmsg(0201,xvar,HH48);
    else
      { Is member already listed, possibly under another net }
      found = 0;
      if xvar <> 0 then
        do net = 1 while !found & net <= curnet
          if !found & (net < curnet | n < 1) & TN15_1(net) = xvar then found = 1 endif;
          if !found & (net < curnet | n < 2) & TN15_2(net) = xvar then found = 1 endif;
          if !found & (net < curnet | n < 3) & TN15_3(net) = xvar then found = 1 endif;
          if !found & (net < curnet | n < 4) & TN15_4(net) = xvar then found = 1 endif;
        enddo;
      endif;
      if found then
        e=errmsg(0204,xvar);
      endif;
      { check if person slept in HH last night }
      if xvar <> 0 then
       if HL7(xvar) <> 1 then
         e=errmsg(0203,xvar,HL7(xvar));
       endif;
      endif;
    endif;
  endif;
  checknet = e;
end;



PROC MICS6HH_FF

PROC HH

preproc

numeric blt=accept("Voulez-vous envoyer les données ?","Oui,Envoyé","Non");
if blt=1 then
	BLTCF();
endif;
PROC HH2
if !HH2>0 then
	errmsg(0019);
	reenter;
endif;
PROC HH5D

preproc

//if HH5Y in 2017:2019 and HH5M in 1:12 and HH5D in 1:31 then

if HH5D in 1:31 and  HH5M in 1:12 and  HH5Y in 2017:2108 then
   move to HH66;
endif;

if (!xmodcent | xverif) & !xmodify then
  HH5D = sysdate( "DD" );
  HH5M = sysdate( "MM" );
  HH5Y = sysdate( "YYYY" );
endif;

if special(visualvalue($)) then
    if HH5D = notappl then HH5D = sysdate( "DD" );endif;
    if HH5M = notappl then HH5M = sysdate( "MM" );endif;
    if HH5Y = notappl then HH5Y = sysdate( "YYYY" );endif;
  endif;
PROC HH5M

PROC HH5Y
// Modify the following RECODE statement to include survey fieldwork dates
recode		 HH5Y  :     HH5M        : HH5D => err;
   	2017,2019 : 1,3,5,7,8,10,12 : 1-31 => 0;
   	2017,2019 : 4,6,9,11        : 1-30 => 0;
   	2017,2019 : 2               : 1-28 => 0;
         	       :                 :      => 1;
endrecode;
if err then
  {{+EN} errmsg(0012, 'Problem with Day/Month/Year combination');         {EN+}}

  {FR} errmsg(0012, 'Problème avec la combinaison jour/mois/année');    {FR}
  
  stop(-1);
endif;
di = cmcode(HH5M,HH5Y);
PROC HH11H

preproc
  if special(visualvalue($)) then
    x = systime();
    if HH11H = notappl then HH11H = int(x / 10000);endif;
    if HH11M = notappl then HH11M = int(x / 100) % 100;endif;
  endif;
PROC HH67
preproc
If (HH66=1) then setvalueset(HH67,HH67_VS1); endif;
If (HH66=2) then setvalueset(HH67,HH67_VS2); endif;
If (HH66=3) then setvalueset(HH67,HH67_VS3); endif;
If (HH66=4) then setvalueset(HH67,HH67_VS4); endif;
PROC HH68
preproc
clean_labels();
onfocus
rech_AS();

setvalueset(@getsymbol(),codes,labels);
setcapturetype($,3);
PROC HH69
preproc
clean_labels();
onfocus
rech_Village();

setvalueset(@getsymbol(),codes,labels);
setcapturetype($,3);
PROC HH12
if $ <> 1 then
   skip to HH47;
endif;

PROC MODHX_FORM
postproc
for i in FORMHX_ROSTER
  { Check the spouse of head of household is of opposite sex }
  if HX3 = 2 and HX4 = HX4(1) then
    errmsg(0071,HX2,i,HX2(1))
      {{+EN} select ("relationship of husband / wife",HX3,"gender of household head",HX4(1), "sex of the husband / wife", HX4); {EN+}}
      {FR} select ("relation de mari/femme",HX3,"Sexe du chef de ménage",HX4(1), "Sexe du mari/femme", HX4);                  {FR}
      
  endif;
enddo;

{ store household head name to use in dictionary postproc }
ynamehh = HX2(1);
{  if !xmodcent then 
	updthhassgn(77); {update partially saved HH}
  endif;	}	
PROC FORMHX_ROSTER
postproc
for i in FORMHX_ROSTER
  { Check the spouse of head of household is of opposite sex }
  if HX3 = 2 and HX4 = HX4(1) then
    errmsg(0071,HX2,i,HX2(1))
      {{+EN} select ("relationship of husband / wife",HX3,"gender of household head",HX4(1), "sex of the husband / wife", HX4); {EN+}}
      {FR} select ("relation de mari/femme",HX3,"Sexe du chef de ménage",HX4(1), "Sexe du mari/femme", HX4);                  {FR}
      
  endif;
enddo;

{ store household head name to use in dictionary postproc }
ynamehh = HX2(1);
{  if !xmodcent then 
	updthhassgn(77); {update partially saved HH}
  endif;	}	
PROC HX1

preproc
 if addmode then
 	savepartial ();
 endif;	
 $ = curocc ();
noinput;
PROC HX2

preproc
if curocc(FORMHX_ROSTER) = 1 and !xmodcent and !xmodify and !xmodify and !xpartial then
   $ = HHNAME;
endif;

postproc
if length(strip(HX2))<3 then
	errmsg("Nom Incorrect");
	reenter;
endif;
PROC HX3

{onfocus
  if curocc() = 1 then
    clear_labels();
    codes(0) = 1;
    {{+EN} labels(0) = "Head  " {EN+}}
    {FR} labels(0) = "Chef  " {FR}
    
  endif;}

postproc
{ Head of household must be on first line }
if ($ = 1) & (HX1 <> 1) then
  errmsg(0070);
  reenter HX3(curocc());
endif;

PROC HX4

postproc
 if HX1 > 1 & HX3 =2 & $ = $(1) then
    errmsg( 0060, HX2, getlabel( $, $ ), HX2(1), getlabel( $, $(1) ) )
     {{+EN} select( "Sex of spouse/partner", $, "Sex of head", $(1),  "Continue", continue );                                 {EN+}}
     {FR} select( "Sexe du conjoint/partenaire", $, "Sexe du chef de ménage", $(1),  "Continuer", continue );               {FR}
                                 
    reenter;
  endif;

  rp = HX3;
  n  = HX4;
  if HX3 in 6,7 & count( FORMHX_ROSTER where HX3 = rp & HX4 = n ) >= 2 then
    errmsg( 0061, getlabel(HX3, rp), HX4, getlabel(HX4, n) );
    reenter;
  endif;
PROC HX0

postproc
{if $=1 then
  advance to HX1;
endif;}


if $ <> 1 then
  endgroup
endif;
PROC HH48
preproc
$ = totocc(FORMHX_ROSTER);
PROC FORMHL_ROSTER
preproc
for i in FORMHX_ROSTER
  HL1(i) = HX1(i);
  HL2(i) = HX2(i);
  HL3(i) = HX3(i);
  HL4(i) = HX4(i);
enddo;

postproc
for i in FORMHL_ROSTER

  { Check that HH member identified by HL14 could be child's mother }
  if HL14 >= 1 then
    if HL4(HL14) <> 2 or HL6(HL14) < HL6+(minab/12) then
      errmsg(0082,i,HL4(HL14),HL6(HL14), {{+EN} "Mother" {EN+}} {FR} "Mère" {FR} , "HL14",HL14);
    endif;
  endif;

  { Check that HH member identified by HL18 could be child's father }
  if HL18 >= 1 then
    if HL4(HL18) <> 1 or HL6(HL18) < HL6+(minab/12) then
      errmsg(0082,i,HL4(HL18),HL6(HL18),  {{+EN} "Father" {EN+}} {FR} "Père" {FR} , "HL18",HL18);
    endif;
  endif;

  { Check the spouse of head of household is of opposite sex }
  if HL3 = 2 and HL4 = HL4(1) then
    errmsg(0071,HL2,i,HL2(1));

  { Check children of head of household are at least 12 years younger }
  elseif HL3 = 3 and HL6(1) < HL6+(minab/12) then
    errmsg(0072,minab/12,i);

  { Check grandchildren of head of household are at least 24 years younger }
  elseif HL3 = 5 and HL6(1) < HL6+2*(minab/12) then
    errmsg(0073,2*minab/12,i);

  { Check parents of head of household are at least 12 years older }
  elseif HL3 = 6 and HL6(1)+(minab/12) > HL6 then
    errmsg(0074,minab/12,i);
  endif;
enddo;

{PROC FORMHL_ROSTER
preproc
$ = totocc(FORMHX_ROSTER);}

PROC HL1

preproc
 if addmode then
    savepartial();
 endif;

  if curocc(FORMHL_ROSTER) > HH48 then
    endgroup
  endif;

//$=HX1(curocc());
PROC HL2
PREPROC
noinput;
PROC HL6

postproc

if $ = notappl or $ = missing then
   errmsg (0031);
   reenter;
endif;

  { Check the head of household is of age 15 or above }
  if HL3 = 1 and HL6 < 15 then
    errmsg(0075,HL1,HL6);
  endif;

if !(HL5M in 98,missing) & !(HL5Y in 9998,missing) then
      db = cmcode(HL5M, HL5Y);  {Century month code for date of birth}
      di = cmcode(HH5M, HH5Y);  {Century month code for date of interview}
      comply=int((di-db)/12);

      if comply > 95 then comply = 95; endif;
     if $ <> comply & $ <> comply - (HL5M = HH5M) then {If month of interview is the same as month of birth, allowing one year less}
         errmsg(0030);
         reenter;
      endif;

elseif (HL5M in 98,99) and HL5Y <= HH5Y then
      db = cmcode(1 , HL5Y);
      di = cmcode(HH5M, HH5Y);
      comply=int((di-db)/12);
      if comply = 95 then comply = 95; endif;
      if $ <> comply  then
        errmsg(0030);
        reenter;
     endif;
endif;
PROC HL8

preproc
if (HL4 = 2) and (HL6 in 15:49) then
	  HL8 = HL1;
	else
	  HL8 = 0;
endif;
PROC HL10
PREPROC
if not (HL6 in 0:4) then
  HL10 = 0;
else
  HL10 = HL1;
endif;
PROC HL11

preproc
if HL6 <= 17 then
 	$ = 1
else 
	$ = 2;
	skip to next HL1;
endif;
  


PROC HL12

postproc

if HL12 <> 1 then
  skip to HL16;
endif;
PROC HL13

preproc
if HL11 in 2,8 then
  skip to HL16
endif;

postproc
if $ <> 1 then
  skip to HL16
endif;
PROC HL14

onfocus
  clean_labels();
  j = 0;
  do i = 1 while i <= HH48
    if HX4(i) = 2 & (i > curocc() | HL6(i) in HL6+12:98,missing,notappl) then
      codes(j)  = HX1(i);
      labels(j) = HX2(i);
      j = j + 1;
    endif;
  enddo;
  SetValueSet( @GetSymbol(), codes, labels );
	setcapturetype($,3);

postproc
if HL14 >= 1 then
  if valid(HL14) and HL14 > HH48 then
    errmsg(0080,{{+EN} "Mother's"{EN+}} {FR} "Mère" {FR} ,"HL14",HL14,HH48);
    reenter;
  elseif HL14 = HL1 then
    errmsg(0081,{{+EN} "Mother's" {EN+}} {FR} "Mère" {FR} ,"HL14",HL14,HL1);
    reenter;
  endif;
endif;
PROC HL16

if $ <> 1 then
  skip to HL20
endif;

if HH48=1 then
	endgroup;
endif;
PROC HL17

if $ <> 1 then
  skip to HL20
endif;  
PROC HL18

onfocus
  clean_labels();
  j = 0;
  do i = 1 while i <= HH48
    if HX4(i) = 1 & (i > curocc() | HL6(i) in HL6+12:98,missing,notappl) then
      codes(j)  = HX1(i);
      labels(j) = HX2(i);
      j = j + 1;
    endif;
  enddo;
  SetValueSet( @GetSymbol(), codes, labels );
	setcapturetype($,3);
PROC HL20

preproc
  set attributes (HL20) native;
  if HL14 > 0 then
  	$ = HL14;
  	set attributes (HL20) protect;
  endif;  	

onfocus
  clean_labels();
  j = 0;
  do i = 1 while i <= HH48
    if (i > curocc() | HL6(i) in HL6+12:98,notappl) then
      codes(j)  = HX1(i);
      labels(j) = HX2(i);
      j = j + 1;
      
    endif;
      codes(j)  = 90;
      labels(j) = "PERSONNE";
  enddo;
{  
  if HL6 >= 15 then  
    codes(j)  = 90;
    {{+EN} labels(j) = "No one";   {EN+} }

    {FR} labels(j) = "Personne"; {FR} 
    {{SP} labels(j) = "Sin cuidador principal"; {SP}} 
    {{RU} labels(j) = "Personne"; {RU}} 
    {{AR} labels(j) = "Personne"; {AR}} 
    {{CS} labels(j) = "Personne"; {CS}} 
    j = j + 1;
  endif;}
  SetValueSet( @GetSymbol(), codes, labels );
	setcapturetype($,3);
PROC FORMED_ROSTER
preproc
for i in FORMHX_ROSTER
  ED1(i)  = HX1(i);
  ED2(i)  = HX2(i);
  ED2A(i) = HL6(i); 

  ED3(i) = 2;
  if HL6(i) >= 3 then
    ED3(i) = 1; 
  endif;  

enddo;
PROC ED1

preproc
  if addmode then
    savepartial();
  endif;

if curocc(FORMED_ROSTER) > HH48 then
  endgroup
endif;

if inEntry then
  do i = 1 while i <= maxmem
    if i <= HH48 then
      ED1(i) = i;
    else
      ED1(i) = notappl;
    endif;
  enddo;
endif;
PROC ED2
PREPROC
noinput;
PROC ED3
preproc
if HL6(ED1)>= 3 then
  ED3 = 1
else 
  ED3 = 2    
endif;  
PROC ED4

preproc
if ED3 = 2 then
  skip to next ED1
endif;

postproc
if $ <> 1 then
  skip to next ED1;
endif; 
PROC ED5A

if $ = 0 then
  skip to ED7;
endif;



//********************  NAB DRC

// Revise following RECODE statement to be country-specific
recode ED5A : HL6(ED1)      => err; { Fix maximum grade/year for each possible level }
           10 : 5-99        => 0;   { Primary                                           }
           20 : 11-99       => 0;   { Lower secondary1                                   }
           31 : 13-99		=> 0;   { Upper secondary2 general                             }
           32 : 13-99		=> 0;   { Upper secondary2 technique                            }
           33 : 13-99		=> 0;   { Upper secondary2 professionnel                          }
           34 : 13-99		=> 0;   { Upper secondary2 art et metier                       }
           40 : 16-99       => 0;   { Higher                                            }
           98 :             => 0;   { DK level                                          }
           99 :             => 0;   { Missing level                                     }
             :              => 1;
endrecode;

{{+EN}if err then
  errmsg(0103) select( "Highest level",ED5A, 
                       "Age", ED5A,
                       "Continue", continue );}
                       

{FR}if err then
  errmsg(0103) select( "Le plus haut niveau",ED5A, 
                       "Age ", ED5A,
                       "Continuer", continue );
endif;{FR}
xED5A=getlabel($,$);
PROC ED5B

// Revise following RECODE statement to be country-specific
recode ED5A : $                  => err; { Fix maximum grade/year for each possible level }
          : 96,97,98,99          => 0;   { Other,Inconsistent, missing, DK Grade/Year        }
           10 : 1-6              => 0;   { Primary                                           }
           20 : 1-2              => 0;   { Lower secondary1                                   }
           31 : 1-4				 => 0;   { Upper secondary2 general                             }
           32 : 1-4				 => 0;   { Upper secondary2 technique                            }
           33 : 1-3				 => 0;   { Upper secondary2 professionnel                          }
           34 : 1-2				 => 0;   { Upper secondary2 art et metier                       }
           40 : 1-8              => 0;   { Higher                                            }
           98 :                  => 0;   { DK level                                          }
           99 :                  => 0;   { Missing level                                     }
             :                   => 1;
endrecode;

{{+EN}if err then
  errmsg(0090) select( "Highest level",ED5A, 
                       "Grade", $,
                       "Continue", continue );}
                       

{FR}if err then
  errmsg(0090) select( "Le plus haut niveau",ED5A, 
                       "Classe/annee", $,
                       "Continuer", continue );
endif;{FR}

if $ = 98 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to ED7;
   endif;
endif;



//********************  NAB DRC

// Revise following RECODE statement to be country-specific
recode ED5A : ED5B : HL6(ED1)      => err; { Fix maximum grade/year for each possible level }
           10 : 1  : 5-99     => 0;   { Primary                                           }
           10 : 2   :6-99     => 0;   { Primary                                           }
           10 : 3	:7-99     => 0;   { Primary                                           }
           10 : 4	:8-99     => 0;   { Primary                                           }           
           10 : 5	:9-99     => 0;   { Primary                                           }
           10 : 6	:10-99    => 0;   { Primary                                           }
                                 
           20 : 1	: 11-99   => 0;   { Lower secondary1                                  }
           20 : 2	: 12-99   => 0;   { Lower secondary1                                  }           
          
           31 : 1	:  13-99	=> 0;   { Upper secondary2 general                        }
           31 : 2	:  14-99	=> 0;   { Upper secondary2 general                        }          
           31 : 3	:  15-99	=> 0;   { Upper secondary2 general                        }           
           31 : 4	:  16-99	=> 0;   { Upper secondary2 general                        }           
           
           32 : 1	:  13-99		=> 0;   { Upper secondary2 technique                  }
           32 : 2	:  14-99		=> 0;   { Upper secondary2 technique                  }           
           32 : 3	:  15-99		=> 0;   { Upper secondary2 technique                  }           
           32 : 4	:  16-99		=> 0;   { Upper secondary2 technique                  }           
           
           33 : 1	:  13-99		=> 0;   { Upper secondary2 professionnel              }
           33 : 2	:  14-99		=> 0;   { Upper secondary2 professionnel              }
           33 : 3	:  15-99		=> 0;   { Upper secondary2 professionnel              }         
           
           34 : 1	:  13-99		=> 0;   { Upper secondary2 art et metier              }
           34 : 2	:  14-99		=> 0;   { Upper secondary2 art et metier              }
           
           40 : 1	:  16-99       => 0;   { Higher                                       }
           40 : 2	:  17-99       => 0;   { Higher                                       }
           40 : 3	:  18-99       => 0;   { Higher                                       }
           40 : 4	:  19-99       => 0;   { Higher                                       }
           40 : 5	:  20-99       => 0;   { Higher                                       }
           40 : 6	:  21-99       => 0;   { Higher                                       }
           40 : 7	:  22-99       => 0;   { Higher                                       }
           40 : 8	:  23-99       => 0;   { Higher                                       }
           
           98 :     :        => 0;   { DK level                                          }
           99 :      :       => 0;   { Missing level                                     }
             :        :      => 1;
endrecode;


{FR}if err then
  errmsg(0104) select( "La classe ",ED5B, 
                       "Age ", ED5B,
                       "Continuer", continue );
endif;{FR}
PROC ED7

preproc
if HL6(ED1)<= 24 then
  $ = 1
else 
  $ = 2    
endif; 
PROC ED8

preproc
if ED7 <> 1 then
  skip to next ED1
endif;  

if ED4 <> 1 then
  $ = 2;
else 
  $ = 1  
endif;
PROC ED9

if $ <> 1 then
  skip to ED15;
endif;
PROC ED10A

if ED10A <= 40 and ED5A <= 40 and ED10A > ED5A then
{{+EN} errmsg(0091,ED10A,ED5A) select( "Current year level", ED10A, 
                                 "Highest level", ED5A ); {EN+}}

{FR} errmsg(0091,ED10A,ED5A) select( "Niveau de l'année actuelle", ED10A, 
                                 "Le plus haut niveau", ED5A); {FR}                                 
                                                            
endif;

if $ = 0 then
  skip to ED15;
endif;


//********************  NAB DRC

// Revise following RECODE statement to be country-specific
recode ED10A : HL6(ED1)      => err; { Fix maximum grade/year for each possible level }
           10 : 5-99        => 0;   { Primary                                           }
           20 : 11-99       => 0;   { Lower secondary1                                   }
           31 : 13-99		=> 0;   { Upper secondary2 general                             }
           32 : 13-99		=> 0;   { Upper secondary2 technique                            }
           33 : 13-99		=> 0;   { Upper secondary2 professionnel                          }
           34 : 13-99		=> 0;   { Upper secondary2 art et metier                       }
           40 : 16-99       => 0;   { Higher                                            }
           98 :             => 0;   { DK level                                          }
           99 :             => 0;   { Missing level                                     }
             :              => 1;
endrecode;

{{+EN}if err then
  errmsg(0103) select( "Highest level",ED16A, 
                       "Age", ED16A,
                       "Continue", continue );}
                       

{FR}if err then
  errmsg(0103) select( "Le plus haut niveau",ED10A, 
                       "Age ", ED10A,
                       "Continuer", continue );
endif;{FR}

if (ED5A in 10 : 40) and (ED10A in 10 : 40) then
	if ED5A>ED10A then
		errmsg(0091,ED10A,ED5A) select( "Niveau de l'année actuelle", ED10A, 
                                 "Le plus haut niveau", ED5A); {FR}   
	endif;
endif;
xED10A=getlabel($,$);
PROC ED10B

// Revise following RECODE statement to be country-specific
recode ED10A : $                               => err; { Fix maximum grade/year for each possible level }
          : 96,97,98,99                     => 0;   { Other,Inconsistent, missing, DK Grade/Year        }
           10 : 1-6                             => 0;   { Primary                                           }
           20 : 1-2                             => 0;   { Lower secondary1                                   }
           31 : 1-4				               => 0;   { Upper secondary2 general                             }
           32 : 1-4				               => 0;   { Upper secondary2 technique                            }
           33 : 1-3				               => 0;   { Upper secondary2 professionnel                          }
           34 : 1-2				               => 0;   { Upper secondary2 art et metier                       }
           40 : 1-8                             => 0;   { Higher                                            }
           98 :                                 => 0;   { DK level                                          }
           99 :                                 => 0;   { Missing level                                     }
             :                                 => 1;
endrecode;

{{+EN}if err then
  errmsg(0090) select( "Highest level",ED5A, 
                       "Grade", $,
                       "Continue", continue );}
                       





if err then
{{+EN} errmsg(0090) select( "Current year level", ED10A, 
                       "Current Grade", ED10B,
                       "Continue", continue ); {EN+}}

{FR} errmsg(0090) select( "Niveau de l'année en cours", ED10A, 
                       "Classe/annee actuelle", ED10B,
                       "Continuer", continue ); {FR}
                                                                  
endif;

{ Compare current Grade/Year and level to max Grade/Year and level }
if (ED5A = ED10A) and valid(ED10B) and valid(ED5B) and ED10B > ED5B  then
{{+EN} errmsg(0092,ED10B,ED5B) select( "Current grade", ED10B, 
                                 "Highest Grade", ED5B); {EN+}}

{FR}  errmsg(0092,ED10B,ED5B) select( "Classe/annee actuelle", ED10B, 
                                 "Classe/annee le plus haut ", ED5B) {FR}                                 
                                                                                                      
endif;




//********************  NAB DRC

// Revise following RECODE statement to be country-specific
recode ED10A : ED10B : HL6(ED1)      => err; { Fix maximum grade/year for each possible level }
           10 : 1  : 5-99     => 0;   { Primary                                           }
           10 : 2   :6-99     => 0;   { Primary                                           }
           10 : 3	:7-99     => 0;   { Primary                                           }
           10 : 4	:8-99     => 0;   { Primary                                           }           
           10 : 5	:9-99     => 0;   { Primary                                           }
           10 : 6	:10-99    => 0;   { Primary                                           }
                                 
           20 : 1	: 11-99   => 0;   { Lower secondary1                                  }
           20 : 2	: 12-99   => 0;   { Lower secondary1                                  }           
          
           31 : 1	:  13-99	=> 0;   { Upper secondary2 general                        }
           31 : 2	:  14-99	=> 0;   { Upper secondary2 general                        }          
           31 : 3	:  15-99	=> 0;   { Upper secondary2 general                        }           
           31 : 4	:  16-99	=> 0;   { Upper secondary2 general                        }           
           
           32 : 1	:  13-99		=> 0;   { Upper secondary2 technique                  }
           32 : 2	:  14-99		=> 0;   { Upper secondary2 technique                  }           
           32 : 3	:  15-99		=> 0;   { Upper secondary2 technique                  }           
           32 : 4	:  16-99		=> 0;   { Upper secondary2 technique                  }           
           
           33 : 1	:  13-99		=> 0;   { Upper secondary2 professionnel              }
           33 : 2	:  14-99		=> 0;   { Upper secondary2 professionnel              }
           33 : 3	:  15-99		=> 0;   { Upper secondary2 professionnel              }         
           
           34 : 1	:  13-99		=> 0;   { Upper secondary2 art et metier              }
           34 : 2	:  14-99		=> 0;   { Upper secondary2 art et metier              }
           
           40 : 1	:  16-99       => 0;   { Higher                                       }
           40 : 2	:  17-99       => 0;   { Higher                                       }
           40 : 3	:  18-99       => 0;   { Higher                                       }
           40 : 4	:  19-99       => 0;   { Higher                                       }
           40 : 5	:  20-99       => 0;   { Higher                                       }
           40 : 6	:  21-99       => 0;   { Higher                                       }
           40 : 7	:  22-99       => 0;   { Higher                                       }
           40 : 8	:  23-99       => 0;   { Higher                                       }
           
           98 :     :        => 0;   { DK level                                          }
           99 :      :       => 0;   { Missing level                                     }
             :        :      => 1;
endrecode;


{FR}if err then
  errmsg(0104) select( "La classe ",ED10B, 
                       "Age ", ED10B,
                       "Continuer", continue );
endif;{FR}

if (ED5A in 10 : 40) and (ED10A in 10 : 40) then
	if (ED5B in 1 : 8) and (ED10B in 1 : 8) then
		if (ED5A=ED10A)  and (ED5B>ED10B) then
			errmsg(0091,ED10B,ED5B) select( "Niveau de l'année actuelle", ED10B, 
	                                 "Le plus haut niveau", ED5B); {FR}   
		endif;
	endif;
endif;
PROC ED15

if $ <> 1 then
  skip to next ED1
endif; 
PROC ED16A

if ED16A <= 40 and ED5A <= 40  and ED16A > ED5A then
{{+EN} errmsg(0093,ED16A,ED5A) select( "Previous year level", ED16A, 
                                 "Highest level", ED5B); {EN+}}
 {+FRA} errmsg(0093,ED16A,ED5A) select( "Niveau de l'année précédente", ED16A, 
                                 "Le plus haut niveau", ED5B,
                                 "Continuer", continue ); {FRA+}                                
  
endif;
if ED16A = 0 then
  skip to next ED1
endif;


//********************  NAB DRC

// Revise following RECODE statement to be country-specific
recode ED16A : HL6(ED1)      => err; { Fix maximum grade/year for each possible level }
           10 : 5-99        => 0;   { Primary                                           }
           20 : 11-99       => 0;   { Lower secondary1                                   }
           31 : 13-99		=> 0;   { Upper secondary2 general                             }
           32 : 13-99		=> 0;   { Upper secondary2 technique                            }
           33 : 13-99		=> 0;   { Upper secondary2 professionnel                          }
           34 : 13-99		=> 0;   { Upper secondary2 art et metier                       }
           40 : 16-99       => 0;   { Higher                                            }
           98 :             => 0;   { DK level                                          }
           99 :             => 0;   { Missing level                                     }
             :              => 1;
endrecode;

{{+EN}if err then
  errmsg(0103) select( "Highest level",ED16A, 
                       "Age", ED16A,
                       "Continue", continue );}
                       

{FR}if err then
  errmsg(0103) select( "Le plus haut niveau",ED16A, 
                       "Age ", ED16A,
                       "Continuer", continue );
endif;{FR}
xED16A=getlabel($,$);
PROC ED16B

// Revise following RECODE statement to be country-specific
recode ED16A : $                               => err; { Fix maximum grade/year for each possible level }
          : 96,97,98,99                     => 0;   { Other,Inconsistent, missing, DK Grade/Year        }
           10 : 1-6                             => 0;   { Primary                                           }
           20 : 1-2                             => 0;   { Lower secondary1                                   }
           31 : 1-4				               => 0;   { Upper secondary2 general                             }
           32 : 1-4				               => 0;   { Upper secondary2 technique                            }
           33 : 1-3				               => 0;   { Upper secondary2 professionnel                          }
           34 : 1-2				               => 0;   { Upper secondary2 art et metier                       }
           40 : 1-8                             => 0;   { Higher                                            }
           98 :                                 => 0;   { DK level                                          }
           99 :                                 => 0;   { Missing level                                     }
             :                                 => 1;
endrecode;


if err then
  errmsg(0090);
  reenter
endif;

{ Compare last year's grade and level to max grade and level }
if ED5A = ED16A and valid(ED16B) and valid(ED5B) and ED16B > ED5B  then
  errmsg(0094,ED16B,ED5B);
  reenter;
{ Compare this year's grade and level to last year's grade and level }
elseif (ED10A = ED16A and valid(ED16B) and valid(ED10B) and ED16B > ED10B) then
  errmsg(0095,ED16A,ED16B,ED10A,ED10B);
  reenter;
elseif (ED10A = ED16A and valid(ED16B) and valid(ED10B) and ED16B < ED10B-1) then
  errmsg(0096,ED16A,ED16B,ED10A,ED10B);
  reenter;
elseif ED5A = ED10A and valid(ED10B) and valid(ED5B) and ED10B < ED5B then
  errmsg(0097,ED10B,ED5B);
  reenter;
endif;
PROC HC4

if $ = 99 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC5;
   endif;
endif;

if $ = 96 then
	errmsg("Préciser");
	editnote();
endif;
PROC HC5
if $ = 99 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC6;
   endif;
endif;

if $ = 96 then
	errmsg("Préciser");
	editnote();
endif;
PROC HC6
if $ = 99 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC7A;
   endif;
endif;

if $ = 96 then
	errmsg("Préciser");
	editnote();
endif;
PROC HC7A
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC7B;
   endif;
endif;
PROC HC7B
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC7C;
   endif;
endif;
PROC HC7C
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC7D;
   endif;
endif;
PROC HC7D
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC7E;
   endif;
endif;
PROC HC7E
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC7F;
   endif;
endif;
PROC HC7F
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC7G;
   endif;
endif;
PROC HC7G
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC7H;
   endif;
endif;
PROC HC7H
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC7I;
   endif;
endif;
PROC HC7I
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC8;
   endif;
endif;
PROC HC8

if $ >=3 then 
  skip to HC10A
endif;  

if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC9A;
   endif;
endif;
PROC HC9A
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC9B;
   endif;
endif;
PROC HC9B
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC9C;
   endif;
endif;
PROC HC9C
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC9D;
   endif;
endif;
PROC HC9D
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC9E;
   endif;
endif;
PROC HC9E
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC9F;
   endif;
endif;
PROC HC9F
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC9G;
   endif;
endif;
PROC HC9G
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC9H;
   endif;
endif;
PROC HC9H
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC9I;
   endif;
endif;
PROC HC9I
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC9J;
   endif;
endif;
PROC HC9J
if $ = 9 then
	 x=errmsg("Êtes-vous vraiment sûr de cette réponse %d?", $)
      select("Non", $,"Oui", continue);
	if x=2 then 
		errmsg("Expliquez");
		editnote();
	   skip to HC10A;
   endif;
endif;
PROC HC15

if $ <> 1 then
  skip to HC17;
endif;
PROC HC17

if $ <> 1 then
  skip to HC19;
endif;
PROC HC18I
if HC17 = 1 & HC18A = 0 & HC18B = 0 & HC18C = 0 & HC18D = 0 & HC18E = 0 & HC18F = 0 & HC18G = 0 & HC18H = 0 & HC18I = 0 then
  errmsg (0101);
  reenter;  
endif;
PROC TN1

if TN1 <> 1 then
    endgroup;
  endif;
PROC TN2

if TN2>20 then
	errmsg(0299,TN2)
	select("Oui",continue,"Non",TN2);
endif;
PROC TNLN
preproc
  if curocc(MODTN000) > TN2 then
    endgroup
  endif;

  if inEntry then
    do i = 1 while i <= maxnet
      if i <= TN2 then
        TNLN(i) = i;
      else
        TNLN(i) = notappl;
      endif;
    enddo;
  endif;
  
PROC TN5

{ Display the note entry dialog box for recording "Other" answer }
if $ in 16,36 and !xrvisit and !xmodify then
	editnote ();
endif;

if $ in 11:19 then
  skip to TN10;
endif;
PROC TN10

if $ <> 6 then
	skip to TN13
endif;	
PROC TN12

{ Display the note entry dialog box for recording "Other" answer }

if $ = 96 and !xrvisit and !xmodify then
	editnote ();
endif;
PROC TN13

if $ <> 1 then
   skip to next TNLN
endif;
PROC TN15_1
{onfocus
//setnet(GetSymbol(),curocc());
set attributes($) assisted on;
setvalueset($,codes,labels);}

onfocus
  clean_labels();
  j = 0;
  do i = 1 while i <= HH48
    if (i > curocc() | HL6(i) in HL6(i)+0:125,notappl) then
      codes(j)  = i;
      labels(j) = HX2(i);
      j = j + 1;
    endif;
      codes(j)  = 90;
      labels(j) = "PERSONNE";
  enddo;
  SetValueSet( @GetSymbol(), codes, labels );
	setcapturetype($,3);

postproc
if checknet($,GetSymbol(),curocc()) then
  reenter
elseif $ = 90 then
  skip to next TNLN
elseif $ > HH48 then
  errmsg( 0201, $,HH48 );
  reenter;
endif;
PROC TN15_2
{onfocus
//setnet(GetSymbol(),curocc());
set attributes($) assisted on;
setvalueset($,codes,labels);}

onfocus
  clean_labels();
  j = 0;
  do i = 1 while i <= HH48
    if (i > curocc() | HL6(i) in HL6(i)+12:98,notappl) then
      codes(j)  = i;
      labels(j) = HX2(i);
      j = j + 1;
    endif;
      codes(j)  = 90;
      labels(j) = "PERSONNE";
  enddo;
  SetValueSet( @GetSymbol(), codes, labels );
	setcapturetype($,3);

postproc
if checknet($,GetSymbol(),curocc()) then
  reenter
elseif $ = 90 then
  skip to next TNLN
elseif $ > HH48 then
  errmsg( 0201, $,HH48 );
  reenter;
elseif $ & $ = TN15_1 then
  errmsg( 0202 );
  reenter;
endif;
PROC TN15_3
{onfocus
//setnet(GetSymbol(),curocc());
set attributes($) assisted on;
setvalueset($,codes,labels);}

onfocus
  clean_labels();
  j = 0;
  do i = 1 while i <= HH48
    if (i > curocc() | HL6(i) in HL6(i)+12:98,notappl) then
      codes(j)  = i;
      labels(j) = HX2(i);
      j = j + 1;
    endif;
      codes(j)  = 90;
      labels(j) = "PERSONNE";
  enddo;
  SetValueSet( @GetSymbol(), codes, labels );
	setcapturetype($,3);

postproc
if checknet($,GetSymbol(),curocc()) then
  reenter
elseif $ = 90 then
  skip to next TNLN
elseif $ > HH48 then
  errmsg( 0201, $,HH48 );
  reenter;
elseif $ & $ = TN15_1 then
  errmsg( 0202 );
  reenter;
endif;
PROC TN15_4

{onfocus
//setnet(GetSymbol(),curocc());
set attributes($) assisted on;
setvalueset($,codes,labels);}

onfocus
  clean_labels();
  j = 0;
  do i = 1 while i <= HH48
    if (i > curocc() | HL6(i) in HL6(i)+12:98,notappl) then
      codes(j)  = i;
      labels(j) = HX2(i);
      j = j + 1;
    endif;
      codes(j)  = 90;
      labels(j) = "PERSONNE";
  enddo;
  SetValueSet( @GetSymbol(), codes, labels );
	setcapturetype($,3);

postproc
if checknet($,GetSymbol(),curocc()) then
  reenter
elseif $ = 90 then
  skip to next TNLN
elseif $ > HH48 then
  errmsg( 0201, $,HH48 );
  reenter;
elseif $ & $ = TN15_1 then
  errmsg( 0202 );
  reenter;
endif;
PROC WS1

preproc
  if addmode then
    savepartial();
  endif;

postproc
  { Display the note entry dialog box for recording "Other" answer }
  if $ = 96 and !xrvisit and !xmodify then
     editnote ();
  endif;

  if $ in 11,12,13 then
    skip to WS11
  elseif $ in 61,62,72 then
     skip to WS11
  elseif $ in 14:51,81,96,99 then
    skip to WS11
  endif;
PROC WS11

if $ = 96 and !xrvisit and !xmodify then
   editnote ();
endif;

if $ in 11,14,18,41,51,96,99 then
  skip to WS14
elseif $ = 95 then
  endgroup;
endif;
worklabel=getlabel(WS11_FRA,WS11);
PROC WS12

if $ >= 4 then
  skip to WS14
endif;  
PROC WS15

if $ <> 1 then
  endgroup
endif;  
PROC WS16

if $ <> 1 then
  endgroup
endif;  
PROC HW1

preproc
  if addmode then
    savepartial();
  endif;

postproc
  { Display the note entry dialog box for recording "Other" answer }
  if $ = 6 and !xrvisit and !xmodify then
    editnote ();
  endif;

  if $ in 4,6,9 then
    skip to HW5
  endif;
  
  if $ = 5 then
    skip to HW5
  endif;  
PROC HW3

if $ = 1 then
  skip to HW7
else 
  skip to HW5
endif;    
PROC HW5

if $ <> 1 then
  skip to HH13H;
endif;  
PROC HW6
                                                                                  
if $ <> 1 then
  skip to HH13H;
endif;
PROC HH13H
preproc
  if special(visualvalue($)) then
    x = systime();
    if HH13H = notappl then HH13H = int(x / 10000);endif;
    if HH13M = notappl then HH13M = int(x / 100) % 100;endif;
  endif;
PROC HH14
PREPROC
$=1;
noinput;
PROC HH47
preproc
  clean_labels();
  j = 0;
if HH12=2 then
	skip to HH49;
else
  do i = 1 while i <= HH48
    if (HL6(i) in 12:98,notappl) then
      codes(j)  = HX1(i);
      labels(j) = HX2(i);
      j = j + 1; 
    endif;
    
  enddo;
  
  SetValueSet( @GetSymbol(), codes, labels );
	setcapturetype($,3);
endif;
PROC HH49
preproc
	$ = count(FORMHL_ROSTER where HL4=2 & HL6 in 15:49,missing,notappl);
PROC HH51
preproc
	$ = count(FORMHL_ROSTER where HL6 in 0:4,missing,notappl);
PROC HH46
postproc
x=errmsg("Avez-vous une observation à renseigner?")
select("OUI",continue,"Non",continue);
if x=1 then
	editnote();
endif;
