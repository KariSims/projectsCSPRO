{Application 'MODULE_MENAGE' logic file generated by CSPro}
PROC GLOBAL

set explicit;
{ Definitions of working variables }
array alpha(8) KishGrid(10);	   { Grid used for selection of child for child discipline module }
alpha(26) alphavar;				   { Alpha working variable used in checking alpha vars }
alpha(26) alphanew;                { Alpha working variable used in checking alpha vars }
alpha(62) alphalst;                { The alphabet }
array codes(50);                   { Array used for creating line numbers of household members sleeping under mosquito net}
array alpha(50) labels(50);        { Array used for creating names of household members sleeping under mosquito net} 
alpha(40) yname, ynamehh, tmpname; { List of names for questions }
alpha(900) strnotes;               { for editnote at the end of the interview }
alpha(40) worklabel;               { Alpha variable to get customize text for questions }
array alpha(55) articles(55); 

numeric  hashh;
numeric inEntry;                   
numeric addmode qmark totlen aok alphsize
  maxmem  hhnum
  mindi cln psu err dd ss ddw
  di diwm dich xline 
  a e i j k l lx n t x y found net,rp
  xwc xcc cdline kount opid er ;
  
numeric   hhn,xintnum,xsupnum,xmodcent,xrvisit,xmodify,xpartial,xentryhw,xverif;
numeric   DB, comply, verific, nopartflag;
numeric   qhMoreCount,age1;
string strpart dmois xmois xunite libelle Douzedrmois Quatredrsemaine  trentedrjour var ;

function alphachk(alpha(26) alphamask);
{  russian_convert();}
  { first remove all blanks, and duplicate question marks }
  alphanew = "";
  qmark = 0;
  lx = 1;
  do l = 1 while l <= length(strip(alphavar))
    if alphavar[l:1] <> " " and (alphavar[l:1] <> "?" or not qmark) then
      alphanew[lx:1] = alphavar[l:1];
      lx = lx + 1;
      if alphavar[l:1] = "?" then
        qmark = 1;
      endif;
    endif;
  enddo;
  { aok = 0 - string is bad, aok = 1 - string is good }
  totlen = length(strip(alphamask));
  aok = 0;           { assume string is bad - for empty string }
  alphsize = length(strip(alphanew));
  if alphsize then   { not empty string }
    { check for "?" as only character }
    aok = (alphanew[1:1] = "?" and alphsize = 1);
    if !aok then     { if not a single "?", check string }
      aok = 1;       { now assume string is good until we know otherwise }
      l = 1;         { l is position in string of acceptable values }
      a = 1;         { a is position in input string }
      { loop while the string is still good and there are more letters }
      while aok and a <= alphsize do
        aok = pos(alphanew[a:1],alphamask[l:totlen-l+1]);
        if aok then     { letter is acceptable }
          l = l + aok;  { increment l to position after letter in string of acceptable values }
          a = a + 1     { increment a to next letter in input string }
        endif;
      enddo;
    endif;
  endif;
  alphachk = (!aok);    { alphachk = 0 - if string is good, = 1 - if string is bad }
  { now expand variables }
  if aok then
    do l = 1 while l <= length(strip(alphamask))
      if pos(alphamask[l:1],alphanew) then
        alphavar[l:1] = alphamask[l:1]
      elseif pos("?",alphanew) then
        alphavar[l:1] = "?"
      else
        alphavar[l:1] = " "
      endif;
    enddo;
  endif;
end;


PROC EPMU1HH_FF

PROC HH


if totocc(SANTEGE)  = 0 or (totocc(SANTEGE) <> 0 and HH46 <> 1) then
		errmsg(100001,HH1,HH2,HH3);
endif;
PROC HH1

 errmsg("         ERREURS MENAGE         ");
 errmsg("================================");
PROC HH5D


numeric xdate,xmoisannee;
xdate = (((visualvalue(HH5Y)*100)+visualvalue(HH5M))*100)+ HH5D;

if xdate > sysdate("YYYYMMDD") then 
	errmsg(104001,HH1,HH2,HH3);
endif;
PROC HHNAME

  { Vérifier si le nom du chef de  }
{
  
  if strip(HHNAME) <> strip(HH74) then 
 	errmsg(112002,HH1,HH2,HH3);
  
	 if length (strip (editnote())) < 10 then
	 	errmsg (112003,HH1,HH2,HH3);
	 endif; 

  endif;
}
PROC HH12


if $ <> notappl and not invalueset(HH12) then
	errmsg(114001,HH1,HH2,HH3,getlabel($,$));
endif;

if  HH12 = 2 and totocc(MODHH) <> 0 then
	errmsg(114002,HH1,HH2,HH3)
endif;

if HH12 = 2 then
	errmsg(114003,HH1,HH2,HH3)
endif;
PROC HH48


	if strip(HHNAME) <> strip(HH74) and HH48 < HH76 then
		errmsg(122002,HH1,HH2,HH3)
	endif; 
		
	
	if HH48 < HH76 then 
		errmsg (122003,HH1,HH2,HH3);
	
		 if length (strip (editnote())) < 10 then
		 	errmsg (122004,HH1,HH2,HH3);
		 endif; 

	endif;
PROC NUM_TEL

if (NUM_TEL < 800000000 and NUM_TEL >= 830000000 ) or (NUM_TEL < 840000000 and NUM_TEL >= 860000000) or (NUM_TEL < 890000000 and NUM_TEL >= 910000000) or (NUM_TEL < 970000000 and NUM_TEL >= 1000000000 ) then 
	errmsg(153001,HH1,HH2,HH3);
endif;
PROC MX3


if $ <> notappl and not invalueset(MX3) then
	errmsg(203000,HH1,HH2,HH3,MX1,getlabel($,$));
endif;

{ Head of household must be on first line }

if ($ = 1) <=> (MX1 <> 1) then
  errmsg(203001,HH1,HH2,HH3,MX1,strip(MX2),strip(getlabel($,$)));
endif;

PROC MX4


if $ <> notappl and not invalueset(MX4) then
	errmsg(204000,HH1,HH2,HH3,MX1,getlabel($,$));
endif;


if strip(HHNAME) = strip(HH74) and curocc ()=1 then
   if HH75="F" and MX4 <> 2 then 
   errmsg(204001,HH1,HH2,HH3,MX1,strip(HH74) )
    endif;
   if HH75="M" and MX4 <> 1 then 
   errmsg(204002,HH1,HH2,HH3,MX1,strip(HH74) )
   endif;
endif ;


if strip(HHNAME) <> strip(HH74) and curocc ()=1 then
   if HH75="F" and MX4 <> 2 then 
   errmsg(204003,HH1,HH2,HH3,MX1)
    endif;
   if HH75="M" and MX4 <> 1 then 
   errmsg(204004,HH1,HH2,HH3,MX1)
    endif;
endif ;

if MX1 > 1 & MX3 =2 & $ = $(1) then
	errmsg(204005,HH1,HH2,HH3,MX1, strip(MX2), getlabel( $, $ ), strip(MX2(1)), getlabel( $, $(1) ) )
 endif;
 
 
if curocc () = 1 and  ((HH75="M" and MX4 <> 1 ) or ( HH75="F" and MX4 <> 2)) then
  errmsg(204006,HH1,HH2,HH3,MX1);
   
	 if length (strip (editnote())) < 10 then
	 errmsg (204007,HH1,HH2,HH3,MX1);
	 endif; 

endif;
PROC M05

if $ <> notappl and not invalueset(M05) then
	errmsg(305000,HH1,HH2,HH3,M01,getlabel($,$));
endif;

if M05 = 3 and M03 = 1 then
	errmsg(305001,HH1,HH2,HH3,M01,strip(M02));
endif;
PROC M07M

if $ <> notappl and not invalueset(M07M) then
	errmsg(307200,HH1,HH2,HH3,M01,getlabel($,$));
endif;

if M07J > 30 and M07M in 4,6,8,9,10 then
	errmsg(307201,HH1,HH2,HH3,M01, strip(getlabel($,$)))
endif;

if M07J > 31 and M07M in 1,3,5,7,8,10,12 then
	errmsg(307202,HH1,HH2,HH3,M01, strip(getlabel($,$)))
endif;

if M07J > 29 and M07M = 2 then
	errmsg(307203,HH1,HH2,HH3,M01, strip(getlabel($,$)))
endif;
PROC M07A


preproc
  numeric  dnais , djour , xage jjmm,  jj,  mm,  aaaa ;
  
  
Postproc

if $ <> notappl and not invalueset(M07A) then
	errmsg(307300,HH1,HH2,HH3,M01,getlabel($,$));
endif;

if !(M07J in 98,missing) & !(M07M in 98,missing) & !(M07A in 9998,missing) then
         
    dnais =( ((M07A*100) + M07M )  * 100) +   M07J   ;
	 jjmm =  int(HH5 / 10000)  ;
	 jj =  int(jjmm / 100)  ;
	 mm =  int(jjmm %  100)  ;
	 aaaa =  int(HH5 % 10000)  ;
    djour = ( ((aaaa*100) + mm )  * 100) +   jj   ;
    
    //personne pour lesquelles la date de naissance entrée corespond à une date ilterieure à celle de l'enquête
    
    if M07M > mm and M07A >= aaaa then 
	    errmsg(307301,HH1,HH2,HH3,M01,strip(M02))
    endif;
        
endif;
PROC M08
preproc
  numeric  dnais , djour , xage jjmm,  jj,  mm,  aaaa ;

postproc

if $ <> notappl and not invalueset(M08) then
	errmsg(308000,HH1,HH2,HH3,M01,getlabel($,$));
endif;

if $ = notappl or $ = missing then
   errmsg (308001,HH1,HH2,HH3,M01);
endif;


//Contrôle de l'age du chef de ménage

  if M03 = 1 and M08 < 15 then
    errmsg(308002,HH1,HH2,HH3,M01,strip(M02),M08);
  endif;
  
  
// CALCULER L"age

if !(M07J in 98,missing) & !(M07M in 98,missing) & !(M07A in 9998,missing) then
         
    dnais =( ((M07A*100) + M07M )  * 100) +   M07J   ;
	 jjmm =  int(HH5 / 10000)  ;
	 jj =  int(jjmm / 100)  ;
	 mm =  int(jjmm %  100)  ;
	 aaaa =  int(HH5 % 10000)  ;
    djour = ( ((aaaa*100) + mm )  * 100) +   jj   ;
        
     
      xage =  datediff(dnais,djour,"y");        
     //if  abs(xage - M08) in 0:1 then 
     
        
    if  abs(xage - M08) = 0 then 
    // bon
    
    // Personne agé de 95 ans et plus
    elseif xage > 95 then
     	M08 = 95;    
    else
    	errmsg(308003,HH1,HH2,HH3,M01,strip(M02), xage , M08 ) ;
    endif ;
    
else

	xage =  2018 - M07A ;
	
	if abs(xage - M08) <> 0 then
		errmsg(308004,HH1,HH2,HH3,M01,strip(M02), xage , M08 ) ;
    endif;
	   
endif;


//Conjoint du chef	2
if M03 = 2 then
  if M04 = 1 and M08  < 15 then 
  	errmsg(308005,HH1,HH2,HH3,M01)
  endif ;
  if M04 = 2 and M08  < 12 then 
  	errmsg(308006,HH1,HH2,HH3,M01)
  endif ;
endif ;

	
//Enfant du chef de Ménage	3
if M03 = 3 then
	  if M04(1)=1 and ( M08(1) - M08) < 15 then 
	  	errmsg(308007,HH1,HH2,HH3,M01)
	   endif ;
	   
	  if M04(1)=2 and ( M08(1) - M08) < 12 then 
		errmsg(308008,HH1,HH2,HH3,M01)
	  endif ;
endif ;


//Père ou mère du chef 	5
if M03 = 5 then

  if M04 = 1 and (M08 - M08(1)) < 15 then
  	errmsg(308009,HH1,HH2,HH3,M01)
  endif ;
  
  if M04 = 2 and (M08 - M08(1)) < 12 then 
  	errmsg(308010,HH1,HH2,HH3,M01); 
  endif ;
  
endif ;
PROC M10


if (M08(M10) - M08(M01)) < 15 then
	errmsg(310001,HH1,HH2,HH3,M01,Strip(M02(M10)),strip(M02(M01)));
endif;
PROC M11

if $ <> notappl and not invalueset(M11) then
	errmsg(311000,HH1,HH2,HH3,M01,getlabel($,$));
endif;

if M03 = 3 and M04(1) = 1 and M11 <> 1 then 
	errmsg(311001,HH1,HH2,HH3,M01, strip(M02));
endif; 
PROC M13


if (M08(M13) - M08(M01)) <= 12 then
	errmsg(313001,HH1,HH2,HH3,M01,Strip(M02(M13)),strip(M02(M01)));
endif;
PROC M14

if $ <> notappl and not invalueset(M14) then
	errmsg(314000,HH1,HH2,HH3,M01,getlabel($,$));
endif;

if M03 = 3 and M04(1) = 2 and M14 <> 1 then 
	errmsg(314001,HH1,HH2,HH3,M01, strip(M02));
endif;


if M03 = 3 and M04(1) = 1 and M11 <> 1 then 
	errmsg(314001,HH1,HH2,HH3,M01, strip(M02));
endif;


PROC M18

if  $ <> notappl and not invalueset(M18) then
	errmsg(318000,HH1,HH2,HH3,M01,getlabel($,$));
endif;

if $ = 8 then
   if length (strip(editnote()))< 2 then
  		errmsg(318001,HH1,HH2,HH3,M01);
	endif;
endif;
PROC M19

if $ <> notappl and not invalueset(M19) then
	errmsg(319000,HH1,HH2,HH3,M01,getlabel($,$));
endif;

if M03 = 2 and  M19 in 1,5,6 then
	errmsg(319001,HH1,HH2,HH3,M01,strip(M02),getlabel($,$));
endif;

Numeric compt;
compt = count(MODHX_EDT where MX3 = 2);

if compt <> 0 and M19(1) in 1,5,6 then
	errmsg(319002,HH1,HH2,HH3,M01,strip(M02),getlabel($,$));
endif;
PROC M20

if $ <> notappl and not invalueset(M20) then
	errmsg(320000,HH1,HH2,HH3,M01,getlabel($,$));
endif;

Numeric compt; 
compt = count(MODHX_EDT where MX3 = 2);

if compt <> 0 and M20(1) = 2 and M04 = 2 then
	errmsg(320001,HH1,HH2,HH3,M01,strip(M02));
endif;

if compt <> 0 and M20(1) = 2 and M04 = 1 then
	errmsg(320002,HH1,HH2,HH3,M01,strip(M02));
endif;

if M03 = 2 and M20 = 2 and M04 = 2 then
	errmsg(320003,HH1,HH2,HH3,M01,strip(M02));
endif;

if M03 = 2 and M20 = 2 and M04 = 1 then
	errmsg(320004,HH1,HH2,HH3,M01,strip(M02));
endif;
PROC M23

Numeric nbremois;

if M22 in 1:12 then
nbremois = M22 * 31;
endif;

if M23 > nbremois then
	errmsg(323001,HH1,HH2,HH3,M01,strip(M02));
endif;
PROC M24

if $ <> notappl and not invalueset(M24) then
	errmsg(324000,HH1,HH2,HH3,M01,getlabel($,$));
endif;

if M24 = 8 then
    if length (strip(editnote()))< 2 then
  		errmsg(324001,HH1,HH2,HH3,M01);
	endif;
Endif;
PROC M27

if $ <> notappl and not invalueset(M27) then
	errmsg(327000,HH1,HH2,HH3,M01,getlabel($,$));
endif;

if M27 = 11 then
    if length (strip(editnote()))< 4 then
  		errmsg(327001,HH1,HH2,HH3,M01);
	endif;
Endif;
PROC ED05

if $ <> notappl and not invalueset(ED05) then
	errmsg(405000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if ED05 = 17 then
    if length (strip(editnote()))< 2 then
  		errmsg(405001,HH1,HH2,HH3,ED00);
	endif;
Endif;
PROC ED09A

if $ <> notappl and not invalueset(ED09A) then
	errmsg(409000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if ED09A = 8 then
   	if length (strip(editnote()))< 2 then
  		errmsg(409001,HH1,HH2,HH3,ED00);
	endif;
endif;
PROC ED11

	
if $%50 <> 0 and $ <> notappl then
	errmsg(411001,HH1,HH2,HH3,ED00);
				
		if length(strip(editnote()))<15 then
			errmsg(411002,HH1,HH2,HH3,ED00);
		endif;			
		
endif;
PROC ED12

if $ <> notappl and not invalueset(ED12) then
	errmsg(412000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if ED12 > M08(ED00) Then
	errmsg(412001,HH1,HH2,HH3,ED00,strip(EDNOM),ED12,M08(ED00));
endif;
PROC ED15

if $ <> notappl and not invalueset(ED15) then
	errmsg(415000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if ED15 in 7:8 then
    if length (strip(editnote()))< 2 then
  		errmsg(415001,HH1,HH2,HH3,ED00);
	endif;
Endif;





//********************  NAB DRC

er = 1;
recode ED15 : M08(ED00)   => er; { Fix maximum grade/year for each possible level }
			0 : 3 - 99 => 0;   {  Maternelle   }
			1 : 5 - 99 => 0;   {  Primaire   }
			2 : 11 - 99 => 0;   {  Secondaire   }
			3 : 5 - 99 => 0;   {  Programme non formel   }
			4 : 17 - 99 => 0;   {  Universitaire   }
			5 : 23 - 99 => 0;   {  Post Universitaire   }
			6 : 9 - 99 => 0;   {  INPP   }
			7 : 9 - 99 => 0;   {  Autre Professionnel   }
			8 : 9 - 99 => 0;   {  Autre   }
           :        => 1;
endrecode;

if er and ED15 in 0:15 and M08(ED00) in 3:99  then
  errmsg("Problème : %s à %d ans  ",strip(getlabel($,$)),M08(ED00) ) 
endif;

PROC ED16

if $ <> notappl and not invalueset(ED16) then
	//errmsg(416000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;


//********************  NAB DRC

er = 1 ;

if ED15 = 0 then
	recode ED16 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
				0 : 3 - 99 => 0;   {  Maternelle   }
				1 : 3 - 99 => 0;   {  Primaire   }
				2 : 4 - 99 => 0;   {  Secondaire   }
				3 : 5 - 99 => 0;   {  Programme non formel   }
				8,9 : 3 - 99 => 0;   {  Universitaire   }
	           :        => 1;
	endrecode;
endif ;


if ED15 = 1 then  // PRIMAIRE
	recode ED16 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
				1 : 5 - 99 => 0;   {  Primaire   }
				2 : 6 - 99 => 0;   {  Secondaire   }
				3 : 7 - 99 => 0;   {  Programme non formel   }
				4 : 8 - 99 => 0;   {  Universitaire   }
				5 : 9 - 99 => 0;   {  Post Universitaire   }
				6 : 10 - 99 => 0;   {  INPP   }
				8,9 : 5 - 99 => 0;   {  Autre   }
	           :        => 1;
	endrecode;
endif ;


if ED15 = 2 then  // SECONDAIRE
	recode ED16 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
				1 : 11 - 99 => 0;   {  Primaire   }
				2 : 12 - 99 => 0;   {  Secondaire   }
				3 : 13 - 99 => 0;   {  Programme non formel   }
				4 : 14 - 99 => 0;   {  Universitaire   }
				5 : 15 - 99 => 0;   {  Post Universitaire   }
				6 : 16 - 99 => 0;   {  INPP   }
				8,9 :11 - 99 => 0;   {  Autre   }
	           :        => 1;
	endrecode;
endif ;


if ED15 = 3 then  // Programme non formel
	recode ED16 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
				1 : 5 - 99 => 0;   {  Primaire   }
				2 : 6 - 99 => 0;   {  Secondaire   }
				3 : 7 - 99 => 0;   {  Programme non formel   }
				4 : 8 - 99 => 0;   {  Universitaire   }
				5 : 9 - 99 => 0;   {  Post Universitaire   }
				6 : 10 - 99 => 0;   {  INPP   }
				8,9 :11 - 99 => 0;   {  Autre   }
	           :        => 1;
	endrecode;
endif ;



if ED15 = 4 then  // UNIVERSITAIRE
	recode ED16 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
				0,1 : 17 - 99 => 0;   {  Primaire   }
				2 : 18 - 99 => 0;   {  Secondaire   }
				3 : 19 - 99 => 0;   {  Programme non formel   }
				4 : 20 - 99 => 0;   {  Universitaire   }
				5 : 21 - 99 => 0;   {  Post Universitaire   }
				8,9 :17 - 99 => 0;   {  Autre   }
	           :        => 1;
	endrecode;
endif ;


if ED15 = 5 then  // POST-UNIVERSITAIRE
	recode ED16 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
				1 : 22 - 99 => 0;   {  Primaire   }
				2 : 23 - 99 => 0;   {  Secondaire   }
				3 : 24 - 99 => 0;   {  Programme non formel   }
				4 : 25 - 99 => 0;   {  Universitaire   }
				5 : 26 - 99 => 0;   {  Post Universitaire   }
				8,9 :22 - 99 => 0;   {  Autre   }
	           :        => 1;
	endrecode;
endif ;


if ED15 = 6 then  // INPP
	recode ED16 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
			   0 : 9 - 99 => 0;   {  Primaire   }
				1 : 9 - 99 => 0;   {  Primaire   }
				2 : 9 - 99 => 0;   {  Secondaire   }
				3 : 9 - 99 => 0;   {  Programme non formel   }
				4 : 9 - 99 => 0;   {  Universitaire   }
				5 : 9 - 99 => 0;   {  Post Universitaire   }
	           :        => 1;
	endrecode;
endif ;



if ED15 = 7 then  // AUTRE
	recode ED16 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
			   0 : 9 - 99 => 0;   {  Primaire   }
				1 : 9 - 99 => 0;   {  Primaire   }
				2 : 9 - 99 => 0;   {  Secondaire   }
				3 : 9 - 99 => 0;   {  Programme non formel   }
				4 : 9 - 99 => 0;   {  Universitaire   }
				5 : 9 - 99 => 0;   {  Post Universitaire   }
	           :        => 1;
	endrecode;
endif ;



if ED15 = 1 then
	recode ED16 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
				1 : 5 - 99 => 0;   {  Primaire   }
				2 : 6 - 99 => 0;   {  Secondaire   }
				3 : 7 - 99 => 0;   {  Programme non formel   }
				4 : 8 - 99 => 0;   {  Universitaire   }
				5 : 9 - 99 => 0;   {  Post Universitaire   }
				6 : 10 - 99 => 0;   {  INPP   }
				7 : 9 - 99 => 0;   {  Autre Professionnel   }
				8 : 9 - 99 => 0;   {  Autre   }
	           :        => 1;
	endrecode;
endif ;


if ED15 = 1 then
	recode ED16 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
				1 : 5 - 99 => 0;   {  Primaire   }
				2 : 6 - 99 => 0;   {  Secondaire   }
				3 : 7 - 99 => 0;   {  Programme non formel   }
				4 : 8 - 99 => 0;   {  Universitaire   }
				5 : 9 - 99 => 0;   {  Post Universitaire   }
				6 : 10 - 99 => 0;  {  INPP   }
				7 : 9 - 99 => 0;   {  Autre Professionnel   }
				8 : 9 - 99 => 0;   {  Autre   }
	           :        => 1;
	endrecode;
endif ;


if er  and ED16 in 0:9 and M08(ED00) in 3:99 then
  errmsg("Problème : %s à %d ans  ",strip(getlabel($,$)),M08(ED00) ) ;
endif;

PROC ED17

if $ <> notappl and not invalueset(ED17) then
	errmsg(417000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if (ED17 = 2 and ED16 <> 3 and ED16 <> 6 and ED15 in 0:2) or (ED17 = 2 and ED16 <> 3 and ED16 <> 5 and ED16 <> 8 and ED15 = 4) then
	errmsg(417001,HH1,HH2,HH3,ED00,strip(EDNOM),strip(getlabel(ED15_VS1,ED15)));
endif;



if ED17 = 2 and ED16 <> 3 and ED15 = 0 then
	errmsg("%s ne peut déjà avoir obtenu un diplôme de fin de cycle (%s)",strip(EDNOM),strip(getlabel(ED15_VS1,ED15)));
endif;

if ED17 = 2 and ED16 <> 6 and ED15 in 1:2 then
	errmsg("%s ne peut déjà avoir obtenu un diplôme de fin de cycle (%s)",strip(EDNOM),strip(getlabel(ED15_VS1,ED15)));
endif;

if ED17 = 2 and not(ED16 in 3,5,8) and ED15 = 4 then
	errmsg("%s ne peut déjà avoir obtenu un diplôme de fin de cycle (%s)",strip(EDNOM),strip(getlabel(ED15_VS1,ED15)));
endif;

if ED15 = 0 and ED16 in 3 and ED17 = 4 then
	errmsg("%s était dans la dernière classe du cycle %s (%d année %s)",strip(EDNOM),strip(getlabel(ED15_VS1,ED15)),ED16,strip(getlabel(ED15_VS1,ED15)));
endif;

if ED15 in 1:2 and ED16 in 6 and ED17 = 4 then
	errmsg("%s était dans la dernière classe du cycle %s (%d année %s)",strip(EDNOM),strip(getlabel(ED15_VS1,ED15)),ED16,strip(getlabel(ED15_VS1,ED15)));
endif;

if ED15 = 4 and ED16 in 3,5,8 and ED17 = 4 then
	errmsg("%s était dans une classe finissante (%d année de l'université)",strip(EDNOM),ED16);
endif;

PROC ED18

if $ <> notappl and not invalueset(ED18) then
	errmsg(418000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if $ = 18 then
   if length (strip(editnote()))< 2 then
  		errmsg(418001,HH1,HH2,HH3,ED00);
	endif;
endif;

PROC ED20

if $ <> notappl and not invalueset(ED20) then
	errmsg(420000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if ED20 in 7:8 then
    if length (strip(editnote()))< 2 then
  		errmsg(420001,HH1,HH2,HH3,ED00);
	endif;
Endif;





	//********************  NAB DRC
	
	er = 1;
	recode ED20 : M08(ED00)   => er; { Fix maximum grade/year for each possible level }
				0 : 3 - 99 => 0;   {  Maternelle   }
				1 : 5 - 99 => 0;   {  Primaire   }
				2 : 11 - 99 => 0;   {  Secondaire   }
				3 : 5 - 99 => 0;   {  Programme non formel   }
				4 : 17 - 99 => 0;   {  Universitaire   }
				5 : 23 - 99 => 0;   {  Post Universitaire   }
				6 : 9 - 99 => 0;   {  INPP   }
				7 : 9 - 99 => 0;   {  Autre Professionnel   }
				8 : 9 - 99 => 0;   {  Autre   }
	           :        => 1;
	endrecode;
	
	if er and ed20 >=0 and  M08(ED00) >=0  then
	  errmsg("Problème : %s à %d ans  ",strip(getlabel($,$)),M08(ED00) ) ;
	endif;

PROC ED21

if $ <> notappl and not invalueset(ED21) then
	// errmsg(421000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;


//Classe actuelle par rapport à celui de l'annéée passée


if ED15 = 1  then 

			er = 1 ;
			
			if  ED20 = 0 then // Maternelle
			
				recode  ED15 : ED16  : ED20 : ED21  => er; { Fix maximum grade/year for each possible level }
							  0 : 0 - 3,8 : 0    : 0 - 3 => 0;   {  Maternelle   }
			
				             :       :	    :	 => 1;
				endrecode;
			endif ;
			
			
			if  ED20 = 1 then  // PRIMAIRE
				recode  ED15 : ED16  : ED20 : ED21  => er; { Fix maximum grade/year for each possible level }
							  0 : 0 - 3 : 1    : 1  => 0;   {  Maternelle  et primaire  }
							  1 : 8     : 1    : 1  => 0;   {  je viens de comencer  }				  
							  1 : 1     : 1    : 2  => 0;   {  primaire  }
							  1 : 2     : 1    : 3  => 0;   {  primaire  }	
							  1 : 3     : 1    : 4  => 0;   {  primaire  }		
							  1 : 4     : 1    : 5  => 0;   {  primaire  }	
							  1 : 5     : 1    : 6  => 0;   {  primaire    }	
				  	  			  
				             :       :	    :	 => 1;
				endrecode;
			endif ;
			
			
			
			if  ED20 = 2 then  // SECONDAIRE
				recode  ED15 : ED16  : ED20 : ED21  => er; { Fix maximum grade/year for each possible level }				  
							  1 : 6     : 2    : 1 => 0;   {  primaire  secondaire }
							  2 : 8     : 2    : 1  => 0;   {  Maternelle  primaire  }				  
							  2 : 1     : 2    : 2  => 0;   {  Maternelle  primaire  }
							  2 : 2     : 2    : 3  => 0;   {  primaire  }	
							  2 : 3     : 2    : 4  => 0;   {  primaire  }		
							  2 : 4     : 2    : 5  => 0;   {  primaire  }	
							  2 : 5     : 2    : 6  => 0;   {  primaire    }		  	  			  
				             :       :	    :	 => 1;
				endrecode;
			endif ;
			
			
			
			
			if  ED20 = 3 then  // Programme non formel
				recode  ED15 : ED16  : ED20 : ED21  => er; { Fix maximum grade/year for each possible level }		
							  3 : 8    : 3    : 1  => 0;   {  Programme non formel  }			  
							  3 : 1    : 3    : 2  => 0;   {  Programme non formel  }
							  3 : 2     : 3    : 3  => 0;   {   Programme non formel   }	
							  3 : 3     : 3    : 4  => 0;   {   Programme non formel   }		
							  3 : 4     : 3    : 5  => 0;   {   Programme non formel   }	
							  3 : 5     : 3    : 6  => 0;   {   Programme non formel     }		  	  
							  3 : 6     : 3    : 7  => 0;   {   Programme non formel     }		
							  3 : 7     : 3    : 8  => 0;   {   Programme non formel     }						    				  			  
				             :       :	    :	 => 1;
				endrecode;
			endif ;
			
			
			
			
			if  ED20 = 4 then  // UNIVERSITE
				recode  ED15 : ED16  : ED20 : ED21  => er; { Fix maximum grade/year for each possible level }				  
							  2 : 6     : 4    : 0,1  => 0;   {  primaire  secondaire }
							  4 : 8     : 4    : 1  => 0;   {  Maternelle  primaire  }  
							  4 : 1     : 4    : 2  => 0;   {  Maternelle  primaire  }
							  4 : 2     : 4    : 3  => 0;   {  primaire  }	
							  4 : 3     : 4    : 4  => 0;   {  primaire  }		
							  4 : 4     : 4    : 5  => 0;   {  primaire  }	
							  4 : 5     : 4    : 6  => 0;   {  primaire    }		  	  			  
				             :       :	    :	 => 1;
				endrecode;
			endif ;
			
			
			
			
			
			if  ED20 = 5 then  // POST - UNIVERSITE
				recode  ED15 : ED16  : ED20 : ED21  => er; { Fix maximum grade/year for each possible level }				  
							  4 : 5     : 5    : 1  => 0;   {  primaire  secondaire }
							  5 : 8     : 5    : 1  => 0;   {  Maternelle  primaire  }				  
							  5 : 1     : 5    : 2  => 0;   {  Maternelle  primaire  }
							  5 : 2     : 5    : 3  => 0;   {  primaire  }	
							  5 : 3     : 5    : 4  => 0;   {  primaire  }		
							  5 : 4     : 5    : 5  => 0;   {  primaire  }	
							  5 : 5     : 5    : 6  => 0;   {  primaire    }		  	  			  
				             :       :	    :	 => 1;
				endrecode;
			endif ;
			
			
			
			
			
			
			if  ED20 = 6 then  // Programme non formel
				recode  ED15 : ED16  : ED20 : ED21  => er; { Fix maximum grade/year for each possible level }				  
							  6 : 0     : 6    : 1  => 0;   {  Programme non formel  }
							  6 : 8     : 6    : 1  => 0;   {   Programme non formel   }					  
							  6 : 1     : 6    : 2  => 0;   {   Programme non formel   }	
							  6 : 2     : 6    : 3  => 0;   {   Programme non formel   }		
							  6 : 3     : 6    : 4  => 0;   {   Programme non formel   }	
							  6 : 4     : 3    : 5  => 0;   {   Programme non formel     }		  	  				    				  			  
				             :       :	    :	 => 1;
				endrecode;
			endif ;
			
			
			
			
			
			if  ED20 = 6 then  //  AutreProgramme non formel
				recode  ED15 : ED16  : ED20 : ED21  => er; { Fix maximum grade/year for each possible level }				  
							  7 : 0     : 7    : 1  => 0;   {  Programme non formel  }
							  7 : 8     : 7    : 1  => 0;   {   Programme non formel   }					  
							  7 : 1     : 7    : 2  => 0;   {   Programme non formel   }	
							  7 : 2     : 7    : 3  => 0;   {   Programme non formel   }		
							  7 : 3     : 7    : 4  => 0;   {   Programme non formel   }	
							  7 : 4     : 7    : 5  => 0;   {   Programme non formel     }		  	  				    				  			  
				             :       :	    :	 => 1;
				endrecode;
			endif ;
			
			
			
			if er  and ED15 in 0:15 and ED16 >=0 and ed20 >=0 and  ed21 >=0  then
			  errmsg("Incohérence entre la classe actuelle  (%s) et celle passée avec succès (%s)  ",strip(getlabel(ed21_vs1,ed21)),  strip(getlabel(ed16_vs1,ed16)) ) ;
			endif;
			
			
			
			
			
			
			
			//********************  NAB DRC
			
			er = 1 ;
			
			if  ED20 = 0 then
				recode  ED21 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
							0 : 3 - 99 => 0;   {  Maternelle   }
							1 : 3 - 99 => 0;   {  Primaire   }
							2 : 4 - 99 => 0;   {  Secondaire   }
							3 : 5 - 99 => 0;   {  Programme non formel   }
							8,9 : 3 - 99 => 0;   {  Universitaire   }
				           :        => 1;
				endrecode;
			endif ;
			
			
			if  ED20 = 1 then  // PRIMAIRE
				recode  ED21 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
							1 : 5 - 99 => 0;   {  Primaire   }
							2 : 6 - 99 => 0;   {  Secondaire   }
							3 : 7 - 99 => 0;   {  Programme non formel   }
							4 : 8 - 99 => 0;   {  Universitaire   }
							5 : 9 - 99 => 0;   {  Post Universitaire   }
							6 : 10 - 99 => 0;   {  INPP   }
							8,9 : 5 - 99 => 0;   {  Autre   }
				           :        => 1;
				endrecode;
			endif ;
			
			
			if  ED20 = 2 then  // SECONDAIRE
				recode  ED21 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
							1 : 11 - 99 => 0;   {  Primaire   }
							2 : 12 - 99 => 0;   {  Secondaire   }
							3 : 13 - 99 => 0;   {  Programme non formel   }
							4 : 14 - 99 => 0;   {  Universitaire   }
							5 : 15 - 99 => 0;   {  Post Universitaire   }
							6 : 16 - 99 => 0;   {  INPP   }
							8,9 :11 - 99 => 0;   {  Autre   }
				           :        => 1;
				endrecode;
			endif ;
			
			
			if  ED20 = 3 then  // Programme non formel
				recode  ED21 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
							1 : 5 - 99 => 0;   {  Primaire   }
							2 : 6 - 99 => 0;   {  Secondaire   }
							3 : 7 - 99 => 0;   {  Programme non formel   }
							4 : 8 - 99 => 0;   {  Universitaire   }
							5 : 9 - 99 => 0;   {  Post Universitaire   }
							6 : 10 - 99 => 0;   {  INPP   }
							8,9 :11 - 99 => 0;   {  Autre   }
				           :        => 1;
				endrecode;
			endif ;
			
			
			
			
			
			if  ED20 = 4 then  // UNIVERSITAIRE
				recode  ED21 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
							0,1 :17 - 99 => 0;   {  Primaire   }
							2 : 18 - 99 => 0;   {  Secondaire   }
							3 : 19 - 99 => 0;   {  Programme non formel   }
							4 : 20 - 99 => 0;   {  Universitaire   }
							5 : 21 - 99 => 0;   {  Post Universitaire   }
							8,9 :17 - 99 => 0;   {  Autre   }
				           :        => 1;
				endrecode;
			endif ;
			
			
			
			
			if  ED20 = 5 then  // POST-UNIVERSITAIRE
				recode  ED21 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
							1 : 22 - 99 => 0;   {  Primaire   }
							2 : 23 - 99 => 0;   {  Secondaire   }
							3 : 24 - 99 => 0;   {  Programme non formel   }
							4 : 25 - 99 => 0;   {  Universitaire   }
							5 : 26 - 99 => 0;   {  Post Universitaire   }
							8,9 :22 - 99 => 0;   {  Autre   }
				           :        => 1;
				endrecode;
			endif ;
			
			
			
			
			if  ED20 = 6 then  // INPP
				recode  ED21 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
						   0 : 9 - 99 => 0;   {  Primaire   }
							1 : 9 - 99 => 0;   {  Primaire   }
							2 : 9 - 99 => 0;   {  Secondaire   }
							3 : 9 - 99 => 0;   {  Programme non formel   }
							4 : 9 - 99 => 0;   {  Universitaire   }
							5 : 9 - 99 => 0;   {  Post Universitaire   }
				           :        => 1;
				endrecode;
			endif ;
			
			
			
			
			
			if  ED20 = 7 then  // AUTRE
				recode  ED21 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
						   0 : 9 - 99 => 0;   {  Primaire   }
							1 : 9 - 99 => 0;   {  Primaire   }
							2 : 9 - 99 => 0;   {  Secondaire   }
							3 : 9 - 99 => 0;   {  Programme non formel   }
							4 : 9 - 99 => 0;   {  Universitaire   }
							5 : 9 - 99 => 0;   {  Post Universitaire   }
				           :        => 1;
				endrecode;
			endif ;
			
			
			
			if  ED20 = 1 then
				recode  ED21 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
							1 : 5 - 99 => 0;   {  Primaire   }
							2 : 6 - 99 => 0;   {  Secondaire   }
							3 : 7 - 99 => 0;   {  Programme non formel   }
							4 : 8 - 99 => 0;   {  Universitaire   }
							5 : 9 - 99 => 0;   {  Post Universitaire   }
							6 : 10 - 99 => 0;   {  INPP   }
							7 : 9 - 99 => 0;   {  Autre Professionnel   }
							8 : 9 - 99 => 0;   {  Autre   }
				           :        => 1;
				endrecode;
			endif ;
			
			
			
			if  ED20 = 1 then
				recode  ED21 : M08(ED00)  => er; { Fix maximum grade/year for each possible level }
							1 : 5 - 99 => 0;   {  Primaire   }
							2 : 6 - 99 => 0;   {  Secondaire   }
							3 : 7 - 99 => 0;   {  Programme non formel   }
							4 : 8 - 99 => 0;   {  Universitaire   }
							5 : 9 - 99 => 0;   {  Post Universitaire   }
							6 : 10 - 99 => 0;  {  INPP   }
							7 : 9 - 99 => 0;   {  Autre Professionnel   }
							8 : 9 - 99 => 0;   {  Autre   }
				           :        => 1;
				endrecode;
			endif ;
			
			
			
			if er  and ED21 in 1:9 and M08(ED00) in 3:99 then
			  errmsg("Vérifier Pour (%s) : %s à %d ans  ",M02(ED00),strip(getlabel($,$)),M08(ED00) ) ;
			endif;
			

endif ;
PROC ED22

if $ <> notappl and not invalueset(ED22) then
	errmsg(422000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if ED22 = 18 then

    if length (strip(editnote()))< 2 then
  		errmsg(422001,HH1,HH2,HH3,ED00);
	endif;
	
endif;
PROC ED27A

	
if $%50 <> 0 and $ <> notappl then

	errmsg(427101,HH1,HH2,HH3,ED00);
				
	if length(strip(editnote()))<15 then
		errmsg(427102,HH1,HH2,HH3,ED00);
	endif;
	
endif;
PROC ED27B

	
if $%50 <> 0 and $ <> notappl then

	errmsg(427201,HH1,HH2,HH3,ED00);
				
	if length(strip(editnote()))<15 then
	
		errmsg(427202,HH1,HH2,HH3,ED00);
		
	endif;
	
endif;
PROC ED27C

	
if $%50 <> 0 and $ <> notappl then

	errmsg(427301,HH1,HH2,HH3,ED00);
				
	if length(strip(editnote()))<15 then
	
		errmsg(427302,HH1,HH2,HH3,ED00);
		
	endif;
	
endif;
PROC ED28A

	
if $%50 <> 0 and $ <> notappl then

	errmsg(428101,HH1,HH2,HH3,ED00);
				
	if length(strip(editnote()))<15 then
	
		errmsg(428102,HH1,HH2,HH3,ED00);
		
	endif;
	
endif;
PROC ED28B

	
if $%50 <> 0 and $ <> notappl then

	errmsg(428201,HH1,HH2,HH3,ED00);
				
	if length(strip(editnote()))<15 then
	
		errmsg(428202,HH1,HH2,HH3,ED00);
		
	endif;
	
endif;
PROC ED29

	
if $%50 <> 0 and $ <> notappl then

	errmsg(429001,HH1,HH2,HH3,ED00);
				
	if length(strip(editnote()))<15 then
	
		errmsg(429002,HH1,HH2,HH3,ED00);
		
	endif;
	
endif;
PROC ED30

	
if $%50 <> 0 and $ <> notappl then

	errmsg(430001,HH1,HH2,HH3,ED00);
				
	if length(strip(editnote()))<15 then
	
		errmsg(430002,HH1,HH2,HH3,ED00);
		
	endif;
	
endif;
PROC ED31

	
if $%50 <> 0 and $ <> notappl then

	errmsg(431001,HH1,HH2,HH3,ED00);
				
	if length(strip(editnote()))<15 then
	
		errmsg(431002,HH1,HH2,HH3,ED00);
		
	endif;
	
endif;
PROC ED32A

if $ <> notappl and not invalueset(ED32A) then
	errmsg(432000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if $ = 8 then
    if length (strip(editnote()))< 2 then
  		errmsg(432001,HH1,HH2,HH3,ED00);
	endif;
endif;
PROC ED33

	
if $%50 <> 0 and $ <> notappl then

	errmsg(433001,HH1,HH2,HH3,ED00);
				
	if length(strip(editnote()))<15 then
	
		errmsg(433002,HH1,HH2,HH3,ED00);
		
	endif;
	
endif;
PROC ED34

if $ <> notappl and not invalueset(ED34) then
	errmsg(434000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if ED34 in 7:8 then
    if length (strip(editnote()))< 2 then
  		errmsg(434001,HH1,HH2,HH3,ED00);
	endif;
Endif;



// iiiiiiiiiiiiiiiii

if ED13 = 1  and   ED34 <> ED15  then

  errmsg(" Niveau d'instruction le plus elevé (ED34) est différent du niveau d'instruction (ED15) ");
  reenter ;

endif;


	//********************  NAB DRC
	
	er = 1;
	recode ED34 : M08(ED00)   => er; { Fix maximum grade/year for each possible level }
				0 : 3 - 99 => 0;   {  Maternelle   }
				1 : 5 - 99 => 0;   {  Primaire   }
				2 : 11 - 99 => 0;   {  Secondaire   }
				3 : 5 - 99 => 0;   {  Programme non formel   }
				4 : 17 - 99 => 0;   {  Universitaire   }
				5 : 23 - 99 => 0;   {  Post Universitaire   }
				6 : 9 - 99 => 0;   {  INPP   }
				7 : 9 - 99 => 0;   {  Autre Professionnel   }
				8 : 9 - 99 => 0;   {  Autre   }
	           :        => 1;
	endrecode;
	
	if er and ED34 >=0 and M08(ED00) >=0  then
	  errmsg("Problème : %s à %d ans  ",strip(getlabel($,$)),M08(ED00) );
	endif;
PROC ED35


if $ <> notappl and not invalueset(ED35) then
	// errmsg(435000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;




//Classe actuelle par rapport à celui de l'annéée passée
if ED13 = 1  and   ED35 <> ED16  then

  errmsg(" Dernière classe (ED35) est différent de la dernière classe ED16) ");

endif;
PROC ED44


alphavar = $;
if alphachk("ABCDEFGHX") and $ <> "" then
	errmsg(444001,HH1,HH2,HH3,ED00);
else
	$ = alphavar;
endif;
	  
if pos("X",$) then
	if length (strip(editnote()))< 2 then
	  	errmsg(444002,HH1,HH2,HH3,ED00);
	endif;
	  
endif;
PROC ED45A

if $ <> notappl then	
		
		if $ <> notappl and not invalueset(ED45A) then
			errmsg(445100,HH1,HH2,HH3,ED00,getlabel($,$));
		endif;

	
		if !pos("A",ED44) and (ED45A = 1) then 
			errmsg(445101,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		endif;
		
		if !pos("B",ED44) and (ED45A = 2) then 
			errmsg(445102,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		endif;
		
		if !pos("C",ED44) and (ED45A = 3) then 
			errmsg(445103,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		endif;
		
		if !pos("D",ED44) and (ED45A = 4) then 
			errmsg(445104,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		endif;
		
		if !pos("E",ED44) and (ED45A = 5) then 
			errmsg(445105,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		endif;
		
		if !pos("F",ED44) and (ED45A = 6) then 
			errmsg(445106,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		endif;
		
		if !pos("G",ED44) and (ED45A = 7) then 
			errmsg(445107,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		endif;
		
		if !pos("H",ED44) and (ED45A = 8) then 
			errmsg(445108,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		endif;

endif;
PROC ED45B

if $ <> notappl then

	if $ <> notappl and not invalueset(ED45B) then
		errmsg(445200,HH1,HH2,HH3,ED00,getlabel($,$));
	endif;

	if ED45B = ED45A then
		errmsg(445209,HH1,HH2,HH3,ED00, getlabel($,$));
	endif;
	 
	if !pos("A",ED44) and (ED45B = 1) then 
		errmsg(445201,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("B",ED44) and (ED45B = 2) then 
		errmsg(445202,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("C",ED44) and (ED45B = 3) then 
		errmsg(445203,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("D",ED44) and (ED45B = 4) then 
		errmsg(445204,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		reenter;
	endif;
	
	if !pos("E",ED44) and (ED45B = 5) then 
		errmsg(445205,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		reenter;
	endif;
	
	if !pos("F",ED44) and (ED45B = 6) then 
		errmsg(445206,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		reenter;
	endif;
	
	if !pos("G",ED44) and (ED45B = 7) then 
		errmsg(445207,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		reenter;
	endif;
	
	if !pos("H",ED44) and (ED45B = 8) then 
		errmsg(445208,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
		reenter;
	endif;

endif;
PROC ED47


if $ <> notappl and not invalueset(ED47) then
	errmsg(447000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if $ = 6 then
    if length (strip(editnote()))< 2 then
  		errmsg(447001,HH1,HH2,HH3,ED00);
    	reenter;
	endif;
endif;


if ED19 <> 1 and ED53 = 1 then
	errmsg(447002,HH1,HH2,HH3,ED00,strip(EDNOM));
endif;
PROC ED48

if $ <> notappl and not invalueset(ED48) then
	errmsg(448000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if $ = 5 then
    if length (strip(editnote()))< 2 then
  		errmsg(448001,HH1,HH2,HH3,ED00);
	endif;
endif;
PROC ED50

alphavar = $;
if alphachk("ABCDEFGX") and $  <> "" then
	errmsg(450001,HH1,HH2,HH3,ED00);
else
	$ = alphavar;
endif;
	  
if pos("X",$) then
	if length (strip(editnote()))< 2 then
		errmsg(450002,HH1,HH2,HH3,ED00);
	endif;
endif;
PROC ED51A

if $ <> notappl then

	if $ <> notappl and not invalueset(ED51A) then
		errmsg(451100,HH1,HH2,HH3,ED00,getlabel($,$));
	endif;
	
	if !pos("A",ED50) and (ED51A =1) then 
		errmsg(451101,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("B",ED50) and (ED51A =2) then 
		errmsg(451102,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("C",ED50) and (ED51A =3) then 
		errmsg(451103,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("D",ED50) and (ED51A =4) then 
		errmsg(451104,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("E",ED50) and (ED51A =5) then 
		errmsg(451105,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("F",ED50) and (ED51A =6) then 
		errmsg(451106,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("G",ED50) and (ED51A = 7) then 
		errmsg(451107,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;

endif;
PROC ED51B

if $ <> notappl then

	if $ <> notappl and not invalueset(ED51B) then
		errmsg(451200,HH1,HH2,HH3,ED00,getlabel($,$));
	endif;


	if ED51B = ED51A then
		errmsg(451208,HH1,HH2,HH3,ED00, getlabel($,$));
	endif;

	if !pos("A",ED50) and (ED51B = 1) then 
		errmsg(451201,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("B",ED50) and (ED51B = 2) then 
		errmsg(451202,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("C",ED50) and (ED51B = 3) then 
		errmsg(451203,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("D",ED50) and (ED51B = 4) then 
		errmsg(451204,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("E",ED50) and (ED51B = 5) then 
		errmsg(451205,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("F",ED50) and (ED51B = 6) then 
		errmsg(451206,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;
	
	if !pos("G",ED50) and (ED51B = 7) then 
		errmsg(451207,HH1,HH2,HH3,ED00,strip(EDNOM),getlabel($,$));
	endif;

endif;
PROC ED53

if $ <> notappl and not invalueset(ED53) then
	errmsg(453000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if $ = 7 then
    if length (strip(editnote()))< 2 then
  		errmsg(453001,HH1,HH2,HH3,ED00);
	endif;
endif;

if ED19 <> 1 and ED53 = 1 then
	errmsg(453002,HH1,HH2,HH3,ED00,strip(EDNOM));
endif;
PROC ED54

if $ <> notappl and not invalueset(ED54) then
	errmsg(454000,HH1,HH2,HH3,ED00,getlabel($,$));
endif;

if $ = 5 then
    if length (strip(editnote()))< 2 then
  		errmsg(454001,HH1,HH2,HH3,ED00);
	endif;
endif;
PROC H1

if $ <> notappl and not invalueset(H1) then
	errmsg(501000,HH1,HH2,HH3,getlabel($,$));
endif;

if $ = 8 then
    if length (strip(editnote()))< 2 then
  		errmsg(501001,HH1,HH2,HH3);
	endif;
endif;
PROC H2

if $ <> notappl and not invalueset(H2) then
	errmsg(502000,HH1,HH2,HH3,getlabel($,$));
endif;

if $ = 7 then
    if length (strip(editnote()))< 2 then
  		errmsg(502001,HH1,HH2,HH3);
	endif;
endif;
PROC H3

if $ <> notappl and not invalueset(H3) then
	errmsg(503000,HH1,HH2,HH3,getlabel($,$));
endif;

if $ = 6 then
    if length (strip(editnote()))< 2 then
  		errmsg(503001,HH1,HH2,HH3);
	endif;
endif;
PROC H5

if $ <> notappl and not invalueset(H5) then
	errmsg(505000,HH1,HH2,HH3,getlabel($,$));
endif;

if $ = 10 then
    if length (strip(editnote()))< 2 then
  		errmsg(505001,HH1,HH2,HH3);
	endif;
endif;
PROC H6

if $ <> notappl and not invalueset(H6) then
	errmsg(506000,HH1,HH2,HH3,getlabel($,$));
endif;

if $ = 7 then
    if length (strip(editnote()))< 2 then
  		errmsg(506001,HH1,HH2,HH3);
	endif;
endif;
PROC H7

if $ <> notappl and not invalueset(H7) then
	errmsg(507000,HH1,HH2,HH3,getlabel($,$));
endif;

if $ = 9 then
    if length (strip(editnote()))< 2 then
  		errmsg(507001,HH1,HH2,HH3);
	endif;
endif;
PROC H8

if H8 <> 1 and H1=6  then
 	errmsg(508001,HH1,HH2,HH3) ;
endif ; 

if H8 = 1 and H1 in 1:4  then
 	errmsg(508002,HH1,HH2,HH3, strip(getlabel(H1_VS1,h1)) ) ; 
endif ; 

PROC H9

if H9 <> 1 and H1=6  then
 	errmsg(509001,HH1,HH2,HH3) ;
endif ; 

if H8 = 1 and H1 in 2:4  then
 	errmsg(509002,HH1,HH2,HH3, strip(getlabel(H1_VS1,h1)) ) ;
endif ; 
PROC H11

if $ <> notappl and not invalueset(H11) then
	errmsg(511000,HH1,HH2,HH3,getlabel($,$));
endif;

if H11 = 7 then
    if length (strip(editnote()))< 2 then
  		errmsg(511001,HH1,HH2,HH3);
	endif;
endif;
PROC H12

if $%50 <> 0 and $ <> notappl then

	errmsg(512001,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(512002,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC H18A

if $ <> notappl and not invalueset(H18A) then
	errmsg(518100,HH1,HH2,HH3,getlabel($,$));
endif;

if H18A = 11 then
    if length (strip(editnote()))< 2 then
  		errmsg(518101,HH1,HH2,HH3);
	endif;
endif;
PROC H18B

if $ <> notappl and not invalueset(H18B) then
	errmsg(518200,HH1,HH2,HH3,getlabel($,$));
endif;

if H18B = 11 then
    if length (strip(editnote()))< 2 then
  		errmsg(518201,HH1,HH2,HH3);
	endif;
endif;
PROC H19A_1

if H18A in 1:2 and H19A_1 <> 0 then
	errmsg(519101,HH1,HH2,HH3,getlabel(H18A_VS1,H18A))
endif
PROC H19A_2

if H18B in 1:2 and H19A_2 <> 0 then
	errmsg(519102,HH1,HH2,HH3,getlabel(H18B_VS1,H18B))
endif
PROC H19B_1

if H18A in 1:2 and H19B_1 <> 0 then
	errmsg(519201,HH1,HH2,HH3,getlabel(H18A_VS1, H18A))
endif
PROC H19B_2

if H18B in 1:2 and H19B_2 <> 0 then
	errmsg(519202,HH1,HH2,HH3,getlabel(H18B_VS1, H18B))
endif
PROC H20

if $ <> notappl and not invalueset(H20) then
	errmsg(520000,HH1,HH2,HH3,getlabel($,$));
endif;

if H20 = 5 then
    if length (strip(editnote()))< 2 then
  		errmsg(520001,HH1,HH2,HH3);
	endif;
endif;
PROC H21

if $ <> notappl and not invalueset(H21) then
	errmsg(521000,HH1,HH2,HH3,getlabel($,$));
endif;

if H21 = 6 then
    if length (strip(editnote()))< 2 then
  		errmsg(521001,HH1,HH2,HH3);
	endif;
endif;
PROC H24_1


if $%50 <> 0 and $ <> notappl then

	errmsg(524101,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(524102,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC H24_2


if $%50 <> 0 and $ <> notappl then

	errmsg(524201,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(524202,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC H24_3


if $%50 <> 0 and $ <> notappl then

	errmsg(524301,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(524302,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC H24_4


if $%50 <> 0 and $ <> notappl then

	errmsg(524401,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(524402,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC H27G

if $ <> notappl and not invalueset(H27G) then
	errmsg(527700,HH1,HH2,HH3,getlabel($,$));
endif;

if H27G = 1 then
    if length (strip(editnote()))< 2 then
  		errmsg(527701,HH1,HH2,HH3);
	endif;
endif;

PROC H30

if $ <> notappl and not invalueset(H30) then
	errmsg(530000,HH1,HH2,HH3,getlabel($,$));
endif;

if H30 = 4 then
    if length (strip(editnote()))< 2 then
  		errmsg(530001,HH1,HH2,HH3);
	endif;
endif;
PROC H32


if $%50 <> 0 and $ <> notappl then

	errmsg(532001,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(532002,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC H37

if $ <> notappl and not invalueset(H37) then
	errmsg(537000,HH1,HH2,HH3,getlabel($,$));
endif;

if H37 = 12 then
    if length (strip(editnote()))< 2 then
  		errmsg(537001,HH1,HH2,HH3);
	endif;
endif;
PROC H38

if $ <> notappl and not invalueset(H38) then
	errmsg(538000,HH1,HH2,HH3,getlabel($,$));
endif;

if H38 = 10 then
    if length (strip(editnote()))< 2 then
  		errmsg(538001,HH1,HH2,HH3);
	endif;
endif;
PROC H39A

if $%50 <> 0 and $ <> notappl then

	errmsg(539101,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(539102,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC H40

if $ <> notappl and not invalueset(H40) then
	errmsg(540000,HH1,HH2,HH3,getlabel($,$));
endif;

if H40 = 7 then
    if length (strip(editnote()))< 2 then
  		errmsg(540001,HH1,HH2,HH3);
	endif;
endif;
PROC H43

if $ <> notappl and not invalueset(H43) then
	errmsg(543000,HH1,HH2,HH3,getlabel($,$));
endif;

if H43 = 7 then
    if length (strip(editnote()))< 2 then
  		errmsg(543001,HH1,HH2,HH3);
	endif;
endif;
PROC H44

if $ <> notappl and not invalueset(H44) then
	errmsg(544000,HH1,HH2,HH3,getlabel($,$));
endif;

if $ = 4 then
    if length (strip(editnote()))< 2 then
  		errmsg(544001,HH1,HH2,HH3);
	endif;
endif;
PROC H45

if $%50 <> 0 and $ <> notappl then

	errmsg(545001,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(545002,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC H46

if $ <> notappl and not invalueset(H46) then
	errmsg(546000,HH1,HH2,HH3,getlabel($,$));
endif;

if H46 = 8 then
    if length (strip(editnote()))< 2 then
  		errmsg(546001,HH1,HH2,HH3);
	endif;
endif;
PROC H47

if $ <> notappl and not invalueset(H47) then
	errmsg(547000,HH1,HH2,HH3,getlabel($,$));
endif;

if H47 = 6 then
    if length (strip(editnote()))< 2 then
  		errmsg(547001,HH1,HH2,HH3);
	endif;
endif;
PROC H50

if $%50 <> 0 and $ <> notappl then

	errmsg(550001,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(550002,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC H51

if $ <> notappl and not invalueset(H51) then
	errmsg(551000,HH1,HH2,HH3,getlabel($,$));
endif;

if H51 = 9 then
    if length (strip(editnote()))< 2 then
  		errmsg(551001,HH1,HH2,HH3);
	endif;
endif;
PROC H54

if $%50 <> 0 and $ <> notappl then

	errmsg(554001,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(554002,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC H10A


if H10A < H12 then
	errmsg(510101,HH1,HH2,HH3,H10A,H12);
endif;

if $%50 <> 0 and $ <> notappl then

	errmsg(510102,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(510103,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC ACTIFS_EDT



Numeric actif;

actif = count(ACTIFS Where AC02 = 2);

if actif = 59 then 
	errmsg(600000,HH1,HH2,HH3)
endif;
PROC AC05


if $%50 <> 0 and $ <> notappl then

	errmsg(605001,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(605002,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC AC06


if $%50 <> 0 and $ <> notappl then

	errmsg(606001,HH1,HH2,HH3);
				
	if length(strip(editnote()))<15 then
	
		errmsg(606002,HH1,HH2,HH3);
		
	endif;
	
endif;
PROC SA02

if $ <> notappl and not invalueset(SA02) then
	errmsg(702000,HH1,HH2,HH3,SA00,getlabel($,$));
endif;

if $ = 17 then
    if length (strip(editnote()))< 2 then
  		errmsg(702001,HH1,HH2,HH3,SA00);
	endif;
endif;
PROC SA06

if $ <> notappl and not invalueset(SA06) then
	errmsg(706000,HH1,HH2,HH3,SA00,getlabel($,$));
endif;

if $ = 8 then
   if length (strip(editnote()))< 2 then
  		errmsg(706001,HH1,HH2,HH3,SA00);
	endif;
endif;
PROC SA07

if $ <> notappl and not invalueset(SA07) then
	errmsg(707000,HH1,HH2,HH3,SA00,getlabel($,$));
endif;

if $ = 6 then
   if length (strip(editnote()))< 2 then
  		errmsg(707001,HH1,HH2,HH3,SA00);
	endif;
endif;
PROC SA12

if $ <> notappl and not invalueset(SA12) then
	errmsg(712000,HH1,HH2,HH3,SA00,getlabel($,$));
endif;

if $ = 9 then
   if length (strip(editnote()))< 2 then
  		errmsg(712001,HH1,HH2,HH3,SA00);
	endif;
endif;
PROC SA14H

if $ <> notappl and not invalueset(SA14H) then
	errmsg(714800,HH1,HH2,HH3,SA00,getlabel($,$));
endif;

if SA14H = 1 then 
   if length (strip(editnote()))< 2 then
  		errmsg(714801,HH1,HH2,HH3,SA00);
	endif;
endif;
PROC SA16


if $%50 <> 0 and $ <> notappl then
	errmsg(716001,HH1,HH2,HH3,SA00);
				
		if length(strip(editnote()))<15 then
			errmsg(716002,HH1,HH2,HH3,SA00);
		endif;			
		
endif;
PROC SA18

if $%50 <> 0 and $ <> notappl then
	errmsg(718001,HH1,HH2,HH3,SA00);
				
		if length(strip(editnote()))<15 then
			errmsg(718002,HH1,HH2,HH3,SA00);
		endif;			
		
endif;
PROC SA19


if $%50 <> 0 and $ <> notappl then
	errmsg(719001,HH1,HH2,HH3,SA00);
				
		if length(strip(editnote()))<15 then
			errmsg(719002,HH1,HH2,HH3,SA00);
		endif;			
		
endif;
PROC SA22


if $%50 <> 0 and $ <> notappl then
	errmsg(722001,HH1,HH2,HH3,SA00);
				
		if length(strip(editnote()))<15 then
			errmsg(722002,HH1,HH2,HH3,SA00);
		endif;			
		
endif;
PROC SA26


if $%50 <> 0 and $ <> notappl then
	errmsg(726001,HH1,HH2,HH3,SA00);
				
		if length(strip(editnote()))<15 then
			errmsg(726002,HH1,HH2,HH3,SA00);
		endif;			
		
endif;
PROC SA27

if $ <> notappl and not invalueset(SA27) then
	errmsg(727000,HH1,HH2,HH3,SA00,getlabel($,$));
endif;

if $ = 17 then
   if length (strip(editnote()))< 2 then
  		errmsg(727001,HH1,HH2,HH3,SA00);
	endif;
endif;


PROC SA50

if $ <> notappl and not invalueset(SA50) then
	errmsg(750000,HH1,HH2,HH3,SA00,getlabel($,$));
endif;

if $ = 12 then
   if length (strip(editnote()))< 2 then
  		errmsg(750001,HH1,HH2,HH3,SA00);
	endif;
endif;
PROC SA51

if $ <> notappl and not invalueset(SA51) then
	errmsg(751000,HH1,HH2,HH3,SA00,getlabel($,$));
endif;

if $ = 9 then
   if length (strip(editnote()))< 2 then
  		errmsg(751001,HH1,HH2,HH3,SA00);
	endif;
endif;
PROC SA54_2


if $ <> notappl then

	if $ <> notappl and not invalueset(SA54_2) then
		errmsg(754200,HH1,HH2,HH3,SA00,getlabel($,$));
	endif;
	
	if $ = SA54_1 then
		errmsg(754201,HH1,HH2,HH3,SA00);
	endif;
 
 endif;
PROC SA54_3

if $ <> notappl then

	if not invalueset(SA54_3) then
		errmsg(754300,HH1,HH2,HH3,SA00,getlabel($,$));
	endif;
	
	if $ = SA54_1 or $ = SA54_2 then
		errmsg(754301,HH1,HH2,HH3,SA00);
	endif;
endif;
 
PROC SA54_4


if $ <> notappl then

	if $ <> notappl and not invalueset(SA54_4) then
		errmsg(754400,HH1,HH2,HH3,SA00,getlabel($,$));
	endif;
	
	if $ = SA54_1 or $ = SA54_2 or $ = SA54_3 then
		errmsg(754401,HH1,HH2,HH3,SA00);
	endif;
endif;
PROC SA58

if $ <> notappl and not invalueset(SA58) then
	errmsg(758000,HH1,HH2,HH3,SA00,getlabel($,$));
endif;

if $ = 5 then
   if length (strip(editnote()))< 2 then
  		errmsg(758001,HH1,HH2,HH3,SA00);
	endif;
endif;
